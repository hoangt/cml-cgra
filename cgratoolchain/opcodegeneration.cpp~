#include <iostream>
#include <fstream>
#include <sstream>
#include <map>
#include <string>
#include "cgradef.h"
#include <cstdlib>
#include <cstdio>

using namespace std;


std::map<int,int> nodeid_type;
std::map<int,string> nodeid_names;
std::multimap<int,int> in_edge;
std::multimap<int,int> out_edge;
int dipal=25,a=1,b=2,c=3,i=4;

void printvalue(string var,string obj)
{

  FILE *pipe;
  char result[80];
  string command;
  
  command = "/home/dipal/workspace/CGRA/scripts/getaddress.sh ";
  command += obj + " " + var;

  if (( pipe = popen(command.c_str(), "r")) == NULL)
  {
    perror("popen");
    exit(1);
  }

  fgets(result,80,pipe);

  pclose(pipe);

  int* addr=(int*)strtol(result,NULL,16);

  printf("Address is %x\n",addr);

}




int getnodetype(int id)
{
  std::map<int, int>::iterator it = nodeid_type.find(id);
  return it->second;
}

int getroutesrc(int id)
{
  std::multimap<int, int>::iterator it = in_edge.find(id);
  if(getnodetype(it->second) != route)
    return it->second;
  else
    getroutesrc(it->second);
}

string getloadvarname(int id)
{
  std::multimap<int, int>::iterator it = out_edge.find(id);
  int loadid;
  std::pair <std::multimap<int,int>::iterator, std::multimap<int,int>::iterator> ret;
  ret = in_edge.equal_range(it->second);
  for (std::multimap<int,int>::iterator it2=ret.first; it2!=ret.second; ++it2)
  {
    if(it2->second != id)
    {
      loadid=it2->second;
    }
  }

  if(getnodetype(loadid) == route)
    loadid=getroutesrc(loadid);

  std::map<int, string>::iterator nameit = nodeid_names.find(loadid);
  return nameit->second;
}

string getstorevarname(int id)
{
  std::multimap<int, int>::iterator it = out_edge.find(id);
  int loadid;
  std::pair <std::multimap<int,int>::iterator, std::multimap<int,int>::iterator> ret;
  ret = in_edge.equal_range(it->second);
  for (std::multimap<int,int>::iterator it2=ret.first; it2!=ret.second; ++it2)
  {
    if(getnodetype(it2->second)==route || getnodetype(it2->second)==constant )
    {
      loadid=it2->second;
    }
  }

  if(getnodetype(loadid) == route)
    loadid=getroutesrc(loadid);

  std::map<int, string>::iterator nameit = nodeid_names.find(loadid);
  return nameit->second;
}



int main(int argc, char* argv[])
{
  if(argc<5)
  {
    cout << "Usage nodefile FINALNODEFILE REGI_EDGEFILE LLVMNODEFILE CFILE";
    return -1;
  }

  string line, nodename;
  int nodeID,node_type,other_nodeID;

  ifstream file1 (argv[1]);
  if(file1.is_open())
  {
    while ( getline(file1,line) )
    {
      istringstream strout(line);
      strout >> nodeID >> node_type;
      nodeid_type.insert(std::pair<int,int>(nodeID,node_type));
    }
  }
  file1.close();

  ifstream file2 (argv[2]);
  if(file2.is_open())
  {
    while ( getline(file2,line) )
    {
      istringstream strout(line);
      strout >> nodeID >> other_nodeID;
      out_edge.insert(std::pair<int,int>(nodeID,other_nodeID));
      in_edge.insert(std::pair<int,int>(other_nodeID,nodeID));
    }
  }
  file2.close();

  ifstream file3 (argv[3]);
  if(file3.is_open())
  {
    while ( getline(file3,line) )
    {
      istringstream strout(line);
      strout >> nodeID >> node_type >> nodename ;
      nodeid_names.insert(std::pair<int,string>(nodeID,nodename));
    }
  }
  file3.close();

  for(std::map<int, int>::iterator it = nodeid_type.begin(); it != nodeid_type.end(); ++it)
  {
    if(it->second == route)
    {
      cout<<it->first<<"\t"<<getroutesrc(it->first)<<"\troute"<<endl;
    }  	

    if(it->second == ld_add)
    {
      cout<<it->first<<"\t"<<getloadvarname(it->first)<<"\tld_add"<<endl;
      printvalue(getloadvarname(it->first),argv[0]);

    }

    if(it->second == st_add)
    {
      cout<<it->first<<"\t"<<getstorevarname(it->first)<<"\tst_add"<<endl;
			printvalue(getstorevarname(it->first),argv[0]);
    }

  }
      printvalue("dipal",argv[4]);
  return 0;
}









