/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void HexagonInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    292U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    285U,	// BUNDLE
    302U,	// LIFETIME_START
    272U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    518U,	// A2_add
    2102299U,	// A2_paddf
    2106395U,	// A2_paddfnew
    2102392U,	// A2_paddt
    2106488U,	// A2_paddtnew
    518U,	// ADD64_rr
    12806U,	// ADDASL
    268435974U,	// ADD_ri
    270537755U,	// ADD_ri_cNotPt
    270537848U,	// ADD_ri_cPt
    270541851U,	// ADD_ri_cdnNotPt
    270541944U,	// ADD_ri_cdnPt
    518U,	// ADD_rr
    2102299U,	// ADD_rr_cNotPt
    2102392U,	// ADD_rr_cPt
    2106395U,	// ADD_rr_cdnNotPt
    2106488U,	// ADD_rr_cdnPt
    4211206U,	// ADDi_ASLri_V4
    6308358U,	// ADDi_LSRri_V4
    276840966U,	// ADDi_MPYri_V4
    8405510U,	// ADDi_MPYrr_V4
    536871430U,	// ADDr_ADDri_V4
    805306886U,	// ADDr_MPYir_V4
    1073742342U,	// ADDr_MPYri_V4
    1073742342U,	// ADDr_MPYrr_V4
    1342177798U,	// ADDr_SUBri_V4
    1342177798U,	// ADDri_SUBr_V4
    1621119494U,	// ADDri_acc
    1891652102U,	// ADDrr_acc
    317U,	// ADJCALLSTACKDOWN
    317U,	// ADJCALLSTACKUP
    268435974U,	// ADJDYNALLOC
    25172U,	// ALLOCFRAME
    29190U,	// ALL_pp
    14713350U,	// AND_pnotp
    2160099846U,	// AND_pp
    2426438150U,	// AND_ri
    2160099846U,	// AND_rr
    2160099846U,	// AND_rr64
    16782363U,	// AND_rr_cNotPt
    16782456U,	// AND_rr_cPt
    16786459U,	// AND_rr_cdnNotPt
    16786552U,	// AND_rr_cdnPt
    2166391302U,	// ANDd_NOTd_V4
    4231686U,	// ANDi_ASLri_V4
    6328838U,	// ANDi_LSRri_V4
    1897964038U,	// ANDr_ANDr_NOTr_V4
    1891672582U,	// ANDr_ANDrr_V4
    45574U,	// ANDr_ORrr_V4
    49670U,	// ANDr_XORrr_V4
    53766U,	// ANY_pp
    21029382U,	// ARGEXTEND
    2694902278U,	// ASL
    66054U,	// ASLH
    23073819U,	// ASLH_cNotPt_V4
    23073912U,	// ASLH_cPt_V4
    23077915U,	// ASLH_cdnNotPt_V4
    23078008U,	// ASLH_cdnPt_V4
    2963345926U,	// ASL_ADD_ri
    1891701254U,	// ASL_ADD_rr
    2963345926U,	// ASL_ADDd_ri
    1891701254U,	// ASL_ADDd_rr
    2963350022U,	// ASL_AND_ri
    1891705350U,	// ASL_AND_rr
    2963350022U,	// ASL_ANDd_ri
    1891705350U,	// ASL_ANDd_rr
    2963354118U,	// ASL_OR_ri
    1891709446U,	// ASL_OR_rr
    2963354118U,	// ASL_ORd_ri
    1891709446U,	// ASL_ORd_rr
    2963358214U,	// ASL_SUB_ri
    1891713542U,	// ASL_SUB_rr
    2963358214U,	// ASL_SUBd_ri
    1891713542U,	// ASL_SUBd_rr
    2963362310U,	// ASL_XOR_ri
    2963362310U,	// ASL_XORd_ri
    2160128518U,	// ASL_rr
    2160128518U,	// ASLd
    2694902278U,	// ASLd_ri
    1891717638U,	// ASLd_rr_xor_V4
    90630U,	// ASRH
    25170971U,	// ASRH_cNotPt_V4
    25171064U,	// ASRH_cPt_V4
    25175067U,	// ASRH_cdnNotPt_V4
    25175160U,	// ASRH_cdnPt_V4
    2963370502U,	// ASR_ADD_ri
    1891725830U,	// ASR_ADD_rr
    2963370502U,	// ASR_ADDd_ri
    1891725830U,	// ASR_ADDd_rr
    2963374598U,	// ASR_AND_ri
    1891729926U,	// ASR_AND_rr
    2963374598U,	// ASR_ANDd_ri
    1891729926U,	// ASR_ANDd_rr
    2963378694U,	// ASR_OR_ri
    1891734022U,	// ASR_OR_rr
    2963378694U,	// ASR_ORd_ri
    1891734022U,	// ASR_ORd_rr
    2963382790U,	// ASR_SUB_ri
    1891738118U,	// ASR_SUB_rr
    2963382790U,	// ASR_SUBd_ri
    1891738118U,	// ASR_SUBd_rr
    2694951430U,	// ASR_ri
    2160177670U,	// ASR_rr
    2694951430U,	// ASRd_ri
    2160177670U,	// ASRd_rr
    115206U,	// ASRd_rr_xor_V4
    373U,	// BARRIER
    2426524166U,	// C4_cmpltei
    2426528262U,	// C4_cmplteui
    2426532358U,	// C4_cmpneqi
    131585U,	// CALL
    131597U,	// CALLR
    131597U,	// CALLRv3
    131585U,	// CALLv3
    2694976006U,	// CLRBIT
    2694976006U,	// CLRBIT_31
    2160206342U,	// CMPEHexagon4rr
    144026U,	// CMPEQn1_f_Jumpnv_nt_V4
    148122U,	// CMPEQn1_f_Jumpnv_t_V4
    144039U,	// CMPEQn1_t_Jumpnv_nt_V4
    148135U,	// CMPEQn1_t_Jumpnv_t_V4
    2426544646U,	// CMPEQri
    27415194U,	// CMPEQri_f_Jumpnv_nt_V4
    29512346U,	// CMPEQri_f_Jumpnv_t_V4
    27415207U,	// CMPEQri_t_Jumpnv_nt_V4
    29512359U,	// CMPEQri_t_Jumpnv_t_V4
    2160206342U,	// CMPEQrr
    27419290U,	// CMPEQrr_f_Jumpnv_nt_V4
    29516442U,	// CMPEQrr_f_Jumpnv_t_V4
    27419303U,	// CMPEQrr_t_Jumpnv_nt_V4
    29516455U,	// CMPEQrr_t_Jumpnv_t_V4
    2160226822U,	// CMPGT64rr
    2160230918U,	// CMPGTU64rr
    2426569222U,	// CMPGTUri
    27415269U,	// CMPGTUri_f_Jumpnv_nt_V4
    29512421U,	// CMPGTUri_f_Jumpnv_t_V4
    27415283U,	// CMPGTUri_t_Jumpnv_nt_V4
    29512435U,	// CMPGTUri_t_Jumpnv_t_V4
    2160230918U,	// CMPGTUrr
    27419365U,	// CMPGTUrr_f_Jumpnv_nt_V4
    29516517U,	// CMPGTUrr_f_Jumpnv_t_V4
    27419379U,	// CMPGTUrr_t_Jumpnv_nt_V4
    29516531U,	// CMPGTUrr_t_Jumpnv_t_V4
    144051U,	// CMPGTn1_f_Jumpnv_nt_V4
    148147U,	// CMPGTn1_f_Jumpnv_t_V4
    144064U,	// CMPGTn1_t_Jumpnv_nt_V4
    148160U,	// CMPGTn1_t_Jumpnv_t_V4
    2426565126U,	// CMPGTri
    27415219U,	// CMPGTri_f_Jumpnv_nt_V4
    29512371U,	// CMPGTri_f_Jumpnv_t_V4
    27415232U,	// CMPGTri_t_Jumpnv_nt_V4
    29512384U,	// CMPGTri_t_Jumpnv_t_V4
    2160226822U,	// CMPGTrr
    27419315U,	// CMPGTrr_f_Jumpnv_nt_V4
    29516467U,	// CMPGTrr_f_Jumpnv_t_V4
    27419328U,	// CMPGTrr_t_Jumpnv_nt_V4
    29516480U,	// CMPGTrr_t_Jumpnv_t_V4
    31625957U,	// CMPLTUrr_f_Jumpnv_nt_V4
    33723109U,	// CMPLTUrr_f_Jumpnv_t_V4
    31625971U,	// CMPLTUrr_t_Jumpnv_nt_V4
    33723123U,	// CMPLTUrr_t_Jumpnv_t_V4
    31625907U,	// CMPLTrr_f_Jumpnv_nt_V4
    33723059U,	// CMPLTrr_f_Jumpnv_t_V4
    31625920U,	// CMPLTrr_t_Jumpnv_nt_V4
    33723072U,	// CMPLTrr_t_Jumpnv_t_V4
    2695012870U,	// CMPbEQri_V4
    2160239110U,	// CMPbEQrr_sbsb_V4
    2160239110U,	// CMPbEQrr_ubub_V4
    2426581510U,	// CMPbGTUri_V4
    2160243206U,	// CMPbGTUrr_V4
    180742U,	// CMPbGTrr_V4
    2695025158U,	// CMPhEQri_V4
    2160251398U,	// CMPhEQrr_shl_V4
    2160251398U,	// CMPhEQrr_xor_V4
    2426593798U,	// CMPhGTUri_V4
    2160255494U,	// CMPhGTUrr_V4
    193030U,	// CMPhGTrr_shl_V4
    2160194054U,	// CMPnotEQ_rr
    2160189958U,	// CMPnotGTU_rr
    2160185862U,	// CMPnotGT_rr
    304284166U,	// COMBINE_Ii
    35848710U,	// COMBINE_Ir_V4
    306381318U,	// COMBINE_iI_V4
    306381318U,	// COMBINE_ii
    2426606086U,	// COMBINE_rI_V4
    2160267782U,	// COMBINE_rr
    39851035U,	// COMBINE_rr_cNotPt
    39851128U,	// COMBINE_rr_cPt
    39855131U,	// COMBINE_rr_cdnNotPt
    39855224U,	// COMBINE_rr_cdnPt
    42148358U,	// CONST32
    42148358U,	// CONST32GP_set
    3221430790U,	// CONST32_Float_Real
    3221430790U,	// CONST32_Int_Real
    209414U,	// CONST32_Label
    42148358U,	// CONST32_set
    44245510U,	// CONST32_set_jt
    213510U,	// CONST64_Float_Real
    213510U,	// CONST64_Int_Real
    217606U,	// CONVERT_d2df
    221702U,	// CONVERT_d2sf
    46363142U,	// CONVERT_df2d
    48460294U,	// CONVERT_df2d_nchop
    229894U,	// CONVERT_df2sf
    46371334U,	// CONVERT_df2ud
    48468486U,	// CONVERT_df2ud_nchop
    46375430U,	// CONVERT_df2uw
    48472582U,	// CONVERT_df2uw_nchop
    46379526U,	// CONVERT_df2w
    48476678U,	// CONVERT_df2w_nchop
    46383622U,	// CONVERT_sf2d
    48480774U,	// CONVERT_sf2d_nchop
    250374U,	// CONVERT_sf2df
    46391814U,	// CONVERT_sf2ud
    48488966U,	// CONVERT_sf2ud_nchop
    46395910U,	// CONVERT_sf2uw
    48493062U,	// CONVERT_sf2uw_nchop
    46400006U,	// CONVERT_sf2w
    48497158U,	// CONVERT_sf2w_nchop
    266758U,	// CONVERT_ud2df
    270854U,	// CONVERT_ud2sf
    274950U,	// CONVERT_uw2df
    279046U,	// CONVERT_uw2sf
    283142U,	// CONVERT_w2df
    287238U,	// CONVERT_w2sf
    291334U,	// CTLZ64_rr
    291334U,	// CTLZ_rr
    295430U,	// CTTZ64_rr
    295430U,	// CTTZ_rr
    341U,	// DEALLOCFRAME
    354U,	// DEALLOC_RET_V4
    299547U,	// DEALLOC_RET_cNotPt_V4
    303643U,	// DEALLOC_RET_cNotdnPnt_V4
    307739U,	// DEALLOC_RET_cNotdnPt_V4
    299640U,	// DEALLOC_RET_cPt_V4
    303736U,	// DEALLOC_RET_cdnPnt_V4
    307832U,	// DEALLOC_RET_cdnPt_V4
    131604U,	// EH_RETURN_JMPR
    262U,	// ENDLOOP0
    311814U,	// FCMPOEQ32_rr
    315910U,	// FCMPOEQ64_rr
    320006U,	// FCMPOGE32_rr
    324102U,	// FCMPOGE64_rr
    328198U,	// FCMPOGT32_rr
    332294U,	// FCMPOGT64_rr
    311814U,	// FCMPUEQ32_rr
    315910U,	// FCMPUEQ64_rr
    320006U,	// FCMPUGE32_rr
    324102U,	// FCMPUGE64_rr
    328198U,	// FCMPUGT32_rr
    332294U,	// FCMPUGT64_rr
    42148358U,	// FCONST32_nsdata
    50668038U,	// FMADD_dp
    50672134U,	// FMADD_sp
    344582U,	// FMAX_dp
    348678U,	// FMAX_sp
    352774U,	// FMIN_dp
    356870U,	// FMIN_sp
    48595462U,	// HEXAGON_A2_abs
    48595462U,	// HEXAGON_A2_absp
    52789766U,	// HEXAGON_A2_abssat
    518U,	// HEXAGON_A2_add
    3489661446U,	// HEXAGON_A2_addh_h16_hh
    3489661446U,	// HEXAGON_A2_addh_h16_hl
    3758096902U,	// HEXAGON_A2_addh_h16_lh
    3758096902U,	// HEXAGON_A2_addh_h16_ll
    3489661446U,	// HEXAGON_A2_addh_h16_sat_hh
    3489661446U,	// HEXAGON_A2_addh_h16_sat_hl
    3758096902U,	// HEXAGON_A2_addh_h16_sat_lh
    3758096902U,	// HEXAGON_A2_addh_h16_sat_ll
    3758096902U,	// HEXAGON_A2_addh_l16_hl
    3758096902U,	// HEXAGON_A2_addh_l16_ll
    3758096902U,	// HEXAGON_A2_addh_l16_sat_hl
    3758096902U,	// HEXAGON_A2_addh_l16_sat_ll
    268435974U,	// HEXAGON_A2_addi
    518U,	// HEXAGON_A2_addp
    518U,	// HEXAGON_A2_addsat
    2160099846U,	// HEXAGON_A2_and
    2694873606U,	// HEXAGON_A2_andir
    2160099846U,	// HEXAGON_A2_andp
    66054U,	// HEXAGON_A2_aslh
    90630U,	// HEXAGON_A2_asrh
    2202210822U,	// HEXAGON_A2_combine_hh
    2202210822U,	// HEXAGON_A2_combine_hl
    2204307974U,	// HEXAGON_A2_combine_lh
    2204307974U,	// HEXAGON_A2_combine_ll
    306381318U,	// HEXAGON_A2_combineii
    2160267782U,	// HEXAGON_A2_combinew
    365062U,	// HEXAGON_A2_max
    369158U,	// HEXAGON_A2_maxu
    373254U,	// HEXAGON_A2_min
    377350U,	// HEXAGON_A2_minu
    48615942U,	// HEXAGON_A2_neg
    48615942U,	// HEXAGON_A2_negp
    52810246U,	// HEXAGON_A2_negsat
    385542U,	// HEXAGON_A2_not
    385542U,	// HEXAGON_A2_notp
    2160456198U,	// HEXAGON_A2_or
    2695229958U,	// HEXAGON_A2_orir
    2160456198U,	// HEXAGON_A2_orp
    393734U,	// HEXAGON_A2_sat
    397830U,	// HEXAGON_A2_satb
    401926U,	// HEXAGON_A2_sath
    406022U,	// HEXAGON_A2_satub
    410118U,	// HEXAGON_A2_satuh
    2160480774U,	// HEXAGON_A2_sub
    2202423814U,	// HEXAGON_A2_subh_h16_hh
    2202423814U,	// HEXAGON_A2_subh_h16_hl
    2204520966U,	// HEXAGON_A2_subh_h16_lh
    2204520966U,	// HEXAGON_A2_subh_h16_ll
    2202423814U,	// HEXAGON_A2_subh_h16_sat_hh
    2202423814U,	// HEXAGON_A2_subh_h16_sat_hl
    2204520966U,	// HEXAGON_A2_subh_h16_sat_lh
    2204520966U,	// HEXAGON_A2_subh_h16_sat_ll
    2204520966U,	// HEXAGON_A2_subh_l16_hl
    2204520966U,	// HEXAGON_A2_subh_l16_ll
    2204520966U,	// HEXAGON_A2_subh_l16_sat_hl
    2204520966U,	// HEXAGON_A2_subh_l16_sat_ll
    2160480774U,	// HEXAGON_A2_subp
    38167046U,	// HEXAGON_A2_subri
    2160480774U,	// HEXAGON_A2_subsat
    48656902U,	// HEXAGON_A2_svaddh
    52851206U,	// HEXAGON_A2_svaddhs
    426502U,	// HEXAGON_A2_svadduhs
    48665094U,	// HEXAGON_A2_svavgh
    59150854U,	// HEXAGON_A2_svavghs
    48669190U,	// HEXAGON_A2_svnavgh
    48673286U,	// HEXAGON_A2_svsubh
    52867590U,	// HEXAGON_A2_svsubhs
    442886U,	// HEXAGON_A2_svsubuhs
    446982U,	// HEXAGON_A2_swiz
    451078U,	// HEXAGON_A2_sxtb
    455174U,	// HEXAGON_A2_sxth
    459270U,	// HEXAGON_A2_sxtw
    21029382U,	// HEXAGON_A2_tfr
    463366U,	// HEXAGON_A2_tfrih
    467462U,	// HEXAGON_A2_tfril
    21029382U,	// HEXAGON_A2_tfrp
    4064752134U,	// HEXAGON_A2_tfrpi
    4064752134U,	// HEXAGON_A2_tfrsi
    48710150U,	// HEXAGON_A2_vabsh
    52904454U,	// HEXAGON_A2_vabshsat
    48714246U,	// HEXAGON_A2_vabsw
    52908550U,	// HEXAGON_A2_vabswsat
    48656902U,	// HEXAGON_A2_vaddh
    52851206U,	// HEXAGON_A2_vaddhs
    48718342U,	// HEXAGON_A2_vaddub
    52912646U,	// HEXAGON_A2_vaddubs
    426502U,	// HEXAGON_A2_vadduhs
    48722438U,	// HEXAGON_A2_vaddw
    52916742U,	// HEXAGON_A2_vaddws
    48665094U,	// HEXAGON_A2_vavgh
    61248006U,	// HEXAGON_A2_vavghcr
    59150854U,	// HEXAGON_A2_vavghr
    48726534U,	// HEXAGON_A2_vavgub
    59212294U,	// HEXAGON_A2_vavgubr
    48730630U,	// HEXAGON_A2_vavguh
    59216390U,	// HEXAGON_A2_vavguhr
    48734726U,	// HEXAGON_A2_vavguw
    59220486U,	// HEXAGON_A2_vavguwr
    48738822U,	// HEXAGON_A2_vavgw
    61321734U,	// HEXAGON_A2_vavgwcr
    59224582U,	// HEXAGON_A2_vavgwr
    508422U,	// HEXAGON_A2_vcmpbeq
    512518U,	// HEXAGON_A2_vcmpbgtu
    516614U,	// HEXAGON_A2_vcmpheq
    520710U,	// HEXAGON_A2_vcmphgt
    524806U,	// HEXAGON_A2_vcmphgtu
    528902U,	// HEXAGON_A2_vcmpweq
    532998U,	// HEXAGON_A2_vcmpwgt
    537094U,	// HEXAGON_A2_vcmpwgtu
    541190U,	// HEXAGON_A2_vconj
    545286U,	// HEXAGON_A2_vmaxh
    549382U,	// HEXAGON_A2_vmaxub
    553478U,	// HEXAGON_A2_vmaxuh
    557574U,	// HEXAGON_A2_vmaxuw
    561670U,	// HEXAGON_A2_vmaxw
    565766U,	// HEXAGON_A2_vminh
    569862U,	// HEXAGON_A2_vminub
    573958U,	// HEXAGON_A2_vminuh
    578054U,	// HEXAGON_A2_vminuw
    582150U,	// HEXAGON_A2_vminw
    48669190U,	// HEXAGON_A2_vnavgh
    63349254U,	// HEXAGON_A2_vnavghcr
    65446406U,	// HEXAGON_A2_vnavghr
    48820742U,	// HEXAGON_A2_vnavgw
    63500806U,	// HEXAGON_A2_vnavgwcr
    65597958U,	// HEXAGON_A2_vnavgwr
    590342U,	// HEXAGON_A2_vraddub
    594438U,	// HEXAGON_A2_vraddub_acc
    598534U,	// HEXAGON_A2_vrsadub
    602630U,	// HEXAGON_A2_vrsadub_acc
    48673286U,	// HEXAGON_A2_vsubh
    52867590U,	// HEXAGON_A2_vsubhs
    48841222U,	// HEXAGON_A2_vsubub
    53035526U,	// HEXAGON_A2_vsububs
    442886U,	// HEXAGON_A2_vsubuhs
    48845318U,	// HEXAGON_A2_vsubw
    53039622U,	// HEXAGON_A2_vsubws
    614918U,	// HEXAGON_A2_xor
    614918U,	// HEXAGON_A2_xorp
    619014U,	// HEXAGON_A2_zxtb
    623110U,	// HEXAGON_A2_zxth
    2695467526U,	// HEXAGON_A4_cround_ri
    2160693766U,	// HEXAGON_A4_cround_rr
    631302U,	// HEXAGON_A4_modwrapu
    2695475718U,	// HEXAGON_A4_round_ri
    2695475718U,	// HEXAGON_A4_round_ri_sat
    2160701958U,	// HEXAGON_A4_round_rr
    2160701958U,	// HEXAGON_A4_round_rr_sat
    639494U,	// HEXAGON_A5_vaddhubs
    29190U,	// HEXAGON_C2_all8
    2160099846U,	// HEXAGON_C2_and
    14713350U,	// HEXAGON_C2_andn
    53766U,	// HEXAGON_C2_any8
    2160206342U,	// HEXAGON_C2_cmpeq
    2694980102U,	// HEXAGON_C2_cmpeqi
    2160206342U,	// HEXAGON_C2_cmpeqp
    643590U,	// HEXAGON_C2_cmpgei
    647686U,	// HEXAGON_C2_cmpgeui
    2160226822U,	// HEXAGON_C2_cmpgt
    2695000582U,	// HEXAGON_C2_cmpgti
    2160226822U,	// HEXAGON_C2_cmpgtp
    2160230918U,	// HEXAGON_C2_cmpgtu
    2695004678U,	// HEXAGON_C2_cmpgtui
    2160230918U,	// HEXAGON_C2_cmpgtup
    651782U,	// HEXAGON_C2_cmplt
    655878U,	// HEXAGON_C2_cmpltu
    659974U,	// HEXAGON_C2_mask
    2160730630U,	// HEXAGON_C2_mux
    2695504390U,	// HEXAGON_C2_muxii
    2160730630U,	// HEXAGON_C2_muxir
    2695504390U,	// HEXAGON_C2_muxri
    385542U,	// HEXAGON_C2_not
    2160456198U,	// HEXAGON_C2_or
    15069702U,	// HEXAGON_C2_orn
    21029382U,	// HEXAGON_C2_pxfer_map
    21029382U,	// HEXAGON_C2_tfrpr
    21029382U,	// HEXAGON_C2_tfrrp
    668166U,	// HEXAGON_C2_vitpack
    672262U,	// HEXAGON_C2_vmux
    614918U,	// HEXAGON_C2_xor
    676358U,	// HEXAGON_C4_fastcorner9
    680454U,	// HEXAGON_C4_fastcorner9_not
    217606U,	// HEXAGON_F2_conv_d2df
    221702U,	// HEXAGON_F2_conv_d2sf
    48460294U,	// HEXAGON_F2_conv_df2d
    48460294U,	// HEXAGON_F2_conv_df2d_chop
    229894U,	// HEXAGON_F2_conv_df2sf
    48468486U,	// HEXAGON_F2_conv_df2ud
    48468486U,	// HEXAGON_F2_conv_df2ud_chop
    48472582U,	// HEXAGON_F2_conv_df2uw
    48472582U,	// HEXAGON_F2_conv_df2uw_chop
    48476678U,	// HEXAGON_F2_conv_df2w
    48476678U,	// HEXAGON_F2_conv_df2w_chop
    48480774U,	// HEXAGON_F2_conv_sf2d
    48480774U,	// HEXAGON_F2_conv_sf2d_chop
    250374U,	// HEXAGON_F2_conv_sf2df
    48488966U,	// HEXAGON_F2_conv_sf2ud
    48488966U,	// HEXAGON_F2_conv_sf2ud_chop
    48493062U,	// HEXAGON_F2_conv_sf2uw
    48493062U,	// HEXAGON_F2_conv_sf2uw_chop
    48497158U,	// HEXAGON_F2_conv_sf2w
    48497158U,	// HEXAGON_F2_conv_sf2w_chop
    266758U,	// HEXAGON_F2_conv_ud2df
    270854U,	// HEXAGON_F2_conv_ud2sf
    274950U,	// HEXAGON_F2_conv_uw2df
    279046U,	// HEXAGON_F2_conv_uw2sf
    283142U,	// HEXAGON_F2_conv_w2df
    287238U,	// HEXAGON_F2_conv_w2sf
    684550U,	// HEXAGON_F2_dfadd
    688646U,	// HEXAGON_F2_dfclass
    315910U,	// HEXAGON_F2_dfcmpeq
    324102U,	// HEXAGON_F2_dfcmpge
    332294U,	// HEXAGON_F2_dfcmpgt
    692742U,	// HEXAGON_F2_dfcmpuo
    696838U,	// HEXAGON_F2_dffixupd
    700934U,	// HEXAGON_F2_dffixupn
    705030U,	// HEXAGON_F2_dffixupr
    336390U,	// HEXAGON_F2_dffma
    336390U,	// HEXAGON_F2_dffma_lib
    50668038U,	// HEXAGON_F2_dffma_sc
    48943622U,	// HEXAGON_F2_dffms
    67817990U,	// HEXAGON_F2_dffms_lib
    69919238U,	// HEXAGON_F2_dfimm_n
    72016390U,	// HEXAGON_F2_dfimm_p
    344582U,	// HEXAGON_F2_dfmax
    352774U,	// HEXAGON_F2_dfmin
    717318U,	// HEXAGON_F2_dfmpy
    721414U,	// HEXAGON_F2_dfsub
    725510U,	// HEXAGON_F2_sfadd
    729606U,	// HEXAGON_F2_sfclass
    311814U,	// HEXAGON_F2_sfcmpeq
    320006U,	// HEXAGON_F2_sfcmpge
    328198U,	// HEXAGON_F2_sfcmpgt
    733702U,	// HEXAGON_F2_sfcmpuo
    737798U,	// HEXAGON_F2_sffixupd
    741894U,	// HEXAGON_F2_sffixupn
    745990U,	// HEXAGON_F2_sffixupr
    340486U,	// HEXAGON_F2_sffma
    340486U,	// HEXAGON_F2_sffma_lib
    50672134U,	// HEXAGON_F2_sffma_sc
    48984582U,	// HEXAGON_F2_sffms
    67858950U,	// HEXAGON_F2_sffms_lib
    69960198U,	// HEXAGON_F2_sfimm_n
    72057350U,	// HEXAGON_F2_sfimm_p
    348678U,	// HEXAGON_F2_sfmax
    356870U,	// HEXAGON_F2_sfmin
    758278U,	// HEXAGON_F2_sfmpy
    762374U,	// HEXAGON_F2_sfsub
    1891652102U,	// HEXAGON_M2_acci
    2963296774U,	// HEXAGON_M2_accii
    766470U,	// HEXAGON_M2_cmaci_s0
    770566U,	// HEXAGON_M2_cmacr_s0
    53203462U,	// HEXAGON_M2_cmacs_s0
    74174982U,	// HEXAGON_M2_cmacs_s1
    76272134U,	// HEXAGON_M2_cmacsc_s0
    78369286U,	// HEXAGON_M2_cmacsc_s1
    778758U,	// HEXAGON_M2_cmpyi_s0
    782854U,	// HEXAGON_M2_cmpyr_s0
    65798662U,	// HEXAGON_M2_cmpyrs_s0
    80478726U,	// HEXAGON_M2_cmpyrs_s1
    82575878U,	// HEXAGON_M2_cmpyrsc_s0
    84673030U,	// HEXAGON_M2_cmpyrsc_s1
    53215750U,	// HEXAGON_M2_cmpys_s0
    74187270U,	// HEXAGON_M2_cmpys_s1
    76284422U,	// HEXAGON_M2_cmpysc_s0
    78381574U,	// HEXAGON_M2_cmpysc_s1
    53219846U,	// HEXAGON_M2_cnacs_s0
    74191366U,	// HEXAGON_M2_cnacs_s1
    76288518U,	// HEXAGON_M2_cnacsc_s0
    78385670U,	// HEXAGON_M2_cnacsc_s1
    1892426246U,	// HEXAGON_M2_dpmpyss_acc_s0
    1892430342U,	// HEXAGON_M2_dpmpyss_nac_s0
    2160869894U,	// HEXAGON_M2_dpmpyss_rnd_s0
    2160869894U,	// HEXAGON_M2_dpmpyss_s0
    1892438534U,	// HEXAGON_M2_dpmpyuu_acc_s0
    1892442630U,	// HEXAGON_M2_dpmpyuu_nac_s0
    2160882182U,	// HEXAGON_M2_dpmpyuu_s0
    2160869894U,	// HEXAGON_M2_hmmpyh_rs1
    2160869894U,	// HEXAGON_M2_hmmpyl_rs1
    1892450822U,	// HEXAGON_M2_maci
    86807046U,	// HEXAGON_M2_macsin
    2964095494U,	// HEXAGON_M2_macsip
    65839622U,	// HEXAGON_M2_mmachs_rs0
    80519686U,	// HEXAGON_M2_mmachs_rs1
    53256710U,	// HEXAGON_M2_mmachs_s0
    74228230U,	// HEXAGON_M2_mmachs_s1
    65843718U,	// HEXAGON_M2_mmacls_rs0
    80523782U,	// HEXAGON_M2_mmacls_rs1
    53260806U,	// HEXAGON_M2_mmacls_s0
    74232326U,	// HEXAGON_M2_mmacls_s1
    65847814U,	// HEXAGON_M2_mmacuhs_rs0
    80527878U,	// HEXAGON_M2_mmacuhs_rs1
    53264902U,	// HEXAGON_M2_mmacuhs_s0
    74236422U,	// HEXAGON_M2_mmacuhs_s1
    65851910U,	// HEXAGON_M2_mmaculs_rs0
    80531974U,	// HEXAGON_M2_mmaculs_rs1
    53268998U,	// HEXAGON_M2_mmaculs_s0
    74240518U,	// HEXAGON_M2_mmaculs_s1
    65856006U,	// HEXAGON_M2_mmpyh_rs0
    80536070U,	// HEXAGON_M2_mmpyh_rs1
    53273094U,	// HEXAGON_M2_mmpyh_s0
    74244614U,	// HEXAGON_M2_mmpyh_s1
    65860102U,	// HEXAGON_M2_mmpyl_rs0
    80540166U,	// HEXAGON_M2_mmpyl_rs1
    53277190U,	// HEXAGON_M2_mmpyl_s0
    74248710U,	// HEXAGON_M2_mmpyl_s1
    65864198U,	// HEXAGON_M2_mmpyuh_rs0
    80544262U,	// HEXAGON_M2_mmpyuh_rs1
    53281286U,	// HEXAGON_M2_mmpyuh_s0
    74252806U,	// HEXAGON_M2_mmpyuh_s1
    65868294U,	// HEXAGON_M2_mmpyul_rs0
    80548358U,	// HEXAGON_M2_mmpyul_rs1
    53285382U,	// HEXAGON_M2_mmpyul_s0
    74256902U,	// HEXAGON_M2_mmpyul_s1
    1934369286U,	// HEXAGON_M2_mpy_acc_hh_s0
    1934369286U,	// HEXAGON_M2_mpy_acc_hh_s1
    1934369286U,	// HEXAGON_M2_mpy_acc_hl_s0
    1934369286U,	// HEXAGON_M2_mpy_acc_hl_s1
    1936466438U,	// HEXAGON_M2_mpy_acc_lh_s0
    1936466438U,	// HEXAGON_M2_mpy_acc_lh_s1
    1936466438U,	// HEXAGON_M2_mpy_acc_ll_s0
    1936466438U,	// HEXAGON_M2_mpy_acc_ll_s1
    1934369286U,	// HEXAGON_M2_mpy_acc_sat_hh_s0
    1934369286U,	// HEXAGON_M2_mpy_acc_sat_hh_s1
    1934369286U,	// HEXAGON_M2_mpy_acc_sat_hl_s0
    1934369286U,	// HEXAGON_M2_mpy_acc_sat_hl_s1
    1936466438U,	// HEXAGON_M2_mpy_acc_sat_lh_s0
    1936466438U,	// HEXAGON_M2_mpy_acc_sat_lh_s1
    1936466438U,	// HEXAGON_M2_mpy_acc_sat_ll_s0
    1936466438U,	// HEXAGON_M2_mpy_acc_sat_ll_s1
    2202812934U,	// HEXAGON_M2_mpy_hh_s0
    2202812934U,	// HEXAGON_M2_mpy_hh_s1
    2202812934U,	// HEXAGON_M2_mpy_hl_s0
    2202812934U,	// HEXAGON_M2_mpy_hl_s1
    2204910086U,	// HEXAGON_M2_mpy_lh_s0
    2204910086U,	// HEXAGON_M2_mpy_lh_s1
    2204910086U,	// HEXAGON_M2_mpy_ll_s0
    2204910086U,	// HEXAGON_M2_mpy_ll_s1
    1934373382U,	// HEXAGON_M2_mpy_nac_hh_s0
    1934373382U,	// HEXAGON_M2_mpy_nac_hh_s1
    1934373382U,	// HEXAGON_M2_mpy_nac_hl_s0
    1934373382U,	// HEXAGON_M2_mpy_nac_hl_s1
    1936470534U,	// HEXAGON_M2_mpy_nac_lh_s0
    1936470534U,	// HEXAGON_M2_mpy_nac_lh_s1
    1936470534U,	// HEXAGON_M2_mpy_nac_ll_s0
    1936470534U,	// HEXAGON_M2_mpy_nac_ll_s1
    1934373382U,	// HEXAGON_M2_mpy_nac_sat_hh_s0
    1934373382U,	// HEXAGON_M2_mpy_nac_sat_hh_s1
    1934373382U,	// HEXAGON_M2_mpy_nac_sat_hl_s0
    1934373382U,	// HEXAGON_M2_mpy_nac_sat_hl_s1
    1936470534U,	// HEXAGON_M2_mpy_nac_sat_lh_s0
    1936470534U,	// HEXAGON_M2_mpy_nac_sat_lh_s1
    1936470534U,	// HEXAGON_M2_mpy_nac_sat_ll_s0
    1936470534U,	// HEXAGON_M2_mpy_nac_sat_ll_s1
    2202812934U,	// HEXAGON_M2_mpy_rnd_hh_s0
    2202812934U,	// HEXAGON_M2_mpy_rnd_hh_s1
    2202812934U,	// HEXAGON_M2_mpy_rnd_hl_s0
    2202812934U,	// HEXAGON_M2_mpy_rnd_hl_s1
    2204910086U,	// HEXAGON_M2_mpy_rnd_lh_s0
    2204910086U,	// HEXAGON_M2_mpy_rnd_lh_s1
    2204910086U,	// HEXAGON_M2_mpy_rnd_ll_s0
    2204910086U,	// HEXAGON_M2_mpy_rnd_ll_s1
    2202812934U,	// HEXAGON_M2_mpy_sat_hh_s0
    2202812934U,	// HEXAGON_M2_mpy_sat_hh_s1
    2202812934U,	// HEXAGON_M2_mpy_sat_hl_s0
    2202812934U,	// HEXAGON_M2_mpy_sat_hl_s1
    2204910086U,	// HEXAGON_M2_mpy_sat_lh_s0
    2204910086U,	// HEXAGON_M2_mpy_sat_lh_s1
    2204910086U,	// HEXAGON_M2_mpy_sat_ll_s0
    2204910086U,	// HEXAGON_M2_mpy_sat_ll_s1
    2202812934U,	// HEXAGON_M2_mpy_sat_rnd_hh_s0
    2202812934U,	// HEXAGON_M2_mpy_sat_rnd_hh_s1
    2202812934U,	// HEXAGON_M2_mpy_sat_rnd_hl_s0
    2202812934U,	// HEXAGON_M2_mpy_sat_rnd_hl_s1
    2204910086U,	// HEXAGON_M2_mpy_sat_rnd_lh_s0
    2204910086U,	// HEXAGON_M2_mpy_sat_rnd_lh_s1
    2204910086U,	// HEXAGON_M2_mpy_sat_rnd_ll_s0
    2204910086U,	// HEXAGON_M2_mpy_sat_rnd_ll_s1
    2160869894U,	// HEXAGON_M2_mpy_up
    1934369286U,	// HEXAGON_M2_mpyd_acc_hh_s0
    1934369286U,	// HEXAGON_M2_mpyd_acc_hh_s1
    1934369286U,	// HEXAGON_M2_mpyd_acc_hl_s0
    1934369286U,	// HEXAGON_M2_mpyd_acc_hl_s1
    1936466438U,	// HEXAGON_M2_mpyd_acc_lh_s0
    1936466438U,	// HEXAGON_M2_mpyd_acc_lh_s1
    1936466438U,	// HEXAGON_M2_mpyd_acc_ll_s0
    1936466438U,	// HEXAGON_M2_mpyd_acc_ll_s1
    2202812934U,	// HEXAGON_M2_mpyd_hh_s0
    2202812934U,	// HEXAGON_M2_mpyd_hh_s1
    2202812934U,	// HEXAGON_M2_mpyd_hl_s0
    2202812934U,	// HEXAGON_M2_mpyd_hl_s1
    2204910086U,	// HEXAGON_M2_mpyd_lh_s0
    2204910086U,	// HEXAGON_M2_mpyd_lh_s1
    2204910086U,	// HEXAGON_M2_mpyd_ll_s0
    2204910086U,	// HEXAGON_M2_mpyd_ll_s1
    1934373382U,	// HEXAGON_M2_mpyd_nac_hh_s0
    1934373382U,	// HEXAGON_M2_mpyd_nac_hh_s1
    1934373382U,	// HEXAGON_M2_mpyd_nac_hl_s0
    1934373382U,	// HEXAGON_M2_mpyd_nac_hl_s1
    1936470534U,	// HEXAGON_M2_mpyd_nac_lh_s0
    1936470534U,	// HEXAGON_M2_mpyd_nac_lh_s1
    1936470534U,	// HEXAGON_M2_mpyd_nac_ll_s0
    1936470534U,	// HEXAGON_M2_mpyd_nac_ll_s1
    2202812934U,	// HEXAGON_M2_mpyd_rnd_hh_s0
    2202812934U,	// HEXAGON_M2_mpyd_rnd_hh_s1
    2202812934U,	// HEXAGON_M2_mpyd_rnd_hl_s0
    2202812934U,	// HEXAGON_M2_mpyd_rnd_hl_s1
    2204910086U,	// HEXAGON_M2_mpyd_rnd_lh_s0
    2204910086U,	// HEXAGON_M2_mpyd_rnd_lh_s1
    2204910086U,	// HEXAGON_M2_mpyd_rnd_ll_s0
    2204910086U,	// HEXAGON_M2_mpyd_rnd_ll_s1
    2160927238U,	// HEXAGON_M2_mpyi
    1934381574U,	// HEXAGON_M2_mpyu_acc_hh_s0
    1934381574U,	// HEXAGON_M2_mpyu_acc_hh_s1
    1934381574U,	// HEXAGON_M2_mpyu_acc_hl_s0
    1934381574U,	// HEXAGON_M2_mpyu_acc_hl_s1
    1936478726U,	// HEXAGON_M2_mpyu_acc_lh_s0
    1936478726U,	// HEXAGON_M2_mpyu_acc_lh_s1
    1936478726U,	// HEXAGON_M2_mpyu_acc_ll_s0
    1936478726U,	// HEXAGON_M2_mpyu_acc_ll_s1
    2202825222U,	// HEXAGON_M2_mpyu_hh_s0
    2202825222U,	// HEXAGON_M2_mpyu_hh_s1
    2202825222U,	// HEXAGON_M2_mpyu_hl_s0
    2202825222U,	// HEXAGON_M2_mpyu_hl_s1
    2204922374U,	// HEXAGON_M2_mpyu_lh_s0
    2204922374U,	// HEXAGON_M2_mpyu_lh_s1
    2204922374U,	// HEXAGON_M2_mpyu_ll_s0
    2204922374U,	// HEXAGON_M2_mpyu_ll_s1
    1934385670U,	// HEXAGON_M2_mpyu_nac_hh_s0
    1934385670U,	// HEXAGON_M2_mpyu_nac_hh_s1
    1934385670U,	// HEXAGON_M2_mpyu_nac_hl_s0
    1934385670U,	// HEXAGON_M2_mpyu_nac_hl_s1
    1936482822U,	// HEXAGON_M2_mpyu_nac_lh_s0
    1936482822U,	// HEXAGON_M2_mpyu_nac_lh_s1
    1936482822U,	// HEXAGON_M2_mpyu_nac_ll_s0
    1936482822U,	// HEXAGON_M2_mpyu_nac_ll_s1
    2160882182U,	// HEXAGON_M2_mpyu_up
    1934381574U,	// HEXAGON_M2_mpyud_acc_hh_s0
    1934381574U,	// HEXAGON_M2_mpyud_acc_hh_s1
    1934381574U,	// HEXAGON_M2_mpyud_acc_hl_s0
    1934381574U,	// HEXAGON_M2_mpyud_acc_hl_s1
    1936478726U,	// HEXAGON_M2_mpyud_acc_lh_s0
    1936478726U,	// HEXAGON_M2_mpyud_acc_lh_s1
    1936478726U,	// HEXAGON_M2_mpyud_acc_ll_s0
    1936478726U,	// HEXAGON_M2_mpyud_acc_ll_s1
    2202825222U,	// HEXAGON_M2_mpyud_hh_s0
    2202825222U,	// HEXAGON_M2_mpyud_hh_s1
    2202825222U,	// HEXAGON_M2_mpyud_hl_s0
    2202825222U,	// HEXAGON_M2_mpyud_hl_s1
    2204922374U,	// HEXAGON_M2_mpyud_lh_s0
    2204922374U,	// HEXAGON_M2_mpyud_lh_s1
    2204922374U,	// HEXAGON_M2_mpyud_ll_s0
    2204922374U,	// HEXAGON_M2_mpyud_ll_s1
    1934385670U,	// HEXAGON_M2_mpyud_nac_hh_s0
    1934385670U,	// HEXAGON_M2_mpyud_nac_hh_s1
    1934385670U,	// HEXAGON_M2_mpyud_nac_hl_s0
    1934385670U,	// HEXAGON_M2_mpyud_nac_hl_s1
    1936482822U,	// HEXAGON_M2_mpyud_nac_lh_s0
    1936482822U,	// HEXAGON_M2_mpyud_nac_lh_s1
    1936482822U,	// HEXAGON_M2_mpyud_nac_ll_s0
    1936482822U,	// HEXAGON_M2_mpyud_nac_ll_s1
    864774U,	// HEXAGON_M2_mpyui
    1892499974U,	// HEXAGON_M2_nacci
    2964144646U,	// HEXAGON_M2_naccii
    872966U,	// HEXAGON_M2_subacc
    877062U,	// HEXAGON_M2_vabsdiffh
    881158U,	// HEXAGON_M2_vabsdiffw
    885254U,	// HEXAGON_M2_vcmac_s0_sat_i
    889350U,	// HEXAGON_M2_vcmac_s0_sat_r
    53322246U,	// HEXAGON_M2_vcmpy_s0_sat_i
    53326342U,	// HEXAGON_M2_vcmpy_s0_sat_r
    74293766U,	// HEXAGON_M2_vcmpy_s1_sat_i
    74297862U,	// HEXAGON_M2_vcmpy_s1_sat_r
    53330438U,	// HEXAGON_M2_vdmacs_s0
    74301958U,	// HEXAGON_M2_vdmacs_s1
    65917446U,	// HEXAGON_M2_vdmpyrs_s0
    80597510U,	// HEXAGON_M2_vdmpyrs_s1
    53334534U,	// HEXAGON_M2_vdmpys_s0
    74306054U,	// HEXAGON_M2_vdmpys_s1
    49144326U,	// HEXAGON_M2_vmac2
    49148422U,	// HEXAGON_M2_vmac2es
    53342726U,	// HEXAGON_M2_vmac2es_s0
    74314246U,	// HEXAGON_M2_vmac2es_s1
    53338630U,	// HEXAGON_M2_vmac2s_s0
    74310150U,	// HEXAGON_M2_vmac2s_s1
    53346822U,	// HEXAGON_M2_vmpy2es_s0
    74318342U,	// HEXAGON_M2_vmpy2es_s1
    53350918U,	// HEXAGON_M2_vmpy2s_s0
    65933830U,	// HEXAGON_M2_vmpy2s_s0pack
    74322438U,	// HEXAGON_M2_vmpy2s_s1
    80613894U,	// HEXAGON_M2_vmpy2s_s1pack
    49160710U,	// HEXAGON_M2_vrcmaci_s0
    89006598U,	// HEXAGON_M2_vrcmaci_s0c
    49164806U,	// HEXAGON_M2_vrcmacr_s0
    89010694U,	// HEXAGON_M2_vrcmacr_s0c
    49168902U,	// HEXAGON_M2_vrcmpyi_s0
    89014790U,	// HEXAGON_M2_vrcmpyi_s0c
    49172998U,	// HEXAGON_M2_vrcmpyr_s0
    89018886U,	// HEXAGON_M2_vrcmpyr_s0c
    942598U,	// HEXAGON_M2_vrmac_s0
    946694U,	// HEXAGON_M2_vrmpy_s0
    950790U,	// HEXAGON_M2_xor_xacc
    1891672582U,	// HEXAGON_M4_and_and
    1897964038U,	// HEXAGON_M4_and_andn
    45574U,	// HEXAGON_M4_and_or
    49670U,	// HEXAGON_M4_and_xor
    1892585990U,	// HEXAGON_M4_or_and
    1898877446U,	// HEXAGON_M4_or_andn
    1892590086U,	// HEXAGON_M4_or_or
    963078U,	// HEXAGON_M4_or_xor
    1892598278U,	// HEXAGON_M4_xor_and
    1898889734U,	// HEXAGON_M4_xor_andn
    971270U,	// HEXAGON_M4_xor_or
    975366U,	// HEXAGON_M5_vdmacbsu
    979462U,	// HEXAGON_M5_vdmpybsu
    983558U,	// HEXAGON_M5_vmacbsu
    987654U,	// HEXAGON_M5_vmacbuu
    991750U,	// HEXAGON_M5_vmpybsu
    995846U,	// HEXAGON_M5_vmpybuu
    999942U,	// HEXAGON_M5_vrmacbsu
    1004038U,	// HEXAGON_M5_vrmacbuu
    1008134U,	// HEXAGON_M5_vrmpybsu
    1012230U,	// HEXAGON_M5_vrmpybuu
    12806U,	// HEXAGON_S2_addasl_rrri
    2694902278U,	// HEXAGON_S2_asl_i_p
    2963345926U,	// HEXAGON_S2_asl_i_p_acc
    2963350022U,	// HEXAGON_S2_asl_i_p_and
    2963358214U,	// HEXAGON_S2_asl_i_p_nac
    2963354118U,	// HEXAGON_S2_asl_i_p_or
    2963362310U,	// HEXAGON_S2_asl_i_p_xacc
    2694902278U,	// HEXAGON_S2_asl_i_r
    2963345926U,	// HEXAGON_S2_asl_i_r_acc
    2963350022U,	// HEXAGON_S2_asl_i_r_and
    2963358214U,	// HEXAGON_S2_asl_i_r_nac
    2963354118U,	// HEXAGON_S2_asl_i_r_or
    2160128518U,	// HEXAGON_S2_asl_i_r_sat
    2963362310U,	// HEXAGON_S2_asl_i_r_xacc
    1016326U,	// HEXAGON_S2_asl_i_vh
    1020422U,	// HEXAGON_S2_asl_i_vw
    2160128518U,	// HEXAGON_S2_asl_r_p
    1891701254U,	// HEXAGON_S2_asl_r_p_acc
    1891705350U,	// HEXAGON_S2_asl_r_p_and
    1891713542U,	// HEXAGON_S2_asl_r_p_nac
    1891709446U,	// HEXAGON_S2_asl_r_p_or
    2160128518U,	// HEXAGON_S2_asl_r_r
    1891701254U,	// HEXAGON_S2_asl_r_r_acc
    1891705350U,	// HEXAGON_S2_asl_r_r_and
    1891713542U,	// HEXAGON_S2_asl_r_r_nac
    1891709446U,	// HEXAGON_S2_asl_r_r_or
    2160128518U,	// HEXAGON_S2_asl_r_r_sat
    1016326U,	// HEXAGON_S2_asl_r_vh
    1020422U,	// HEXAGON_S2_asl_r_vw
    2694951430U,	// HEXAGON_S2_asr_i_p
    2963370502U,	// HEXAGON_S2_asr_i_p_acc
    2963374598U,	// HEXAGON_S2_asr_i_p_and
    2963382790U,	// HEXAGON_S2_asr_i_p_nac
    2963378694U,	// HEXAGON_S2_asr_i_p_or
    2694951430U,	// HEXAGON_S2_asr_i_p_rnd
    1024518U,	// HEXAGON_S2_asr_i_p_rnd_goodsyntax
    2694951430U,	// HEXAGON_S2_asr_i_r
    2963370502U,	// HEXAGON_S2_asr_i_r_acc
    2963374598U,	// HEXAGON_S2_asr_i_r_and
    2963382790U,	// HEXAGON_S2_asr_i_r_nac
    2963378694U,	// HEXAGON_S2_asr_i_r_or
    2694951430U,	// HEXAGON_S2_asr_i_r_rnd
    1024518U,	// HEXAGON_S2_asr_i_r_rnd_goodsyntax
    2695868934U,	// HEXAGON_S2_asr_i_svw_trun
    2161099270U,	// HEXAGON_S2_asr_i_vh
    2161095174U,	// HEXAGON_S2_asr_i_vw
    2160177670U,	// HEXAGON_S2_asr_r_p
    1891725830U,	// HEXAGON_S2_asr_r_p_acc
    1891729926U,	// HEXAGON_S2_asr_r_p_and
    1891738118U,	// HEXAGON_S2_asr_r_p_nac
    1891734022U,	// HEXAGON_S2_asr_r_p_or
    2160177670U,	// HEXAGON_S2_asr_r_r
    1891725830U,	// HEXAGON_S2_asr_r_r_acc
    1891729926U,	// HEXAGON_S2_asr_r_r_and
    1891738118U,	// HEXAGON_S2_asr_r_r_nac
    1891734022U,	// HEXAGON_S2_asr_r_r_or
    2160177670U,	// HEXAGON_S2_asr_r_r_sat
    2161095174U,	// HEXAGON_S2_asr_r_svw_trun
    2161099270U,	// HEXAGON_S2_asr_r_vh
    2161095174U,	// HEXAGON_S2_asr_r_vw
    291334U,	// HEXAGON_S2_cl0
    291334U,	// HEXAGON_S2_cl0p
    1036806U,	// HEXAGON_S2_cl1
    1036806U,	// HEXAGON_S2_cl1p
    1040902U,	// HEXAGON_S2_clb
    1044998U,	// HEXAGON_S2_clbnorm
    1040902U,	// HEXAGON_S2_clbp
    2694976006U,	// HEXAGON_S2_clrbit_i
    2160202246U,	// HEXAGON_S2_clrbit_r
    295430U,	// HEXAGON_S2_ct0
    1049094U,	// HEXAGON_S2_ct1
    2695893510U,	// HEXAGON_S2_extractu
    2161119750U,	// HEXAGON_S2_extractu_rp
    2695893510U,	// HEXAGON_S2_extractup
    2161119750U,	// HEXAGON_S2_extractup_rp
    1057286U,	// HEXAGON_S2_lsl_r_p
    1061382U,	// HEXAGON_S2_lsl_r_p_acc
    1065478U,	// HEXAGON_S2_lsl_r_p_and
    1069574U,	// HEXAGON_S2_lsl_r_p_nac
    1073670U,	// HEXAGON_S2_lsl_r_p_or
    1057286U,	// HEXAGON_S2_lsl_r_r
    1061382U,	// HEXAGON_S2_lsl_r_r_acc
    1065478U,	// HEXAGON_S2_lsl_r_r_and
    1069574U,	// HEXAGON_S2_lsl_r_r_nac
    1073670U,	// HEXAGON_S2_lsl_r_r_or
    1077766U,	// HEXAGON_S2_lsl_r_vh
    1081862U,	// HEXAGON_S2_lsl_r_vw
    2695926278U,	// HEXAGON_S2_lsr_i_p
    2964365830U,	// HEXAGON_S2_lsr_i_p_acc
    2964369926U,	// HEXAGON_S2_lsr_i_p_and
    2964374022U,	// HEXAGON_S2_lsr_i_p_nac
    2964378118U,	// HEXAGON_S2_lsr_i_p_or
    2964382214U,	// HEXAGON_S2_lsr_i_p_xacc
    2695926278U,	// HEXAGON_S2_lsr_i_r
    2964365830U,	// HEXAGON_S2_lsr_i_r_acc
    2964369926U,	// HEXAGON_S2_lsr_i_r_and
    2964374022U,	// HEXAGON_S2_lsr_i_r_nac
    2964378118U,	// HEXAGON_S2_lsr_i_r_or
    2964382214U,	// HEXAGON_S2_lsr_i_r_xacc
    1110534U,	// HEXAGON_S2_lsr_i_vh
    1114630U,	// HEXAGON_S2_lsr_i_vw
    2161152518U,	// HEXAGON_S2_lsr_r_p
    1892721158U,	// HEXAGON_S2_lsr_r_p_acc
    1892725254U,	// HEXAGON_S2_lsr_r_p_and
    1892729350U,	// HEXAGON_S2_lsr_r_p_nac
    1892733446U,	// HEXAGON_S2_lsr_r_p_or
    2161152518U,	// HEXAGON_S2_lsr_r_r
    1892721158U,	// HEXAGON_S2_lsr_r_r_acc
    1892725254U,	// HEXAGON_S2_lsr_r_r_and
    1892729350U,	// HEXAGON_S2_lsr_r_r_nac
    1892733446U,	// HEXAGON_S2_lsr_r_r_or
    1110534U,	// HEXAGON_S2_lsr_r_vh
    1114630U,	// HEXAGON_S2_lsr_r_vw
    1118726U,	// HEXAGON_S2_packhl
    1122822U,	// HEXAGON_S2_parityp
    2695967238U,	// HEXAGON_S2_setbit_i
    2161193478U,	// HEXAGON_S2_setbit_r
    1131014U,	// HEXAGON_S2_shuffeb
    1135110U,	// HEXAGON_S2_shuffeh
    1139206U,	// HEXAGON_S2_shuffob
    1143302U,	// HEXAGON_S2_shuffoh
    1147398U,	// HEXAGON_S2_svsathb
    1151494U,	// HEXAGON_S2_svsathub
    2695995910U,	// HEXAGON_S2_togglebit_i
    2161222150U,	// HEXAGON_S2_togglebit_r
    2696000006U,	// HEXAGON_S2_tstbit_i
    2161226246U,	// HEXAGON_S2_tstbit_r
    2964439558U,	// HEXAGON_S2_valignib
    1892794886U,	// HEXAGON_S2_valignrb
    1167878U,	// HEXAGON_S2_vcrotate
    49406470U,	// HEXAGON_S2_vrndpackwh
    53600774U,	// HEXAGON_S2_vrndpackwhs
    1147398U,	// HEXAGON_S2_vsathb
    1147398U,	// HEXAGON_S2_vsathb_nopack
    1151494U,	// HEXAGON_S2_vsathub
    1151494U,	// HEXAGON_S2_vsathub_nopack
    1176070U,	// HEXAGON_S2_vsatwh
    1176070U,	// HEXAGON_S2_vsatwh_nopack
    1180166U,	// HEXAGON_S2_vsatwuh
    1180166U,	// HEXAGON_S2_vsatwuh_nopack
    1184262U,	// HEXAGON_S2_vsplatrb
    1188358U,	// HEXAGON_S2_vsplatrh
    1192454U,	// HEXAGON_S2_vsxtbh
    1196550U,	// HEXAGON_S2_vsxthw
    1200646U,	// HEXAGON_S2_vtrunehb
    1204742U,	// HEXAGON_S2_vtrunewh
    1208838U,	// HEXAGON_S2_vtrunohb
    1212934U,	// HEXAGON_S2_vtrunowh
    1217030U,	// HEXAGON_S2_vzxtbh
    1221126U,	// HEXAGON_S2_vzxthw
    2964230662U,	// HEXAGON_S4_or_andi
    359002630U,	// HEXAGON_S4_or_andix
    2964234758U,	// HEXAGON_S4_or_ori
    66236934U,	// HEXAGON_S5_asrhub_rnd_sat_goodsyntax
    53654022U,	// HEXAGON_S5_asrhub_sat
    1229318U,	// HEXAGON_S5_popcountp
    2695873030U,	// HEXAGON_S5_vasrhrnd_goodsyntax
    51565574U,	// HEXAGON_circ_ldd
    43180550U,	// HI
    45277702U,	// HI_jt
    3222462982U,	// HI_label
    3222462982U,	// HIi
    518U,	// Hexagon_A2_addpsat
    518U,	// Hexagon_A2_addsp
    365062U,	// Hexagon_A2_maxp
    369158U,	// Hexagon_A2_maxup
    2166391302U,	// Hexagon_A4_andn
    37945862U,	// Hexagon_A4_combineir
    2695041542U,	// Hexagon_A4_combineri
    2166747654U,	// Hexagon_A4_orn
    2160206342U,	// Hexagon_A4_rcmpeq
    2694980102U,	// Hexagon_A4_rcmpeqi
    2160194054U,	// Hexagon_A4_rcmpneq
    2694967814U,	// Hexagon_A4_rcmpneqi
    2161308166U,	// Hexagon_C2_bitsclr
    2696081926U,	// Hexagon_C2_bitsclri
    1245702U,	// Hexagon_C2_bitsset
    90210822U,	// Hexagon_C4_and_and
    358646278U,	// Hexagon_C4_and_andn
    92307974U,	// Hexagon_C4_and_or
    360743430U,	// Hexagon_C4_and_orn
    2160185862U,	// Hexagon_C4_cmplte
    2694959622U,	// Hexagon_C4_cmpltei
    2160189958U,	// Hexagon_C4_cmplteu
    676358U,	// Hexagon_C4_fastcorner9
    680454U,	// Hexagon_C4_fastcorner9_not
    90567174U,	// Hexagon_C4_or_and
    359002630U,	// Hexagon_C4_or_andn
    92664326U,	// Hexagon_C4_or_or
    361099782U,	// Hexagon_C4_or_orn
    2695700998U,	// Hexagon_M2_mpysmi
    1249798U,	// Hexagon_M2_vradduh
    1253894U,	// Hexagon_M2_vrcmpys_acc_s1
    74658310U,	// Hexagon_M2_vrcmpys_s1
    80949766U,	// Hexagon_M2_vrcmpys_s1rp
    950790U,	// Hexagon_M4_xor_xacc
    1262086U,	// Hexagon_S2_brev
    1266182U,	// Hexagon_S2_deinterleave
    2964546054U,	// Hexagon_S2_insert
    1892901382U,	// Hexagon_S2_insert_rp
    2964546054U,	// Hexagon_S2_insertp
    1892901382U,	// Hexagon_S2_insertp_rp
    1274374U,	// Hexagon_S2_interleave
    1278470U,	// Hexagon_S2_lfsp
    1282566U,	// Hexagon_S2_tableidxb_goodsyntax
    1286662U,	// Hexagon_S2_tableidxd_goodsyntax
    1290758U,	// Hexagon_S2_tableidxh_goodsyntax
    1294854U,	// Hexagon_S2_tableidxw_goodsyntax
    2964574726U,	// Hexagon_S2_vspliceib
    1892930054U,	// Hexagon_S2_vsplicerb
    536871430U,	// Hexagon_S4_addaddi
    2166391302U,	// Hexagon_S4_andnp
    2166747654U,	// Hexagon_S4_ornp
    1342177798U,	// Hexagon_S4_subaddi
    25192U,	// IMMEXT_b
    25192U,	// IMMEXT_c
    26216U,	// IMMEXT_g
    26728U,	// IMMEXT_i
    131591U,	// JMP
    131604U,	// JMPR
    1303067U,	// JMPR_f
    1307163U,	// JMPR_fnew_ntV3
    1311259U,	// JMPR_fnew_tV3
    1303160U,	// JMPR_t
    1307256U,	// JMPR_tnew_ntV3
    1311352U,	// JMPR_tnew_tV3
    1315355U,	// JMP_f
    1319451U,	// JMP_fnew_nt
    1323547U,	// JMP_fnew_t
    1315448U,	// JMP_t
    1319544U,	// JMP_tnew_nt
    1323640U,	// JMP_tnew_t
    131604U,	// JMPret
    1303067U,	// JMPret_f
    1307163U,	// JMPret_fnew_ntV3
    1311259U,	// JMPret_fnew_tV3
    1303160U,	// JMPret_t
    1307256U,	// JMPret_tnew_ntV3
    1311352U,	// JMPret_tnew_tV3
    1327622U,	// LDb_GP_V4
    94376987U,	// LDb_GP_cNotPt_V4
    94377080U,	// LDb_GP_cPt_V4
    94381083U,	// LDb_GP_cdnNotPt_V4
    94381176U,	// LDb_GP_cdnPt_V4
    1331718U,	// LDd_GP_V4
    96474139U,	// LDd_GP_cNotPt_V4
    96474232U,	// LDd_GP_cPt_V4
    96478235U,	// LDd_GP_cdnNotPt_V4
    96478328U,	// LDd_GP_cdnPt_V4
    1335814U,	// LDh_GP_V4
    98571291U,	// LDh_GP_cNotPt_V4
    98571384U,	// LDh_GP_cPt_V4
    98575387U,	// LDh_GP_cdnNotPt_V4
    98575480U,	// LDh_GP_cdnPt_V4
    3323228678U,	// LDrib
    1344006U,	// LDrib_abs_V4
    94376987U,	// LDrib_abs_cNotPt_V4
    94377080U,	// LDrib_abs_cPt_V4
    94381083U,	// LDrib_abs_cdnNotPt_V4
    94381176U,	// LDrib_abs_cdnPt_V4
    538210822U,	// LDrib_abs_set_V4
    908071963U,	// LDrib_cNotPt
    908072056U,	// LDrib_cPt
    908076059U,	// LDrib_cdnNotPt
    908076152U,	// LDrib_cdnPt
    1075081734U,	// LDrib_ind_lo_V4
    1343517190U,	// LDrib_indexed
    2250249243U,	// LDrib_indexed_cNotPt
    2250249336U,	// LDrib_indexed_cPt
    2250253339U,	// LDrib_indexed_cdnNotPt
    2250253432U,	// LDrib_indexed_cdnPt
    1611952646U,	// LDrib_indexed_shl_V4
    2250249243U,	// LDrib_indexed_shl_cNotPt_V4
    2250249336U,	// LDrib_indexed_shl_cPt_V4
    2250253339U,	// LDrib_indexed_shl_cdnNotPt_V4
    2250253432U,	// LDrib_indexed_shl_cdnPt_V4
    3323122182U,	// LDrid
    1348102U,	// LDrid_abs_V4
    96474139U,	// LDrid_abs_cNotPt_V4
    96474232U,	// LDrid_abs_cPt_V4
    96478235U,	// LDrid_abs_cdnNotPt_V4
    96478328U,	// LDrid_abs_cdnPt_V4
    538104326U,	// LDrid_abs_set_V4
    910169115U,	// LDrid_cNotPt
    910169208U,	// LDrid_cPt
    910173211U,	// LDrid_cdnNotPt
    910173304U,	// LDrid_cdnPt
    3323122182U,	// LDrid_f
    1352198U,	// LDrid_ind_lo_V4
    1343410694U,	// LDrid_indexed
    2252346395U,	// LDrid_indexed_cNotPt
    2252346488U,	// LDrid_indexed_cPt
    2252350491U,	// LDrid_indexed_cdnNotPt
    2252350584U,	// LDrid_indexed_cdnPt
    1343410694U,	// LDrid_indexed_f
    1611846150U,	// LDrid_indexed_shl_V4
    2252346395U,	// LDrid_indexed_shl_cNotPt_V4
    2252346488U,	// LDrid_indexed_shl_cPt_V4
    2252350491U,	// LDrid_indexed_shl_cdnNotPt_V4
    2252350584U,	// LDrid_indexed_shl_cdnPt_V4
    3323245062U,	// LDrih
    1360390U,	// LDrih_abs_V4
    98571291U,	// LDrih_abs_cNotPt_V4
    98571384U,	// LDrih_abs_cPt_V4
    98575387U,	// LDrih_abs_cdnNotPt_V4
    98575480U,	// LDrih_abs_cdnPt_V4
    538227206U,	// LDrih_abs_set_V4
    912266267U,	// LDrih_cNotPt
    912266360U,	// LDrih_cPt
    912270363U,	// LDrih_cdnNotPt
    912270456U,	// LDrih_cdnPt
    1075098118U,	// LDrih_ind_lo_V4
    1343533574U,	// LDrih_indexed
    2254443547U,	// LDrih_indexed_cNotPt
    2254443640U,	// LDrih_indexed_cPt
    2254447643U,	// LDrih_indexed_cdnNotPt
    2254447736U,	// LDrih_indexed_cdnPt
    1611969030U,	// LDrih_indexed_shl_V4
    2254443547U,	// LDrih_indexed_shl_cNotPt_V4
    2254443640U,	// LDrih_indexed_shl_cPt_V4
    2254447643U,	// LDrih_indexed_shl_cdnNotPt_V4
    2254447736U,	// LDrih_indexed_shl_cdnPt_V4
    3323253254U,	// LDriub
    1368582U,	// LDriub_abs_V4
    109057051U,	// LDriub_abs_cNotPt_V4
    109057144U,	// LDriub_abs_cPt_V4
    109061147U,	// LDriub_abs_cdnNotPt_V4
    109061240U,	// LDriub_abs_cdnPt_V4
    538235398U,	// LDriub_abs_set_V4
    916460571U,	// LDriub_cNotPt
    916460664U,	// LDriub_cPt
    916464667U,	// LDriub_cdnNotPt
    916464760U,	// LDriub_cdnPt
    1075106310U,	// LDriub_ind_anyext_lo_V4
    1075106310U,	// LDriub_ind_lo_V4
    1343541766U,	// LDriub_indexed
    2258637851U,	// LDriub_indexed_cNotPt
    2258637944U,	// LDriub_indexed_cPt
    2258641947U,	// LDriub_indexed_cdnNotPt
    2258642040U,	// LDriub_indexed_cdnPt
    1611977222U,	// LDriub_indexed_shl_V4
    2258637851U,	// LDriub_indexed_shl_cNotPt_V4
    2258637944U,	// LDriub_indexed_shl_cPt_V4
    2258641947U,	// LDriub_indexed_shl_cdnNotPt_V4
    2258642040U,	// LDriub_indexed_shl_cdnPt_V4
    3323261446U,	// LDriuh
    1376774U,	// LDriuh_abs_V4
    113251355U,	// LDriuh_abs_cNotPt_V4
    113251448U,	// LDriuh_abs_cPt_V4
    113255451U,	// LDriuh_abs_cdnNotPt_V4
    113255544U,	// LDriuh_abs_cdnPt_V4
    538243590U,	// LDriuh_abs_set_V4
    920654875U,	// LDriuh_cNotPt
    920654968U,	// LDriuh_cPt
    920658971U,	// LDriuh_cdnNotPt
    920659064U,	// LDriuh_cdnPt
    1075114502U,	// LDriuh_ind_anyext_lo_V4
    1075114502U,	// LDriuh_ind_lo_V4
    1343549958U,	// LDriuh_indexed
    2262832155U,	// LDriuh_indexed_cNotPt
    2262832248U,	// LDriuh_indexed_cPt
    2262836251U,	// LDriuh_indexed_cdnNotPt
    2262836344U,	// LDriuh_indexed_cdnPt
    1611985414U,	// LDriuh_indexed_shl_V4
    2262832155U,	// LDriuh_indexed_shl_cNotPt_V4
    2262832248U,	// LDriuh_indexed_shl_cPt_V4
    2262836251U,	// LDriuh_indexed_shl_cdnNotPt_V4
    2262836344U,	// LDriuh_indexed_shl_cdnPt_V4
    3323269638U,	// LDriw
    1384966U,	// LDriw_abs_V4
    117445659U,	// LDriw_abs_cNotPt_V4
    117445752U,	// LDriw_abs_cPt_V4
    117449755U,	// LDriw_abs_cdnNotPt_V4
    117449848U,	// LDriw_abs_cdnPt_V4
    538251782U,	// LDriw_abs_set_V4
    924849179U,	// LDriw_cNotPt
    924849272U,	// LDriw_cPt
    924853275U,	// LDriw_cdnNotPt
    924853368U,	// LDriw_cdnPt
    3323269638U,	// LDriw_f
    1075122694U,	// LDriw_ind_lo_V4
    1343558150U,	// LDriw_indexed
    2267026459U,	// LDriw_indexed_cNotPt
    2267026552U,	// LDriw_indexed_cPt
    2267030555U,	// LDriw_indexed_cdnNotPt
    2267030648U,	// LDriw_indexed_cdnPt
    1343558150U,	// LDriw_indexed_f
    1611993606U,	// LDriw_indexed_shl_V4
    2267026459U,	// LDriw_indexed_shl_cNotPt_V4
    2267026552U,	// LDriw_indexed_shl_cPt_V4
    2267030555U,	// LDriw_indexed_shl_cdnNotPt_V4
    2267030648U,	// LDriw_indexed_shl_cdnPt_V4
    381U,	// LDriw_pred
    1389062U,	// LDub_GP_V4
    109057051U,	// LDub_GP_cNotPt_V4
    109057144U,	// LDub_GP_cPt_V4
    109061147U,	// LDub_GP_cdnNotPt_V4
    109061240U,	// LDub_GP_cdnPt_V4
    1393158U,	// LDuh_GP_V4
    113251355U,	// LDuh_GP_cNotPt_V4
    113251448U,	// LDuh_GP_cPt_V4
    113255451U,	// LDuh_GP_cdnNotPt_V4
    113255544U,	// LDuh_GP_cdnPt_V4
    1397254U,	// LDw_GP_V4
    117445659U,	// LDw_GP_cNotPt_V4
    117445752U,	// LDw_GP_cPt_V4
    117449755U,	// LDw_GP_cdnNotPt_V4
    117449848U,	// LDw_GP_cdnPt_V4
    43344390U,	// LO
    1405565U,	// LOOP0_i
    48403069U,	// LOOP0_r
    45441542U,	// LO_jt
    3222626822U,	// LO_label
    3222626822U,	// LOi
    1061382U,	// LSL_ADD_rr
    1061382U,	// LSL_ADDd_rr
    1065478U,	// LSL_AND_rr
    1065478U,	// LSL_ANDd_rr
    1073670U,	// LSL_OR_rr
    1073670U,	// LSL_ORd_rr
    1069574U,	// LSL_SUB_rr
    1069574U,	// LSL_SUBd_rr
    1057286U,	// LSL_rr
    1057286U,	// LSLd
    1409542U,	// LSLd_rr_xor_V4
    1413638U,	// LSLi_V4
    2964365830U,	// LSR_ADD_ri
    1892721158U,	// LSR_ADD_rr
    2964365830U,	// LSR_ADDd_ri
    1892721158U,	// LSR_ADDd_rr
    2964369926U,	// LSR_AND_ri
    1892725254U,	// LSR_AND_rr
    2964369926U,	// LSR_ANDd_ri
    1892725254U,	// LSR_ANDd_rr
    2964378118U,	// LSR_OR_ri
    1892733446U,	// LSR_OR_rr
    2964378118U,	// LSR_ORd_ri
    1892733446U,	// LSR_ORd_rr
    2964374022U,	// LSR_SUB_ri
    1892729350U,	// LSR_SUB_rr
    2964374022U,	// LSR_SUBd_ri
    1892729350U,	// LSR_SUBd_rr
    2964382214U,	// LSR_XOR_ri
    2964382214U,	// LSR_XORd_ri
    2695926278U,	// LSR_ri
    2161152518U,	// LSR_rr
    2695926278U,	// LSRd_ri
    2161152518U,	// LSRd_rr
    1892737542U,	// LSRd_rr_xor_V4
    659974U,	// MASK_p
    50700806U,	// MAXUd_rr
    50700806U,	// MAXUw_rr
    50696710U,	// MAXd_rr
    50696710U,	// MAXw_dd
    50696710U,	// MAXw_rr
    50708998U,	// MINUd_rr
    50708998U,	// MINUw_rr
    50704902U,	// MINd_rr
    50704902U,	// MINw_dd
    50704902U,	// MINw_rr
    2160869894U,	// MPY
    2160869894U,	// MPY64
    1892426246U,	// MPY64_acc
    1892430342U,	// MPY64_sub
    2160927238U,	// MPYI
    1621918214U,	// MPYI_acc_ri
    1892450822U,	// MPYI_acc_rr
    2427265542U,	// MPYI_ri
    1417734U,	// MPYI_rin
    1421830U,	// MPYI_riu
    122458630U,	// MPYI_sub_ri
    2160882182U,	// MPYU
    2160882182U,	// MPYU64
    1892438534U,	// MPYU64_acc
    1892442630U,	// MPYU64_sub
    2160869894U,	// MPY_trsext
    2427068934U,	// MUX_ii
    2427068934U,	// MUX_ir
    2160730630U,	// MUX_ri
    2160730630U,	// MUX_rr
    1916125828U,	// MemOPb_ADDi_V4
    2184561284U,	// MemOPb_ADDr_V4
    2452996740U,	// MemOPb_ANDr_V4
    2721432196U,	// MemOPb_CLRBITi_V4
    2989867652U,	// MemOPb_ORr_V4
    3258303108U,	// MemOPb_SETBITi_V4
    3526738564U,	// MemOPb_SUBi_V4
    3795174020U,	// MemOPb_SUBr_V4
    1916125844U,	// MemOPh_ADDi_V4
    2184561300U,	// MemOPh_ADDr_V4
    2452996756U,	// MemOPh_ANDr_V4
    2721432212U,	// MemOPh_CLRBITi_V4
    2989867668U,	// MemOPh_ORr_V4
    3258303124U,	// MemOPh_SETBITi_V4
    3526738580U,	// MemOPh_SUBi_V4
    3795174036U,	// MemOPh_SUBr_V4
    1916125952U,	// MemOPw_ADDi_V4
    2184561408U,	// MemOPw_ADDr_V4
    2452996864U,	// MemOPw_ANDr_V4
    2721432320U,	// MemOPw_CLRBITi_V4
    2989867776U,	// MemOPw_ORr_V4
    3258303232U,	// MemOPw_SETBITi_V4
    3526738688U,	// MemOPw_SUBi_V4
    3795174144U,	// MemOPw_SUBr_V4
    369U,	// NOP
    385542U,	// NOT_p
    385542U,	// NOT_rr64
    125161990U,	// NTSTBIT_ri
    3272987142U,	// NTSTBIT_rr
    2160456198U,	// OR_pp
    2426794502U,	// OR_ri
    2160456198U,	// OR_rr
    2160456198U,	// OR_rr64
    125834267U,	// OR_rr_cNotPt
    125834360U,	// OR_rr_cPt
    125838363U,	// OR_rr_cdnNotPt
    125838456U,	// OR_rr_cdnPt
    2166747654U,	// ORd_NOTd_V4
    5628422U,	// ORi_ASLri_V4
    7725574U,	// ORi_LSRri_V4
    1898877446U,	// ORr_ANDr_NOTr_V4
    1622053382U,	// ORr_ANDri2_V4
    359002630U,	// ORr_ANDri_V4
    1892585990U,	// ORr_ANDrr_V4
    1622057478U,	// ORr_ORri_V4
    1892590086U,	// ORr_ORrr_V4
    963078U,	// ORr_XORrr_V4
    51671558U,	// POST_LDrib
    1981815323U,	// POST_LDrib_cNotPt
    1981815416U,	// POST_LDrib_cPt
    1981819419U,	// POST_LDrib_cdnNotPt_V4
    1981819512U,	// POST_LDrib_cdnPt_V4
    51565062U,	// POST_LDrid
    1983912475U,	// POST_LDrid_cNotPt
    1983912568U,	// POST_LDrid_cPt
    1983916571U,	// POST_LDrid_cdnNotPt_V4
    1983916664U,	// POST_LDrid_cdnPt_V4
    51687942U,	// POST_LDrih
    1986009627U,	// POST_LDrih_cNotPt
    1986009720U,	// POST_LDrih_cPt
    1986013723U,	// POST_LDrih_cdnNotPt_V4
    1986013816U,	// POST_LDrih_cdnPt_V4
    51696134U,	// POST_LDriub
    1990203931U,	// POST_LDriub_cNotPt
    1990204024U,	// POST_LDriub_cPt
    1990208027U,	// POST_LDriub_cdnNotPt_V4
    1990208120U,	// POST_LDriub_cdnPt_V4
    51704326U,	// POST_LDriuh
    1994398235U,	// POST_LDriuh_cNotPt
    1994398328U,	// POST_LDriuh_cPt
    1994402331U,	// POST_LDriuh_cdnNotPt_V4
    1994402424U,	// POST_LDriuh_cdnPt_V4
    51712518U,	// POST_LDriw
    1998592539U,	// POST_LDriw_cNotPt
    1998592632U,	// POST_LDriw_cPt
    1998596635U,	// POST_LDriw_cdnNotPt_V4
    1998596728U,	// POST_LDriw_cdnPt_V4
    22410372U,	// POST_STbri
    51774491U,	// POST_STbri_cNotPt
    51774491U,	// POST_STbri_cNotPt_nv_V4
    51774584U,	// POST_STbri_cPt
    51774584U,	// POST_STbri_cPt_nv_V4
    51778587U,	// POST_STbri_cdnNotPt_V4
    51778587U,	// POST_STbri_cdnNotPt_nv_V4
    51778680U,	// POST_STbri_cdnPt_V4
    51778680U,	// POST_STbri_cdnPt_nv_V4
    129365124U,	// POST_STbri_nv_V4
    22410378U,	// POST_STdri
    51782683U,	// POST_STdri_cNotPt
    51782776U,	// POST_STdri_cPt
    51786779U,	// POST_STdri_cdnNotPt_V4
    51786872U,	// POST_STdri_cdnPt_V4
    22410388U,	// POST_SThri
    51790875U,	// POST_SThri_cNotPt
    51790875U,	// POST_SThri_cNotPt_nv_V4
    51790968U,	// POST_SThri_cPt
    51790968U,	// POST_SThri_cPt_nv_V4
    51794971U,	// POST_SThri_cdnNotPt_V4
    51794971U,	// POST_SThri_cdnNotPt_nv_V4
    51795064U,	// POST_SThri_cdnPt_V4
    51795064U,	// POST_SThri_cdnPt_nv_V4
    129365140U,	// POST_SThri_nv_V4
    22410496U,	// POST_STwri
    51799067U,	// POST_STwri_cNotPt
    51799067U,	// POST_STwri_cNotPt_nv_V4
    51799160U,	// POST_STwri_cPt
    51799160U,	// POST_STwri_cPt_nv_V4
    51803163U,	// POST_STwri_cdnNotPt_V4
    51803163U,	// POST_STwri_cdnNotPt_nv_V4
    51803256U,	// POST_STwri_cdnPt_V4
    51803256U,	// POST_STwri_cdnPt_nv_V4
    129365248U,	// POST_STwri_nv_V4
    131585U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4
    131591U,	// RESTORE_DEALLOC_RET_JMP_V4
    1475073U,	// SAVE_REGISTERS_CALL_V4
    2695967238U,	// SETBIT
    2695967238U,	// SETBIT_31
    90630U,	// SI_to_SXTHI_asrh
    22451782U,	// STb_GP_V4
    22454811U,	// STb_GP_cNotPt_V4
    129409563U,	// STb_GP_cNotPt_nv_V4
    22454904U,	// STb_GP_cPt_V4
    129409656U,	// STb_GP_cPt_nv_V4
    22458907U,	// STb_GP_cdnNotPt_V4
    129413659U,	// STb_GP_cdnNotPt_nv_V4
    22459000U,	// STb_GP_cdnPt_V4
    129413752U,	// STb_GP_cdnPt_nv_V4
    129407046U,	// STb_GP_nv_V4
    22451789U,	// STd_GP_V4
    1491483U,	// STd_GP_cNotPt_V4
    1491576U,	// STd_GP_cPt_V4
    1495579U,	// STd_GP_cdnNotPt_V4
    1495672U,	// STd_GP_cdnPt_V4
    22451809U,	// STh_GP_V4
    22471195U,	// STh_GP_cNotPt_V4
    129425947U,	// STh_GP_cNotPt_nv_V4
    22471288U,	// STh_GP_cPt_V4
    129426040U,	// STh_GP_cPt_nv_V4
    22475291U,	// STh_GP_cdnNotPt_V4
    129430043U,	// STh_GP_cdnNotPt_nv_V4
    22475384U,	// STh_GP_cdnPt_V4
    129430136U,	// STh_GP_cdnPt_nv_V4
    129407073U,	// STh_GP_nv_V4
    134276U,	// STrib
    22452262U,	// STrib_abs_V4
    22454811U,	// STrib_abs_cNotPt_V4
    129409563U,	// STrib_abs_cNotPt_nv_V4
    22454904U,	// STrib_abs_cPt_V4
    129409656U,	// STrib_abs_cPt_nv_V4
    22458907U,	// STrib_abs_cdnNotPt_V4
    129413659U,	// STrib_abs_cdnNotPt_nv_V4
    22459000U,	// STrib_abs_cdnPt_V4
    129413752U,	// STrib_abs_cdnPt_nv_V4
    129407014U,	// STrib_abs_nv_V4
    1507972U,	// STrib_abs_set_V4
    4128637467U,	// STrib_cNotPt
    4128637467U,	// STrib_cNotPt_nv_V4
    4128637560U,	// STrib_cPt
    4128637560U,	// STrib_cPt_nv_V4
    4128641563U,	// STrib_cdnNotPt_V4
    4128641563U,	// STrib_cdnNotPt_nv_V4
    4128641656U,	// STrib_cdnPt_V4
    4128641656U,	// STrib_cdnPt_nv_V4
    39174788U,	// STrib_imm_V4
    1343619611U,	// STrib_imm_cNotPt_V4
    1343619704U,	// STrib_imm_cPt_V4
    1343623707U,	// STrib_imm_cdnNotPt_V4
    1343623800U,	// STrib_imm_cdnPt_V4
    4063609476U,	// STrib_indexed
    1343619611U,	// STrib_indexed_cNotPt
    1343619611U,	// STrib_indexed_cNotPt_nv_V4
    1343619704U,	// STrib_indexed_cPt
    1343619704U,	// STrib_indexed_cPt_nv_V4
    1343623707U,	// STrib_indexed_cdnNotPt_V4
    1343623707U,	// STrib_indexed_cdnNotPt_nv_V4
    1343623800U,	// STrib_indexed_cdnPt_V4
    1343623800U,	// STrib_indexed_cdnPt_nv_V4
    4063609476U,	// STrib_indexed_nv_V4
    22483588U,	// STrib_indexed_shl_V4
    1612055067U,	// STrib_indexed_shl_cNotPt_V4
    1612055067U,	// STrib_indexed_shl_cNotPt_nv_V4
    1612055160U,	// STrib_indexed_shl_cPt_V4
    1612055160U,	// STrib_indexed_shl_cPt_nv_V4
    1612059163U,	// STrib_indexed_shl_cdnNotPt_V4
    1612059163U,	// STrib_indexed_shl_cdnNotPt_nv_V4
    1612059256U,	// STrib_indexed_shl_cdnPt_V4
    1612059256U,	// STrib_indexed_shl_cdnPt_nv_V4
    129438340U,	// STrib_indexed_shl_nv_V4
    1518724U,	// STrib_nv_V4
    22491780U,	// STrib_shl_V4
    129446532U,	// STrib_shl_nv_V4
    134282U,	// STrid
    22452270U,	// STrid_abs_V4
    1491483U,	// STrid_abs_cNotPt_V4
    1491576U,	// STrid_abs_cPt_V4
    1495579U,	// STrid_abs_cdnNotPt_V4
    1495672U,	// STrid_abs_cdnPt_V4
    1507978U,	// STrid_abs_set_V4
    4128645659U,	// STrid_cNotPt
    4128645752U,	// STrid_cPt
    4128649755U,	// STrid_cdnNotPt_V4
    4128649848U,	// STrid_cdnPt_V4
    134282U,	// STrid_f
    4063609482U,	// STrid_indexed
    1343627803U,	// STrid_indexed_cNotPt
    1343627896U,	// STrid_indexed_cPt
    1343631899U,	// STrid_indexed_cdnNotPt_V4
    1343631992U,	// STrid_indexed_cdnPt_V4
    4065706634U,	// STrid_indexed_f
    22483594U,	// STrid_indexed_shl_V4
    1612063259U,	// STrid_indexed_shl_cNotPt_V4
    1612063352U,	// STrid_indexed_shl_cPt_V4
    1612067355U,	// STrid_indexed_shl_cdnNotPt_V4
    1612067448U,	// STrid_indexed_shl_cdnPt_V4
    22491786U,	// STrid_shl_V4
    134292U,	// STrih
    22452278U,	// STrih_abs_V4
    22471195U,	// STrih_abs_cNotPt_V4
    129425947U,	// STrih_abs_cNotPt_nv_V4
    22471288U,	// STrih_abs_cPt_V4
    129426040U,	// STrih_abs_cPt_nv_V4
    22475291U,	// STrih_abs_cdnNotPt_V4
    129430043U,	// STrih_abs_cdnNotPt_nv_V4
    22475384U,	// STrih_abs_cdnPt_V4
    129430136U,	// STrih_abs_cdnPt_nv_V4
    129407030U,	// STrih_abs_nv_V4
    1507988U,	// STrih_abs_set_V4
    4128653851U,	// STrih_cNotPt
    4128653851U,	// STrih_cNotPt_nv_V4
    4128653944U,	// STrih_cPt
    4128653944U,	// STrih_cPt_nv_V4
    4128657947U,	// STrih_cdnNotPt_V4
    4128657947U,	// STrih_cdnNotPt_nv_V4
    4128658040U,	// STrih_cdnPt_V4
    4128658040U,	// STrih_cdnPt_nv_V4
    39174804U,	// STrih_imm_V4
    1343635995U,	// STrih_imm_cNotPt_V4
    1343636088U,	// STrih_imm_cPt_V4
    1343640091U,	// STrih_imm_cdnNotPt_V4
    1343640184U,	// STrih_imm_cdnPt_V4
    4063609492U,	// STrih_indexed
    1343635995U,	// STrih_indexed_cNotPt
    1343635995U,	// STrih_indexed_cNotPt_nv_V4
    1343636088U,	// STrih_indexed_cPt
    1343636088U,	// STrih_indexed_cPt_nv_V4
    1343640091U,	// STrih_indexed_cdnNotPt_V4
    1343640091U,	// STrih_indexed_cdnNotPt_nv_V4
    1343640184U,	// STrih_indexed_cdnPt_V4
    1343640184U,	// STrih_indexed_cdnPt_nv_V4
    4063609492U,	// STrih_indexed_nv_V4
    22483604U,	// STrih_indexed_shl_V4
    1612071451U,	// STrih_indexed_shl_cNotPt_V4
    1612071451U,	// STrih_indexed_shl_cNotPt_nv_V4
    1612071544U,	// STrih_indexed_shl_cPt_V4
    1612071544U,	// STrih_indexed_shl_cPt_nv_V4
    1612075547U,	// STrih_indexed_shl_cdnNotPt_V4
    1612075547U,	// STrih_indexed_shl_cdnNotPt_nv_V4
    1612075640U,	// STrih_indexed_shl_cdnPt_V4
    1612075640U,	// STrih_indexed_shl_cdnPt_nv_V4
    129438356U,	// STrih_indexed_shl_nv_V4
    1518740U,	// STrih_nv_V4
    307610260U,	// STrih_offset_ext_V4
    22491796U,	// STrih_shl_V4
    129446548U,	// STrih_shl_nv_V4
    134400U,	// STriw
    22452286U,	// STriw_abs_V4
    22495771U,	// STriw_abs_cNotPt_V4
    129450523U,	// STriw_abs_cNotPt_nv_V4
    22495864U,	// STriw_abs_cPt_V4
    129450616U,	// STriw_abs_cPt_nv_V4
    22499867U,	// STriw_abs_cdnNotPt_V4
    129454619U,	// STriw_abs_cdnNotPt_nv_V4
    22499960U,	// STriw_abs_cdnPt_V4
    129454712U,	// STriw_abs_cdnPt_nv_V4
    129407038U,	// STriw_abs_nv_V4
    1508096U,	// STriw_abs_set_V4
    4128662043U,	// STriw_cNotPt
    4128662043U,	// STriw_cNotPt_nv_V4
    4128662136U,	// STriw_cPt
    4128662136U,	// STriw_cPt_nv_V4
    4128666139U,	// STriw_cdnNotPt_V4
    4128666139U,	// STriw_cdnNotPt_nv_V4
    4128666232U,	// STriw_cdnPt_V4
    4128666232U,	// STriw_cdnPt_nv_V4
    134400U,	// STriw_f
    39174912U,	// STriw_imm_V4
    1343644187U,	// STriw_imm_cNotPt_V4
    1343644280U,	// STriw_imm_cPt_V4
    1343648283U,	// STriw_imm_cdnNotPt_V4
    1343648376U,	// STriw_imm_cdnPt_V4
    4063609600U,	// STriw_indexed
    1343644187U,	// STriw_indexed_cNotPt
    1343644187U,	// STriw_indexed_cNotPt_nv_V4
    1343644280U,	// STriw_indexed_cPt
    1343644280U,	// STriw_indexed_cPt_nv_V4
    1343648283U,	// STriw_indexed_cdnNotPt_V4
    1343648283U,	// STriw_indexed_cdnNotPt_nv_V4
    1343648376U,	// STriw_indexed_cdnPt_V4
    1343648376U,	// STriw_indexed_cdnPt_nv_V4
    4065706752U,	// STriw_indexed_f
    4063609600U,	// STriw_indexed_nv_V4
    22483712U,	// STriw_indexed_shl_V4
    1612079643U,	// STriw_indexed_shl_cNotPt_V4
    1612079643U,	// STriw_indexed_shl_cNotPt_nv_V4
    1612079736U,	// STriw_indexed_shl_cPt_V4
    1612079736U,	// STriw_indexed_shl_cPt_nv_V4
    1612083739U,	// STriw_indexed_shl_cdnNotPt_V4
    1612083739U,	// STriw_indexed_shl_cdnNotPt_nv_V4
    1612083832U,	// STriw_indexed_shl_cdnPt_V4
    1612083832U,	// STriw_indexed_shl_cdnPt_nv_V4
    129438464U,	// STriw_indexed_shl_nv_V4
    1518848U,	// STriw_nv_V4
    307610368U,	// STriw_offset_ext_V4
    381U,	// STriw_pred
    381U,	// STriw_pred_V4
    22491904U,	// STriw_shl_V4
    129446656U,	// STriw_shl_nv_V4
    22451825U,	// STw_GP_V4
    22495771U,	// STw_GP_cNotPt_V4
    129450523U,	// STw_GP_cNotPt_nv_V4
    22495864U,	// STw_GP_cPt_V4
    129450616U,	// STw_GP_cPt_nv_V4
    22499867U,	// STw_GP_cdnNotPt_V4
    129454619U,	// STw_GP_cdnNotPt_nv_V4
    22499960U,	// STw_GP_cdnPt_V4
    129454712U,	// STw_GP_cdnPt_nv_V4
    129407089U,	// STw_GP_nv_V4
    2160480774U,	// SUB64_rr
    36069894U,	// SUB_ri
    2160480774U,	// SUB_rr
    130028571U,	// SUB_rr_cNotPt
    130028664U,	// SUB_rr_cPt
    130032667U,	// SUB_rr_cdnNotPt
    130032760U,	// SUB_rr_cdnPt
    572940806U,	// SUBi_ASLri_V4
    841376262U,	// SUBi_LSRri_V4
    1621967366U,	// SUBri_acc
    1892499974U,	// SUBrr_acc
    451078U,	// SXTB
    132125723U,	// SXTB_cNotPt_V4
    132125816U,	// SXTB_cPt_V4
    132129819U,	// SXTB_cdnNotPt_V4
    132129912U,	// SXTB_cdnPt_V4
    455174U,	// SXTH
    134222875U,	// SXTH_cNotPt_V4
    134222968U,	// SXTH_cPt_V4
    134226971U,	// SXTH_cdnNotPt_V4
    134227064U,	// SXTH_cdnPt_V4
    459270U,	// SXTW
    131604U,	// TCRETURNR
    131591U,	// TCRETURNtext
    131591U,	// TCRETURNtg
    21029382U,	// TFCR
    21029382U,	// TFR
    21029382U,	// TFR64
    136320027U,	// TFR64_cNotPt
    136320120U,	// TFR64_cPt
    136324123U,	// TFR64_cdnNotPt
    136324216U,	// TFR64_cdnPt
    4062654982U,	// TFRI
    4064752134U,	// TFRI64
    4062654982U,	// TFRI_V4
    2554336283U,	// TFRI_cNotPt
    2554336289U,	// TFRI_cNotPt_V4
    140514331U,	// TFRI_cNotPt_f
    2554336376U,	// TFRI_cPt
    2554336400U,	// TFRI_cPt_V4
    2822771832U,	// TFRI_cPt_f
    2554340379U,	// TFRI_cdnNotPt
    2554340385U,	// TFRI_cdnNotPt_V4
    2554340472U,	// TFRI_cdnPt
    2554340496U,	// TFRI_cdnPt_V4
    4064752134U,	// TFRI_f
    142606854U,	// TFR_FI
    1073742342U,	// TFR_FI_immext_V4
    145318406U,	// TFR_PdFalse
    146858502U,	// TFR_PdRs
    146858502U,	// TFR_RsPd
    136320027U,	// TFR_cNotPt
    136320120U,	// TFR_cPt
    136324123U,	// TFR_cdnNotPt
    136324216U,	// TFR_cdnPt
    381U,	// TFR_condset_ii
    381U,	// TFR_condset_ii_f
    381U,	// TFR_condset_ir
    381U,	// TFR_condset_ir_f
    381U,	// TFR_condset_ri
    381U,	// TFR_condset_ri_f
    381U,	// TFR_condset_rr
    381U,	// TFR_condset_rr64_f
    381U,	// TFR_condset_rr_f
    2695967238U,	// TOGBIT
    2695995910U,	// TOGBIT_31
    1532620U,	// TSTBIT0_f_Jumpnv_nt_V4
    1536716U,	// TSTBIT0_f_Jumpnv_t_V4
    1532633U,	// TSTBIT0_t_Jumpnv_nt_V4
    1536729U,	// TSTBIT0_t_Jumpnv_t_V4
    2698097158U,	// TSTBIT_ri
    2161226246U,	// TSTBIT_rr
    2160206342U,	// V4_A4_rcmpeq
    2426544646U,	// V4_A4_rcmpeqi
    2160194054U,	// V4_A4_rcmpneq
    2426532358U,	// V4_A4_rcmpneqi
    1892794886U,	// VALIGN_rrp
    668166U,	// VITPACK_pp
    672262U,	// VMUX_prr64
    1892930054U,	// VSPLICE_rrp
    614918U,	// XOR_pp
    614918U,	// XOR_rr
    614918U,	// XOR_rr64
    148902939U,	// XOR_rr_cNotPt
    148903032U,	// XOR_rr_cPt
    148907035U,	// XOR_rr_cdnNotPt
    148907128U,	// XOR_rr_cdnPt
    950790U,	// XORd_XORdd
    1898889734U,	// XORr_ANDr_NOTr_V4
    1892598278U,	// XORr_ANDrr_V4
    971270U,	// XORr_ORrr_V4
    950790U,	// XORr_XORrr_V4
    619014U,	// ZXTB
    151000091U,	// ZXTB_cNotPt_V4
    151000184U,	// ZXTB_cPt_V4
    151004187U,	// ZXTB_cdnNotPt_V4
    151004280U,	// ZXTB_cdnPt_V4
    623110U,	// ZXTH
    153097243U,	// ZXTH_cNotPt_V4
    153097336U,	// ZXTH_cPt_V4
    153101339U,	// ZXTH_cdnNotPt_V4
    153101432U,	// ZXTH_cdnPt_V4
    684550U,	// fADD64_rr
    725510U,	// fADD_rr
    717318U,	// fMUL64_rr
    758278U,	// fMUL_rr
    721414U,	// fSUB64_rr
    762374U,	// fSUB_rr
    0U
  };

  static const uint32_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// A2_add
    4U,	// A2_paddf
    4U,	// A2_paddfnew
    4U,	// A2_paddt
    4U,	// A2_paddtnew
    0U,	// ADD64_rr
    0U,	// ADDASL
    8U,	// ADD_ri
    12U,	// ADD_ri_cNotPt
    12U,	// ADD_ri_cPt
    12U,	// ADD_ri_cdnNotPt
    12U,	// ADD_ri_cdnPt
    0U,	// ADD_rr
    4U,	// ADD_rr_cNotPt
    4U,	// ADD_rr_cPt
    4U,	// ADD_rr_cdnNotPt
    4U,	// ADD_rr_cdnPt
    0U,	// ADDi_ASLri_V4
    0U,	// ADDi_LSRri_V4
    272U,	// ADDi_MPYri_V4
    260U,	// ADDi_MPYrr_V4
    268U,	// ADDr_ADDri_V4
    0U,	// ADDr_MPYir_V4
    532U,	// ADDr_MPYri_V4
    280U,	// ADDr_MPYrr_V4
    4872U,	// ADDr_SUBri_V4
    4872U,	// ADDri_SUBr_V4
    0U,	// ADDri_acc
    28U,	// ADDrr_acc
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    32U,	// ADJDYNALLOC
    0U,	// ALLOCFRAME
    0U,	// ALL_pp
    0U,	// AND_pnotp
    28U,	// AND_pp
    28U,	// AND_ri
    28U,	// AND_rr
    28U,	// AND_rr64
    0U,	// AND_rr_cNotPt
    0U,	// AND_rr_cPt
    0U,	// AND_rr_cdnNotPt
    0U,	// AND_rr_cdnPt
    28U,	// ANDd_NOTd_V4
    0U,	// ANDi_ASLri_V4
    0U,	// ANDi_LSRri_V4
    28U,	// ANDr_ANDr_NOTr_V4
    28U,	// ANDr_ANDrr_V4
    0U,	// ANDr_ORrr_V4
    0U,	// ANDr_XORrr_V4
    0U,	// ANY_pp
    0U,	// ARGEXTEND
    28U,	// ASL
    0U,	// ASLH
    0U,	// ASLH_cNotPt_V4
    0U,	// ASLH_cPt_V4
    0U,	// ASLH_cdnNotPt_V4
    0U,	// ASLH_cdnPt_V4
    28U,	// ASL_ADD_ri
    28U,	// ASL_ADD_rr
    28U,	// ASL_ADDd_ri
    28U,	// ASL_ADDd_rr
    28U,	// ASL_AND_ri
    28U,	// ASL_AND_rr
    28U,	// ASL_ANDd_ri
    28U,	// ASL_ANDd_rr
    28U,	// ASL_OR_ri
    28U,	// ASL_OR_rr
    28U,	// ASL_ORd_ri
    28U,	// ASL_ORd_rr
    28U,	// ASL_SUB_ri
    28U,	// ASL_SUB_rr
    28U,	// ASL_SUBd_ri
    28U,	// ASL_SUBd_rr
    28U,	// ASL_XOR_ri
    28U,	// ASL_XORd_ri
    28U,	// ASL_rr
    28U,	// ASLd
    28U,	// ASLd_ri
    28U,	// ASLd_rr_xor_V4
    0U,	// ASRH
    0U,	// ASRH_cNotPt_V4
    0U,	// ASRH_cPt_V4
    0U,	// ASRH_cdnNotPt_V4
    0U,	// ASRH_cdnPt_V4
    28U,	// ASR_ADD_ri
    28U,	// ASR_ADD_rr
    28U,	// ASR_ADDd_ri
    28U,	// ASR_ADDd_rr
    28U,	// ASR_AND_ri
    28U,	// ASR_AND_rr
    28U,	// ASR_ANDd_ri
    28U,	// ASR_ANDd_rr
    28U,	// ASR_OR_ri
    28U,	// ASR_OR_rr
    28U,	// ASR_ORd_ri
    28U,	// ASR_ORd_rr
    28U,	// ASR_SUB_ri
    28U,	// ASR_SUB_rr
    28U,	// ASR_SUBd_ri
    28U,	// ASR_SUBd_rr
    28U,	// ASR_ri
    28U,	// ASR_rr
    28U,	// ASRd_ri
    28U,	// ASRd_rr
    0U,	// ASRd_rr_xor_V4
    0U,	// BARRIER
    28U,	// C4_cmpltei
    28U,	// C4_cmplteui
    28U,	// C4_cmpneqi
    0U,	// CALL
    0U,	// CALLR
    0U,	// CALLRv3
    0U,	// CALLv3
    28U,	// CLRBIT
    28U,	// CLRBIT_31
    28U,	// CMPEHexagon4rr
    0U,	// CMPEQn1_f_Jumpnv_nt_V4
    0U,	// CMPEQn1_f_Jumpnv_t_V4
    0U,	// CMPEQn1_t_Jumpnv_nt_V4
    0U,	// CMPEQn1_t_Jumpnv_t_V4
    28U,	// CMPEQri
    0U,	// CMPEQri_f_Jumpnv_nt_V4
    0U,	// CMPEQri_f_Jumpnv_t_V4
    0U,	// CMPEQri_t_Jumpnv_nt_V4
    0U,	// CMPEQri_t_Jumpnv_t_V4
    28U,	// CMPEQrr
    0U,	// CMPEQrr_f_Jumpnv_nt_V4
    0U,	// CMPEQrr_f_Jumpnv_t_V4
    0U,	// CMPEQrr_t_Jumpnv_nt_V4
    0U,	// CMPEQrr_t_Jumpnv_t_V4
    28U,	// CMPGT64rr
    28U,	// CMPGTU64rr
    28U,	// CMPGTUri
    0U,	// CMPGTUri_f_Jumpnv_nt_V4
    0U,	// CMPGTUri_f_Jumpnv_t_V4
    0U,	// CMPGTUri_t_Jumpnv_nt_V4
    0U,	// CMPGTUri_t_Jumpnv_t_V4
    28U,	// CMPGTUrr
    0U,	// CMPGTUrr_f_Jumpnv_nt_V4
    0U,	// CMPGTUrr_f_Jumpnv_t_V4
    0U,	// CMPGTUrr_t_Jumpnv_nt_V4
    0U,	// CMPGTUrr_t_Jumpnv_t_V4
    0U,	// CMPGTn1_f_Jumpnv_nt_V4
    0U,	// CMPGTn1_f_Jumpnv_t_V4
    0U,	// CMPGTn1_t_Jumpnv_nt_V4
    0U,	// CMPGTn1_t_Jumpnv_t_V4
    28U,	// CMPGTri
    0U,	// CMPGTri_f_Jumpnv_nt_V4
    0U,	// CMPGTri_f_Jumpnv_t_V4
    0U,	// CMPGTri_t_Jumpnv_nt_V4
    0U,	// CMPGTri_t_Jumpnv_t_V4
    28U,	// CMPGTrr
    0U,	// CMPGTrr_f_Jumpnv_nt_V4
    0U,	// CMPGTrr_f_Jumpnv_t_V4
    0U,	// CMPGTrr_t_Jumpnv_nt_V4
    0U,	// CMPGTrr_t_Jumpnv_t_V4
    0U,	// CMPLTUrr_f_Jumpnv_nt_V4
    0U,	// CMPLTUrr_f_Jumpnv_t_V4
    0U,	// CMPLTUrr_t_Jumpnv_nt_V4
    0U,	// CMPLTUrr_t_Jumpnv_t_V4
    0U,	// CMPLTrr_f_Jumpnv_nt_V4
    0U,	// CMPLTrr_f_Jumpnv_t_V4
    0U,	// CMPLTrr_t_Jumpnv_nt_V4
    0U,	// CMPLTrr_t_Jumpnv_t_V4
    28U,	// CMPbEQri_V4
    28U,	// CMPbEQrr_sbsb_V4
    28U,	// CMPbEQrr_ubub_V4
    28U,	// CMPbGTUri_V4
    28U,	// CMPbGTUrr_V4
    0U,	// CMPbGTrr_V4
    28U,	// CMPhEQri_V4
    28U,	// CMPhEQrr_shl_V4
    28U,	// CMPhEQrr_xor_V4
    28U,	// CMPhGTUri_V4
    28U,	// CMPhGTUrr_V4
    0U,	// CMPhGTrr_shl_V4
    28U,	// CMPnotEQ_rr
    28U,	// CMPnotGTU_rr
    28U,	// CMPnotGT_rr
    32U,	// COMBINE_Ii
    0U,	// COMBINE_Ir_V4
    8U,	// COMBINE_iI_V4
    32U,	// COMBINE_ii
    28U,	// COMBINE_rI_V4
    28U,	// COMBINE_rr
    0U,	// COMBINE_rr_cNotPt
    0U,	// COMBINE_rr_cPt
    0U,	// COMBINE_rr_cdnNotPt
    0U,	// COMBINE_rr_cdnPt
    0U,	// CONST32
    0U,	// CONST32GP_set
    0U,	// CONST32_Float_Real
    0U,	// CONST32_Int_Real
    0U,	// CONST32_Label
    0U,	// CONST32_set
    0U,	// CONST32_set_jt
    0U,	// CONST64_Float_Real
    0U,	// CONST64_Int_Real
    0U,	// CONVERT_d2df
    0U,	// CONVERT_d2sf
    0U,	// CONVERT_df2d
    0U,	// CONVERT_df2d_nchop
    0U,	// CONVERT_df2sf
    0U,	// CONVERT_df2ud
    0U,	// CONVERT_df2ud_nchop
    0U,	// CONVERT_df2uw
    0U,	// CONVERT_df2uw_nchop
    0U,	// CONVERT_df2w
    0U,	// CONVERT_df2w_nchop
    0U,	// CONVERT_sf2d
    0U,	// CONVERT_sf2d_nchop
    0U,	// CONVERT_sf2df
    0U,	// CONVERT_sf2ud
    0U,	// CONVERT_sf2ud_nchop
    0U,	// CONVERT_sf2uw
    0U,	// CONVERT_sf2uw_nchop
    0U,	// CONVERT_sf2w
    0U,	// CONVERT_sf2w_nchop
    0U,	// CONVERT_ud2df
    0U,	// CONVERT_ud2sf
    0U,	// CONVERT_uw2df
    0U,	// CONVERT_uw2sf
    0U,	// CONVERT_w2df
    0U,	// CONVERT_w2sf
    0U,	// CTLZ64_rr
    0U,	// CTLZ_rr
    0U,	// CTTZ64_rr
    0U,	// CTTZ_rr
    0U,	// DEALLOCFRAME
    0U,	// DEALLOC_RET_V4
    0U,	// DEALLOC_RET_cNotPt_V4
    0U,	// DEALLOC_RET_cNotdnPnt_V4
    0U,	// DEALLOC_RET_cNotdnPt_V4
    0U,	// DEALLOC_RET_cPt_V4
    0U,	// DEALLOC_RET_cdnPnt_V4
    0U,	// DEALLOC_RET_cdnPt_V4
    0U,	// EH_RETURN_JMPR
    0U,	// ENDLOOP0
    0U,	// FCMPOEQ32_rr
    0U,	// FCMPOEQ64_rr
    0U,	// FCMPOGE32_rr
    0U,	// FCMPOGE64_rr
    0U,	// FCMPOGT32_rr
    0U,	// FCMPOGT64_rr
    0U,	// FCMPUEQ32_rr
    0U,	// FCMPUEQ64_rr
    0U,	// FCMPUGE32_rr
    0U,	// FCMPUGE64_rr
    0U,	// FCMPUGT32_rr
    0U,	// FCMPUGT64_rr
    0U,	// FCONST32_nsdata
    4U,	// FMADD_dp
    4U,	// FMADD_sp
    0U,	// FMAX_dp
    0U,	// FMAX_sp
    0U,	// FMIN_dp
    0U,	// FMIN_sp
    0U,	// HEXAGON_A2_abs
    0U,	// HEXAGON_A2_absp
    0U,	// HEXAGON_A2_abssat
    0U,	// HEXAGON_A2_add
    36U,	// HEXAGON_A2_addh_h16_hh
    40U,	// HEXAGON_A2_addh_h16_hl
    36U,	// HEXAGON_A2_addh_h16_lh
    40U,	// HEXAGON_A2_addh_h16_ll
    44U,	// HEXAGON_A2_addh_h16_sat_hh
    48U,	// HEXAGON_A2_addh_h16_sat_hl
    44U,	// HEXAGON_A2_addh_h16_sat_lh
    48U,	// HEXAGON_A2_addh_h16_sat_ll
    52U,	// HEXAGON_A2_addh_l16_hl
    56U,	// HEXAGON_A2_addh_l16_ll
    60U,	// HEXAGON_A2_addh_l16_sat_hl
    64U,	// HEXAGON_A2_addh_l16_sat_ll
    32U,	// HEXAGON_A2_addi
    0U,	// HEXAGON_A2_addp
    1024U,	// HEXAGON_A2_addsat
    28U,	// HEXAGON_A2_and
    28U,	// HEXAGON_A2_andir
    28U,	// HEXAGON_A2_andp
    0U,	// HEXAGON_A2_aslh
    0U,	// HEXAGON_A2_asrh
    52U,	// HEXAGON_A2_combine_hh
    56U,	// HEXAGON_A2_combine_hl
    52U,	// HEXAGON_A2_combine_lh
    56U,	// HEXAGON_A2_combine_ll
    32U,	// HEXAGON_A2_combineii
    28U,	// HEXAGON_A2_combinew
    0U,	// HEXAGON_A2_max
    0U,	// HEXAGON_A2_maxu
    0U,	// HEXAGON_A2_min
    0U,	// HEXAGON_A2_minu
    0U,	// HEXAGON_A2_neg
    0U,	// HEXAGON_A2_negp
    0U,	// HEXAGON_A2_negsat
    0U,	// HEXAGON_A2_not
    0U,	// HEXAGON_A2_notp
    28U,	// HEXAGON_A2_or
    28U,	// HEXAGON_A2_orir
    28U,	// HEXAGON_A2_orp
    0U,	// HEXAGON_A2_sat
    0U,	// HEXAGON_A2_satb
    0U,	// HEXAGON_A2_sath
    0U,	// HEXAGON_A2_satub
    0U,	// HEXAGON_A2_satuh
    28U,	// HEXAGON_A2_sub
    36U,	// HEXAGON_A2_subh_h16_hh
    40U,	// HEXAGON_A2_subh_h16_hl
    36U,	// HEXAGON_A2_subh_h16_lh
    40U,	// HEXAGON_A2_subh_h16_ll
    44U,	// HEXAGON_A2_subh_h16_sat_hh
    48U,	// HEXAGON_A2_subh_h16_sat_hl
    44U,	// HEXAGON_A2_subh_h16_sat_lh
    48U,	// HEXAGON_A2_subh_h16_sat_ll
    52U,	// HEXAGON_A2_subh_l16_hl
    56U,	// HEXAGON_A2_subh_l16_ll
    60U,	// HEXAGON_A2_subh_l16_sat_hl
    64U,	// HEXAGON_A2_subh_l16_sat_ll
    28U,	// HEXAGON_A2_subp
    0U,	// HEXAGON_A2_subri
    68U,	// HEXAGON_A2_subsat
    0U,	// HEXAGON_A2_svaddh
    0U,	// HEXAGON_A2_svaddhs
    0U,	// HEXAGON_A2_svadduhs
    0U,	// HEXAGON_A2_svavgh
    0U,	// HEXAGON_A2_svavghs
    0U,	// HEXAGON_A2_svnavgh
    0U,	// HEXAGON_A2_svsubh
    0U,	// HEXAGON_A2_svsubhs
    0U,	// HEXAGON_A2_svsubuhs
    0U,	// HEXAGON_A2_swiz
    0U,	// HEXAGON_A2_sxtb
    0U,	// HEXAGON_A2_sxth
    0U,	// HEXAGON_A2_sxtw
    0U,	// HEXAGON_A2_tfr
    0U,	// HEXAGON_A2_tfrih
    0U,	// HEXAGON_A2_tfril
    0U,	// HEXAGON_A2_tfrp
    0U,	// HEXAGON_A2_tfrpi
    0U,	// HEXAGON_A2_tfrsi
    0U,	// HEXAGON_A2_vabsh
    0U,	// HEXAGON_A2_vabshsat
    0U,	// HEXAGON_A2_vabsw
    0U,	// HEXAGON_A2_vabswsat
    0U,	// HEXAGON_A2_vaddh
    0U,	// HEXAGON_A2_vaddhs
    0U,	// HEXAGON_A2_vaddub
    0U,	// HEXAGON_A2_vaddubs
    0U,	// HEXAGON_A2_vadduhs
    0U,	// HEXAGON_A2_vaddw
    0U,	// HEXAGON_A2_vaddws
    0U,	// HEXAGON_A2_vavgh
    0U,	// HEXAGON_A2_vavghcr
    0U,	// HEXAGON_A2_vavghr
    0U,	// HEXAGON_A2_vavgub
    0U,	// HEXAGON_A2_vavgubr
    0U,	// HEXAGON_A2_vavguh
    0U,	// HEXAGON_A2_vavguhr
    0U,	// HEXAGON_A2_vavguw
    0U,	// HEXAGON_A2_vavguwr
    0U,	// HEXAGON_A2_vavgw
    0U,	// HEXAGON_A2_vavgwcr
    0U,	// HEXAGON_A2_vavgwr
    0U,	// HEXAGON_A2_vcmpbeq
    0U,	// HEXAGON_A2_vcmpbgtu
    0U,	// HEXAGON_A2_vcmpheq
    0U,	// HEXAGON_A2_vcmphgt
    0U,	// HEXAGON_A2_vcmphgtu
    0U,	// HEXAGON_A2_vcmpweq
    0U,	// HEXAGON_A2_vcmpwgt
    0U,	// HEXAGON_A2_vcmpwgtu
    0U,	// HEXAGON_A2_vconj
    0U,	// HEXAGON_A2_vmaxh
    0U,	// HEXAGON_A2_vmaxub
    0U,	// HEXAGON_A2_vmaxuh
    0U,	// HEXAGON_A2_vmaxuw
    0U,	// HEXAGON_A2_vmaxw
    0U,	// HEXAGON_A2_vminh
    0U,	// HEXAGON_A2_vminub
    0U,	// HEXAGON_A2_vminuh
    0U,	// HEXAGON_A2_vminuw
    0U,	// HEXAGON_A2_vminw
    0U,	// HEXAGON_A2_vnavgh
    0U,	// HEXAGON_A2_vnavghcr
    0U,	// HEXAGON_A2_vnavghr
    0U,	// HEXAGON_A2_vnavgw
    0U,	// HEXAGON_A2_vnavgwcr
    0U,	// HEXAGON_A2_vnavgwr
    0U,	// HEXAGON_A2_vraddub
    0U,	// HEXAGON_A2_vraddub_acc
    0U,	// HEXAGON_A2_vrsadub
    0U,	// HEXAGON_A2_vrsadub_acc
    0U,	// HEXAGON_A2_vsubh
    0U,	// HEXAGON_A2_vsubhs
    0U,	// HEXAGON_A2_vsubub
    0U,	// HEXAGON_A2_vsububs
    0U,	// HEXAGON_A2_vsubuhs
    0U,	// HEXAGON_A2_vsubw
    0U,	// HEXAGON_A2_vsubws
    0U,	// HEXAGON_A2_xor
    0U,	// HEXAGON_A2_xorp
    0U,	// HEXAGON_A2_zxtb
    0U,	// HEXAGON_A2_zxth
    28U,	// HEXAGON_A4_cround_ri
    28U,	// HEXAGON_A4_cround_rr
    0U,	// HEXAGON_A4_modwrapu
    28U,	// HEXAGON_A4_round_ri
    68U,	// HEXAGON_A4_round_ri_sat
    28U,	// HEXAGON_A4_round_rr
    68U,	// HEXAGON_A4_round_rr_sat
    0U,	// HEXAGON_A5_vaddhubs
    0U,	// HEXAGON_C2_all8
    28U,	// HEXAGON_C2_and
    0U,	// HEXAGON_C2_andn
    0U,	// HEXAGON_C2_any8
    28U,	// HEXAGON_C2_cmpeq
    28U,	// HEXAGON_C2_cmpeqi
    28U,	// HEXAGON_C2_cmpeqp
    0U,	// HEXAGON_C2_cmpgei
    0U,	// HEXAGON_C2_cmpgeui
    28U,	// HEXAGON_C2_cmpgt
    28U,	// HEXAGON_C2_cmpgti
    28U,	// HEXAGON_C2_cmpgtp
    28U,	// HEXAGON_C2_cmpgtu
    28U,	// HEXAGON_C2_cmpgtui
    28U,	// HEXAGON_C2_cmpgtup
    0U,	// HEXAGON_C2_cmplt
    0U,	// HEXAGON_C2_cmpltu
    0U,	// HEXAGON_C2_mask
    24U,	// HEXAGON_C2_mux
    1300U,	// HEXAGON_C2_muxii
    1300U,	// HEXAGON_C2_muxir
    24U,	// HEXAGON_C2_muxri
    0U,	// HEXAGON_C2_not
    28U,	// HEXAGON_C2_or
    0U,	// HEXAGON_C2_orn
    0U,	// HEXAGON_C2_pxfer_map
    0U,	// HEXAGON_C2_tfrpr
    0U,	// HEXAGON_C2_tfrrp
    0U,	// HEXAGON_C2_vitpack
    0U,	// HEXAGON_C2_vmux
    0U,	// HEXAGON_C2_xor
    0U,	// HEXAGON_C4_fastcorner9
    0U,	// HEXAGON_C4_fastcorner9_not
    0U,	// HEXAGON_F2_conv_d2df
    0U,	// HEXAGON_F2_conv_d2sf
    0U,	// HEXAGON_F2_conv_df2d
    0U,	// HEXAGON_F2_conv_df2d_chop
    0U,	// HEXAGON_F2_conv_df2sf
    0U,	// HEXAGON_F2_conv_df2ud
    0U,	// HEXAGON_F2_conv_df2ud_chop
    0U,	// HEXAGON_F2_conv_df2uw
    0U,	// HEXAGON_F2_conv_df2uw_chop
    0U,	// HEXAGON_F2_conv_df2w
    0U,	// HEXAGON_F2_conv_df2w_chop
    0U,	// HEXAGON_F2_conv_sf2d
    0U,	// HEXAGON_F2_conv_sf2d_chop
    0U,	// HEXAGON_F2_conv_sf2df
    0U,	// HEXAGON_F2_conv_sf2ud
    0U,	// HEXAGON_F2_conv_sf2ud_chop
    0U,	// HEXAGON_F2_conv_sf2uw
    0U,	// HEXAGON_F2_conv_sf2uw_chop
    0U,	// HEXAGON_F2_conv_sf2w
    0U,	// HEXAGON_F2_conv_sf2w_chop
    0U,	// HEXAGON_F2_conv_ud2df
    0U,	// HEXAGON_F2_conv_ud2sf
    0U,	// HEXAGON_F2_conv_uw2df
    0U,	// HEXAGON_F2_conv_uw2sf
    0U,	// HEXAGON_F2_conv_w2df
    0U,	// HEXAGON_F2_conv_w2sf
    0U,	// HEXAGON_F2_dfadd
    0U,	// HEXAGON_F2_dfclass
    0U,	// HEXAGON_F2_dfcmpeq
    0U,	// HEXAGON_F2_dfcmpge
    0U,	// HEXAGON_F2_dfcmpgt
    0U,	// HEXAGON_F2_dfcmpuo
    0U,	// HEXAGON_F2_dffixupd
    0U,	// HEXAGON_F2_dffixupn
    0U,	// HEXAGON_F2_dffixupr
    0U,	// HEXAGON_F2_dffma
    1536U,	// HEXAGON_F2_dffma_lib
    25348U,	// HEXAGON_F2_dffma_sc
    0U,	// HEXAGON_F2_dffms
    0U,	// HEXAGON_F2_dffms_lib
    0U,	// HEXAGON_F2_dfimm_n
    0U,	// HEXAGON_F2_dfimm_p
    0U,	// HEXAGON_F2_dfmax
    0U,	// HEXAGON_F2_dfmin
    0U,	// HEXAGON_F2_dfmpy
    0U,	// HEXAGON_F2_dfsub
    0U,	// HEXAGON_F2_sfadd
    0U,	// HEXAGON_F2_sfclass
    0U,	// HEXAGON_F2_sfcmpeq
    0U,	// HEXAGON_F2_sfcmpge
    0U,	// HEXAGON_F2_sfcmpgt
    0U,	// HEXAGON_F2_sfcmpuo
    0U,	// HEXAGON_F2_sffixupd
    0U,	// HEXAGON_F2_sffixupn
    0U,	// HEXAGON_F2_sffixupr
    0U,	// HEXAGON_F2_sffma
    1536U,	// HEXAGON_F2_sffma_lib
    25348U,	// HEXAGON_F2_sffma_sc
    0U,	// HEXAGON_F2_sffms
    0U,	// HEXAGON_F2_sffms_lib
    0U,	// HEXAGON_F2_sfimm_n
    0U,	// HEXAGON_F2_sfimm_p
    0U,	// HEXAGON_F2_sfmax
    0U,	// HEXAGON_F2_sfmin
    0U,	// HEXAGON_F2_sfmpy
    0U,	// HEXAGON_F2_sfsub
    28U,	// HEXAGON_M2_acci
    28U,	// HEXAGON_M2_accii
    0U,	// HEXAGON_M2_cmaci_s0
    0U,	// HEXAGON_M2_cmacr_s0
    0U,	// HEXAGON_M2_cmacs_s0
    0U,	// HEXAGON_M2_cmacs_s1
    0U,	// HEXAGON_M2_cmacsc_s0
    0U,	// HEXAGON_M2_cmacsc_s1
    0U,	// HEXAGON_M2_cmpyi_s0
    0U,	// HEXAGON_M2_cmpyr_s0
    0U,	// HEXAGON_M2_cmpyrs_s0
    0U,	// HEXAGON_M2_cmpyrs_s1
    0U,	// HEXAGON_M2_cmpyrsc_s0
    0U,	// HEXAGON_M2_cmpyrsc_s1
    0U,	// HEXAGON_M2_cmpys_s0
    0U,	// HEXAGON_M2_cmpys_s1
    0U,	// HEXAGON_M2_cmpysc_s0
    0U,	// HEXAGON_M2_cmpysc_s1
    0U,	// HEXAGON_M2_cnacs_s0
    0U,	// HEXAGON_M2_cnacs_s1
    0U,	// HEXAGON_M2_cnacsc_s0
    0U,	// HEXAGON_M2_cnacsc_s1
    28U,	// HEXAGON_M2_dpmpyss_acc_s0
    28U,	// HEXAGON_M2_dpmpyss_nac_s0
    72U,	// HEXAGON_M2_dpmpyss_rnd_s0
    28U,	// HEXAGON_M2_dpmpyss_s0
    28U,	// HEXAGON_M2_dpmpyuu_acc_s0
    28U,	// HEXAGON_M2_dpmpyuu_nac_s0
    28U,	// HEXAGON_M2_dpmpyuu_s0
    76U,	// HEXAGON_M2_hmmpyh_rs1
    80U,	// HEXAGON_M2_hmmpyl_rs1
    28U,	// HEXAGON_M2_maci
    0U,	// HEXAGON_M2_macsin
    28U,	// HEXAGON_M2_macsip
    0U,	// HEXAGON_M2_mmachs_rs0
    0U,	// HEXAGON_M2_mmachs_rs1
    0U,	// HEXAGON_M2_mmachs_s0
    0U,	// HEXAGON_M2_mmachs_s1
    0U,	// HEXAGON_M2_mmacls_rs0
    0U,	// HEXAGON_M2_mmacls_rs1
    0U,	// HEXAGON_M2_mmacls_s0
    0U,	// HEXAGON_M2_mmacls_s1
    0U,	// HEXAGON_M2_mmacuhs_rs0
    0U,	// HEXAGON_M2_mmacuhs_rs1
    0U,	// HEXAGON_M2_mmacuhs_s0
    0U,	// HEXAGON_M2_mmacuhs_s1
    0U,	// HEXAGON_M2_mmaculs_rs0
    0U,	// HEXAGON_M2_mmaculs_rs1
    0U,	// HEXAGON_M2_mmaculs_s0
    0U,	// HEXAGON_M2_mmaculs_s1
    0U,	// HEXAGON_M2_mmpyh_rs0
    0U,	// HEXAGON_M2_mmpyh_rs1
    0U,	// HEXAGON_M2_mmpyh_s0
    0U,	// HEXAGON_M2_mmpyh_s1
    0U,	// HEXAGON_M2_mmpyl_rs0
    0U,	// HEXAGON_M2_mmpyl_rs1
    0U,	// HEXAGON_M2_mmpyl_s0
    0U,	// HEXAGON_M2_mmpyl_s1
    0U,	// HEXAGON_M2_mmpyuh_rs0
    0U,	// HEXAGON_M2_mmpyuh_rs1
    0U,	// HEXAGON_M2_mmpyuh_s0
    0U,	// HEXAGON_M2_mmpyuh_s1
    0U,	// HEXAGON_M2_mmpyul_rs0
    0U,	// HEXAGON_M2_mmpyul_rs1
    0U,	// HEXAGON_M2_mmpyul_s0
    0U,	// HEXAGON_M2_mmpyul_s1
    52U,	// HEXAGON_M2_mpy_acc_hh_s0
    84U,	// HEXAGON_M2_mpy_acc_hh_s1
    56U,	// HEXAGON_M2_mpy_acc_hl_s0
    88U,	// HEXAGON_M2_mpy_acc_hl_s1
    52U,	// HEXAGON_M2_mpy_acc_lh_s0
    84U,	// HEXAGON_M2_mpy_acc_lh_s1
    56U,	// HEXAGON_M2_mpy_acc_ll_s0
    88U,	// HEXAGON_M2_mpy_acc_ll_s1
    60U,	// HEXAGON_M2_mpy_acc_sat_hh_s0
    92U,	// HEXAGON_M2_mpy_acc_sat_hh_s1
    64U,	// HEXAGON_M2_mpy_acc_sat_hl_s0
    96U,	// HEXAGON_M2_mpy_acc_sat_hl_s1
    60U,	// HEXAGON_M2_mpy_acc_sat_lh_s0
    92U,	// HEXAGON_M2_mpy_acc_sat_lh_s1
    64U,	// HEXAGON_M2_mpy_acc_sat_ll_s0
    96U,	// HEXAGON_M2_mpy_acc_sat_ll_s1
    52U,	// HEXAGON_M2_mpy_hh_s0
    84U,	// HEXAGON_M2_mpy_hh_s1
    56U,	// HEXAGON_M2_mpy_hl_s0
    88U,	// HEXAGON_M2_mpy_hl_s1
    52U,	// HEXAGON_M2_mpy_lh_s0
    84U,	// HEXAGON_M2_mpy_lh_s1
    56U,	// HEXAGON_M2_mpy_ll_s0
    88U,	// HEXAGON_M2_mpy_ll_s1
    52U,	// HEXAGON_M2_mpy_nac_hh_s0
    84U,	// HEXAGON_M2_mpy_nac_hh_s1
    56U,	// HEXAGON_M2_mpy_nac_hl_s0
    88U,	// HEXAGON_M2_mpy_nac_hl_s1
    52U,	// HEXAGON_M2_mpy_nac_lh_s0
    84U,	// HEXAGON_M2_mpy_nac_lh_s1
    56U,	// HEXAGON_M2_mpy_nac_ll_s0
    88U,	// HEXAGON_M2_mpy_nac_ll_s1
    60U,	// HEXAGON_M2_mpy_nac_sat_hh_s0
    92U,	// HEXAGON_M2_mpy_nac_sat_hh_s1
    64U,	// HEXAGON_M2_mpy_nac_sat_hl_s0
    96U,	// HEXAGON_M2_mpy_nac_sat_hl_s1
    60U,	// HEXAGON_M2_mpy_nac_sat_lh_s0
    92U,	// HEXAGON_M2_mpy_nac_sat_lh_s1
    64U,	// HEXAGON_M2_mpy_nac_sat_ll_s0
    96U,	// HEXAGON_M2_mpy_nac_sat_ll_s1
    100U,	// HEXAGON_M2_mpy_rnd_hh_s0
    104U,	// HEXAGON_M2_mpy_rnd_hh_s1
    108U,	// HEXAGON_M2_mpy_rnd_hl_s0
    112U,	// HEXAGON_M2_mpy_rnd_hl_s1
    100U,	// HEXAGON_M2_mpy_rnd_lh_s0
    104U,	// HEXAGON_M2_mpy_rnd_lh_s1
    108U,	// HEXAGON_M2_mpy_rnd_ll_s0
    112U,	// HEXAGON_M2_mpy_rnd_ll_s1
    60U,	// HEXAGON_M2_mpy_sat_hh_s0
    92U,	// HEXAGON_M2_mpy_sat_hh_s1
    64U,	// HEXAGON_M2_mpy_sat_hl_s0
    96U,	// HEXAGON_M2_mpy_sat_hl_s1
    60U,	// HEXAGON_M2_mpy_sat_lh_s0
    92U,	// HEXAGON_M2_mpy_sat_lh_s1
    64U,	// HEXAGON_M2_mpy_sat_ll_s0
    96U,	// HEXAGON_M2_mpy_sat_ll_s1
    116U,	// HEXAGON_M2_mpy_sat_rnd_hh_s0
    76U,	// HEXAGON_M2_mpy_sat_rnd_hh_s1
    120U,	// HEXAGON_M2_mpy_sat_rnd_hl_s0
    80U,	// HEXAGON_M2_mpy_sat_rnd_hl_s1
    116U,	// HEXAGON_M2_mpy_sat_rnd_lh_s0
    76U,	// HEXAGON_M2_mpy_sat_rnd_lh_s1
    120U,	// HEXAGON_M2_mpy_sat_rnd_ll_s0
    80U,	// HEXAGON_M2_mpy_sat_rnd_ll_s1
    28U,	// HEXAGON_M2_mpy_up
    52U,	// HEXAGON_M2_mpyd_acc_hh_s0
    84U,	// HEXAGON_M2_mpyd_acc_hh_s1
    56U,	// HEXAGON_M2_mpyd_acc_hl_s0
    88U,	// HEXAGON_M2_mpyd_acc_hl_s1
    52U,	// HEXAGON_M2_mpyd_acc_lh_s0
    84U,	// HEXAGON_M2_mpyd_acc_lh_s1
    56U,	// HEXAGON_M2_mpyd_acc_ll_s0
    88U,	// HEXAGON_M2_mpyd_acc_ll_s1
    52U,	// HEXAGON_M2_mpyd_hh_s0
    84U,	// HEXAGON_M2_mpyd_hh_s1
    56U,	// HEXAGON_M2_mpyd_hl_s0
    88U,	// HEXAGON_M2_mpyd_hl_s1
    52U,	// HEXAGON_M2_mpyd_lh_s0
    84U,	// HEXAGON_M2_mpyd_lh_s1
    56U,	// HEXAGON_M2_mpyd_ll_s0
    88U,	// HEXAGON_M2_mpyd_ll_s1
    52U,	// HEXAGON_M2_mpyd_nac_hh_s0
    84U,	// HEXAGON_M2_mpyd_nac_hh_s1
    56U,	// HEXAGON_M2_mpyd_nac_hl_s0
    88U,	// HEXAGON_M2_mpyd_nac_hl_s1
    52U,	// HEXAGON_M2_mpyd_nac_lh_s0
    84U,	// HEXAGON_M2_mpyd_nac_lh_s1
    56U,	// HEXAGON_M2_mpyd_nac_ll_s0
    88U,	// HEXAGON_M2_mpyd_nac_ll_s1
    100U,	// HEXAGON_M2_mpyd_rnd_hh_s0
    104U,	// HEXAGON_M2_mpyd_rnd_hh_s1
    108U,	// HEXAGON_M2_mpyd_rnd_hl_s0
    112U,	// HEXAGON_M2_mpyd_rnd_hl_s1
    100U,	// HEXAGON_M2_mpyd_rnd_lh_s0
    104U,	// HEXAGON_M2_mpyd_rnd_lh_s1
    108U,	// HEXAGON_M2_mpyd_rnd_ll_s0
    112U,	// HEXAGON_M2_mpyd_rnd_ll_s1
    28U,	// HEXAGON_M2_mpyi
    52U,	// HEXAGON_M2_mpyu_acc_hh_s0
    84U,	// HEXAGON_M2_mpyu_acc_hh_s1
    56U,	// HEXAGON_M2_mpyu_acc_hl_s0
    88U,	// HEXAGON_M2_mpyu_acc_hl_s1
    52U,	// HEXAGON_M2_mpyu_acc_lh_s0
    84U,	// HEXAGON_M2_mpyu_acc_lh_s1
    56U,	// HEXAGON_M2_mpyu_acc_ll_s0
    88U,	// HEXAGON_M2_mpyu_acc_ll_s1
    52U,	// HEXAGON_M2_mpyu_hh_s0
    84U,	// HEXAGON_M2_mpyu_hh_s1
    56U,	// HEXAGON_M2_mpyu_hl_s0
    88U,	// HEXAGON_M2_mpyu_hl_s1
    52U,	// HEXAGON_M2_mpyu_lh_s0
    84U,	// HEXAGON_M2_mpyu_lh_s1
    56U,	// HEXAGON_M2_mpyu_ll_s0
    88U,	// HEXAGON_M2_mpyu_ll_s1
    52U,	// HEXAGON_M2_mpyu_nac_hh_s0
    84U,	// HEXAGON_M2_mpyu_nac_hh_s1
    56U,	// HEXAGON_M2_mpyu_nac_hl_s0
    88U,	// HEXAGON_M2_mpyu_nac_hl_s1
    52U,	// HEXAGON_M2_mpyu_nac_lh_s0
    84U,	// HEXAGON_M2_mpyu_nac_lh_s1
    56U,	// HEXAGON_M2_mpyu_nac_ll_s0
    88U,	// HEXAGON_M2_mpyu_nac_ll_s1
    28U,	// HEXAGON_M2_mpyu_up
    52U,	// HEXAGON_M2_mpyud_acc_hh_s0
    84U,	// HEXAGON_M2_mpyud_acc_hh_s1
    56U,	// HEXAGON_M2_mpyud_acc_hl_s0
    88U,	// HEXAGON_M2_mpyud_acc_hl_s1
    52U,	// HEXAGON_M2_mpyud_acc_lh_s0
    84U,	// HEXAGON_M2_mpyud_acc_lh_s1
    56U,	// HEXAGON_M2_mpyud_acc_ll_s0
    88U,	// HEXAGON_M2_mpyud_acc_ll_s1
    52U,	// HEXAGON_M2_mpyud_hh_s0
    84U,	// HEXAGON_M2_mpyud_hh_s1
    56U,	// HEXAGON_M2_mpyud_hl_s0
    88U,	// HEXAGON_M2_mpyud_hl_s1
    52U,	// HEXAGON_M2_mpyud_lh_s0
    84U,	// HEXAGON_M2_mpyud_lh_s1
    56U,	// HEXAGON_M2_mpyud_ll_s0
    88U,	// HEXAGON_M2_mpyud_ll_s1
    52U,	// HEXAGON_M2_mpyud_nac_hh_s0
    84U,	// HEXAGON_M2_mpyud_nac_hh_s1
    56U,	// HEXAGON_M2_mpyud_nac_hl_s0
    88U,	// HEXAGON_M2_mpyud_nac_hl_s1
    52U,	// HEXAGON_M2_mpyud_nac_lh_s0
    84U,	// HEXAGON_M2_mpyud_nac_lh_s1
    56U,	// HEXAGON_M2_mpyud_nac_ll_s0
    88U,	// HEXAGON_M2_mpyud_nac_ll_s1
    0U,	// HEXAGON_M2_mpyui
    28U,	// HEXAGON_M2_nacci
    28U,	// HEXAGON_M2_naccii
    0U,	// HEXAGON_M2_subacc
    0U,	// HEXAGON_M2_vabsdiffh
    0U,	// HEXAGON_M2_vabsdiffw
    0U,	// HEXAGON_M2_vcmac_s0_sat_i
    0U,	// HEXAGON_M2_vcmac_s0_sat_r
    0U,	// HEXAGON_M2_vcmpy_s0_sat_i
    0U,	// HEXAGON_M2_vcmpy_s0_sat_r
    0U,	// HEXAGON_M2_vcmpy_s1_sat_i
    0U,	// HEXAGON_M2_vcmpy_s1_sat_r
    0U,	// HEXAGON_M2_vdmacs_s0
    0U,	// HEXAGON_M2_vdmacs_s1
    0U,	// HEXAGON_M2_vdmpyrs_s0
    0U,	// HEXAGON_M2_vdmpyrs_s1
    0U,	// HEXAGON_M2_vdmpys_s0
    0U,	// HEXAGON_M2_vdmpys_s1
    0U,	// HEXAGON_M2_vmac2
    0U,	// HEXAGON_M2_vmac2es
    0U,	// HEXAGON_M2_vmac2es_s0
    0U,	// HEXAGON_M2_vmac2es_s1
    0U,	// HEXAGON_M2_vmac2s_s0
    0U,	// HEXAGON_M2_vmac2s_s1
    0U,	// HEXAGON_M2_vmpy2es_s0
    0U,	// HEXAGON_M2_vmpy2es_s1
    0U,	// HEXAGON_M2_vmpy2s_s0
    0U,	// HEXAGON_M2_vmpy2s_s0pack
    0U,	// HEXAGON_M2_vmpy2s_s1
    0U,	// HEXAGON_M2_vmpy2s_s1pack
    0U,	// HEXAGON_M2_vrcmaci_s0
    0U,	// HEXAGON_M2_vrcmaci_s0c
    0U,	// HEXAGON_M2_vrcmacr_s0
    0U,	// HEXAGON_M2_vrcmacr_s0c
    0U,	// HEXAGON_M2_vrcmpyi_s0
    0U,	// HEXAGON_M2_vrcmpyi_s0c
    0U,	// HEXAGON_M2_vrcmpyr_s0
    0U,	// HEXAGON_M2_vrcmpyr_s0c
    0U,	// HEXAGON_M2_vrmac_s0
    0U,	// HEXAGON_M2_vrmpy_s0
    0U,	// HEXAGON_M2_xor_xacc
    28U,	// HEXAGON_M4_and_and
    28U,	// HEXAGON_M4_and_andn
    0U,	// HEXAGON_M4_and_or
    0U,	// HEXAGON_M4_and_xor
    28U,	// HEXAGON_M4_or_and
    28U,	// HEXAGON_M4_or_andn
    28U,	// HEXAGON_M4_or_or
    0U,	// HEXAGON_M4_or_xor
    28U,	// HEXAGON_M4_xor_and
    28U,	// HEXAGON_M4_xor_andn
    0U,	// HEXAGON_M4_xor_or
    0U,	// HEXAGON_M5_vdmacbsu
    0U,	// HEXAGON_M5_vdmpybsu
    0U,	// HEXAGON_M5_vmacbsu
    0U,	// HEXAGON_M5_vmacbuu
    0U,	// HEXAGON_M5_vmpybsu
    0U,	// HEXAGON_M5_vmpybuu
    0U,	// HEXAGON_M5_vrmacbsu
    0U,	// HEXAGON_M5_vrmacbuu
    0U,	// HEXAGON_M5_vrmpybsu
    0U,	// HEXAGON_M5_vrmpybuu
    0U,	// HEXAGON_S2_addasl_rrri
    28U,	// HEXAGON_S2_asl_i_p
    28U,	// HEXAGON_S2_asl_i_p_acc
    28U,	// HEXAGON_S2_asl_i_p_and
    28U,	// HEXAGON_S2_asl_i_p_nac
    28U,	// HEXAGON_S2_asl_i_p_or
    28U,	// HEXAGON_S2_asl_i_p_xacc
    28U,	// HEXAGON_S2_asl_i_r
    28U,	// HEXAGON_S2_asl_i_r_acc
    28U,	// HEXAGON_S2_asl_i_r_and
    28U,	// HEXAGON_S2_asl_i_r_nac
    28U,	// HEXAGON_S2_asl_i_r_or
    68U,	// HEXAGON_S2_asl_i_r_sat
    28U,	// HEXAGON_S2_asl_i_r_xacc
    0U,	// HEXAGON_S2_asl_i_vh
    0U,	// HEXAGON_S2_asl_i_vw
    28U,	// HEXAGON_S2_asl_r_p
    28U,	// HEXAGON_S2_asl_r_p_acc
    28U,	// HEXAGON_S2_asl_r_p_and
    28U,	// HEXAGON_S2_asl_r_p_nac
    28U,	// HEXAGON_S2_asl_r_p_or
    28U,	// HEXAGON_S2_asl_r_r
    28U,	// HEXAGON_S2_asl_r_r_acc
    28U,	// HEXAGON_S2_asl_r_r_and
    28U,	// HEXAGON_S2_asl_r_r_nac
    28U,	// HEXAGON_S2_asl_r_r_or
    68U,	// HEXAGON_S2_asl_r_r_sat
    0U,	// HEXAGON_S2_asl_r_vh
    0U,	// HEXAGON_S2_asl_r_vw
    28U,	// HEXAGON_S2_asr_i_p
    28U,	// HEXAGON_S2_asr_i_p_acc
    28U,	// HEXAGON_S2_asr_i_p_and
    28U,	// HEXAGON_S2_asr_i_p_nac
    28U,	// HEXAGON_S2_asr_i_p_or
    28U,	// HEXAGON_S2_asr_i_p_rnd
    0U,	// HEXAGON_S2_asr_i_p_rnd_goodsyntax
    28U,	// HEXAGON_S2_asr_i_r
    28U,	// HEXAGON_S2_asr_i_r_acc
    28U,	// HEXAGON_S2_asr_i_r_and
    28U,	// HEXAGON_S2_asr_i_r_nac
    28U,	// HEXAGON_S2_asr_i_r_or
    72U,	// HEXAGON_S2_asr_i_r_rnd
    0U,	// HEXAGON_S2_asr_i_r_rnd_goodsyntax
    28U,	// HEXAGON_S2_asr_i_svw_trun
    28U,	// HEXAGON_S2_asr_i_vh
    28U,	// HEXAGON_S2_asr_i_vw
    28U,	// HEXAGON_S2_asr_r_p
    28U,	// HEXAGON_S2_asr_r_p_acc
    28U,	// HEXAGON_S2_asr_r_p_and
    28U,	// HEXAGON_S2_asr_r_p_nac
    28U,	// HEXAGON_S2_asr_r_p_or
    28U,	// HEXAGON_S2_asr_r_r
    28U,	// HEXAGON_S2_asr_r_r_acc
    28U,	// HEXAGON_S2_asr_r_r_and
    28U,	// HEXAGON_S2_asr_r_r_nac
    28U,	// HEXAGON_S2_asr_r_r_or
    68U,	// HEXAGON_S2_asr_r_r_sat
    28U,	// HEXAGON_S2_asr_r_svw_trun
    28U,	// HEXAGON_S2_asr_r_vh
    28U,	// HEXAGON_S2_asr_r_vw
    0U,	// HEXAGON_S2_cl0
    0U,	// HEXAGON_S2_cl0p
    0U,	// HEXAGON_S2_cl1
    0U,	// HEXAGON_S2_cl1p
    0U,	// HEXAGON_S2_clb
    0U,	// HEXAGON_S2_clbnorm
    0U,	// HEXAGON_S2_clbp
    28U,	// HEXAGON_S2_clrbit_i
    28U,	// HEXAGON_S2_clrbit_r
    0U,	// HEXAGON_S2_ct0
    0U,	// HEXAGON_S2_ct1
    1300U,	// HEXAGON_S2_extractu
    28U,	// HEXAGON_S2_extractu_rp
    1300U,	// HEXAGON_S2_extractup
    28U,	// HEXAGON_S2_extractup_rp
    0U,	// HEXAGON_S2_lsl_r_p
    0U,	// HEXAGON_S2_lsl_r_p_acc
    0U,	// HEXAGON_S2_lsl_r_p_and
    0U,	// HEXAGON_S2_lsl_r_p_nac
    0U,	// HEXAGON_S2_lsl_r_p_or
    0U,	// HEXAGON_S2_lsl_r_r
    0U,	// HEXAGON_S2_lsl_r_r_acc
    0U,	// HEXAGON_S2_lsl_r_r_and
    0U,	// HEXAGON_S2_lsl_r_r_nac
    0U,	// HEXAGON_S2_lsl_r_r_or
    0U,	// HEXAGON_S2_lsl_r_vh
    0U,	// HEXAGON_S2_lsl_r_vw
    28U,	// HEXAGON_S2_lsr_i_p
    28U,	// HEXAGON_S2_lsr_i_p_acc
    28U,	// HEXAGON_S2_lsr_i_p_and
    28U,	// HEXAGON_S2_lsr_i_p_nac
    28U,	// HEXAGON_S2_lsr_i_p_or
    28U,	// HEXAGON_S2_lsr_i_p_xacc
    28U,	// HEXAGON_S2_lsr_i_r
    28U,	// HEXAGON_S2_lsr_i_r_acc
    28U,	// HEXAGON_S2_lsr_i_r_and
    28U,	// HEXAGON_S2_lsr_i_r_nac
    28U,	// HEXAGON_S2_lsr_i_r_or
    28U,	// HEXAGON_S2_lsr_i_r_xacc
    0U,	// HEXAGON_S2_lsr_i_vh
    0U,	// HEXAGON_S2_lsr_i_vw
    28U,	// HEXAGON_S2_lsr_r_p
    28U,	// HEXAGON_S2_lsr_r_p_acc
    28U,	// HEXAGON_S2_lsr_r_p_and
    28U,	// HEXAGON_S2_lsr_r_p_nac
    28U,	// HEXAGON_S2_lsr_r_p_or
    28U,	// HEXAGON_S2_lsr_r_r
    28U,	// HEXAGON_S2_lsr_r_r_acc
    28U,	// HEXAGON_S2_lsr_r_r_and
    28U,	// HEXAGON_S2_lsr_r_r_nac
    28U,	// HEXAGON_S2_lsr_r_r_or
    0U,	// HEXAGON_S2_lsr_r_vh
    0U,	// HEXAGON_S2_lsr_r_vw
    0U,	// HEXAGON_S2_packhl
    0U,	// HEXAGON_S2_parityp
    28U,	// HEXAGON_S2_setbit_i
    28U,	// HEXAGON_S2_setbit_r
    0U,	// HEXAGON_S2_shuffeb
    0U,	// HEXAGON_S2_shuffeh
    0U,	// HEXAGON_S2_shuffob
    0U,	// HEXAGON_S2_shuffoh
    0U,	// HEXAGON_S2_svsathb
    0U,	// HEXAGON_S2_svsathub
    28U,	// HEXAGON_S2_togglebit_i
    28U,	// HEXAGON_S2_togglebit_r
    28U,	// HEXAGON_S2_tstbit_i
    28U,	// HEXAGON_S2_tstbit_r
    28U,	// HEXAGON_S2_valignib
    28U,	// HEXAGON_S2_valignrb
    0U,	// HEXAGON_S2_vcrotate
    0U,	// HEXAGON_S2_vrndpackwh
    0U,	// HEXAGON_S2_vrndpackwhs
    0U,	// HEXAGON_S2_vsathb
    0U,	// HEXAGON_S2_vsathb_nopack
    0U,	// HEXAGON_S2_vsathub
    0U,	// HEXAGON_S2_vsathub_nopack
    0U,	// HEXAGON_S2_vsatwh
    0U,	// HEXAGON_S2_vsatwh_nopack
    0U,	// HEXAGON_S2_vsatwuh
    0U,	// HEXAGON_S2_vsatwuh_nopack
    0U,	// HEXAGON_S2_vsplatrb
    0U,	// HEXAGON_S2_vsplatrh
    0U,	// HEXAGON_S2_vsxtbh
    0U,	// HEXAGON_S2_vsxthw
    0U,	// HEXAGON_S2_vtrunehb
    0U,	// HEXAGON_S2_vtrunewh
    0U,	// HEXAGON_S2_vtrunohb
    0U,	// HEXAGON_S2_vtrunowh
    0U,	// HEXAGON_S2_vzxtbh
    0U,	// HEXAGON_S2_vzxthw
    28U,	// HEXAGON_S4_or_andi
    272U,	// HEXAGON_S4_or_andix
    28U,	// HEXAGON_S4_or_ori
    0U,	// HEXAGON_S5_asrhub_rnd_sat_goodsyntax
    0U,	// HEXAGON_S5_asrhub_sat
    0U,	// HEXAGON_S5_popcountp
    72U,	// HEXAGON_S5_vasrhrnd_goodsyntax
    125U,	// HEXAGON_circ_ldd
    0U,	// HI
    0U,	// HI_jt
    0U,	// HI_label
    0U,	// HIi
    0U,	// Hexagon_A2_addpsat
    0U,	// Hexagon_A2_addsp
    0U,	// Hexagon_A2_maxp
    0U,	// Hexagon_A2_maxup
    28U,	// Hexagon_A4_andn
    0U,	// Hexagon_A4_combineir
    28U,	// Hexagon_A4_combineri
    28U,	// Hexagon_A4_orn
    28U,	// Hexagon_A4_rcmpeq
    28U,	// Hexagon_A4_rcmpeqi
    28U,	// Hexagon_A4_rcmpneq
    28U,	// Hexagon_A4_rcmpneqi
    28U,	// Hexagon_C2_bitsclr
    28U,	// Hexagon_C2_bitsclri
    0U,	// Hexagon_C2_bitsset
    4U,	// Hexagon_C4_and_and
    1U,	// Hexagon_C4_and_andn
    4U,	// Hexagon_C4_and_or
    1U,	// Hexagon_C4_and_orn
    28U,	// Hexagon_C4_cmplte
    28U,	// Hexagon_C4_cmpltei
    28U,	// Hexagon_C4_cmplteu
    0U,	// Hexagon_C4_fastcorner9
    0U,	// Hexagon_C4_fastcorner9_not
    4U,	// Hexagon_C4_or_and
    1U,	// Hexagon_C4_or_andn
    4U,	// Hexagon_C4_or_or
    1U,	// Hexagon_C4_or_orn
    28U,	// Hexagon_M2_mpysmi
    0U,	// Hexagon_M2_vradduh
    0U,	// Hexagon_M2_vrcmpys_acc_s1
    0U,	// Hexagon_M2_vrcmpys_s1
    0U,	// Hexagon_M2_vrcmpys_s1rp
    0U,	// Hexagon_M4_xor_xacc
    0U,	// Hexagon_S2_brev
    0U,	// Hexagon_S2_deinterleave
    1812U,	// Hexagon_S2_insert
    28U,	// Hexagon_S2_insert_rp
    1812U,	// Hexagon_S2_insertp
    28U,	// Hexagon_S2_insertp_rp
    0U,	// Hexagon_S2_interleave
    0U,	// Hexagon_S2_lfsp
    0U,	// Hexagon_S2_tableidxb_goodsyntax
    0U,	// Hexagon_S2_tableidxd_goodsyntax
    0U,	// Hexagon_S2_tableidxh_goodsyntax
    0U,	// Hexagon_S2_tableidxw_goodsyntax
    28U,	// Hexagon_S2_vspliceib
    28U,	// Hexagon_S2_vsplicerb
    16U,	// Hexagon_S4_addaddi
    28U,	// Hexagon_S4_andnp
    28U,	// Hexagon_S4_ornp
    37664U,	// Hexagon_S4_subaddi
    0U,	// IMMEXT_b
    0U,	// IMMEXT_c
    0U,	// IMMEXT_g
    0U,	// IMMEXT_i
    0U,	// JMP
    0U,	// JMPR
    0U,	// JMPR_f
    0U,	// JMPR_fnew_ntV3
    0U,	// JMPR_fnew_tV3
    0U,	// JMPR_t
    0U,	// JMPR_tnew_ntV3
    0U,	// JMPR_tnew_tV3
    0U,	// JMP_f
    0U,	// JMP_fnew_nt
    0U,	// JMP_fnew_t
    0U,	// JMP_t
    0U,	// JMP_tnew_nt
    0U,	// JMP_tnew_t
    0U,	// JMPret
    0U,	// JMPret_f
    0U,	// JMPret_fnew_ntV3
    0U,	// JMPret_fnew_tV3
    0U,	// JMPret_t
    0U,	// JMPret_tnew_ntV3
    0U,	// JMPret_tnew_tV3
    0U,	// LDb_GP_V4
    0U,	// LDb_GP_cNotPt_V4
    0U,	// LDb_GP_cPt_V4
    0U,	// LDb_GP_cdnNotPt_V4
    0U,	// LDb_GP_cdnPt_V4
    0U,	// LDd_GP_V4
    0U,	// LDd_GP_cNotPt_V4
    0U,	// LDd_GP_cPt_V4
    0U,	// LDd_GP_cdnNotPt_V4
    0U,	// LDd_GP_cdnPt_V4
    0U,	// LDh_GP_V4
    0U,	// LDh_GP_cNotPt_V4
    0U,	// LDh_GP_cPt_V4
    0U,	// LDh_GP_cdnNotPt_V4
    0U,	// LDh_GP_cdnPt_V4
    0U,	// LDrib
    0U,	// LDrib_abs_V4
    0U,	// LDrib_abs_cNotPt_V4
    0U,	// LDrib_abs_cPt_V4
    0U,	// LDrib_abs_cdnNotPt_V4
    0U,	// LDrib_abs_cdnPt_V4
    1U,	// LDrib_abs_set_V4
    1U,	// LDrib_cNotPt
    1U,	// LDrib_cPt
    1U,	// LDrib_cdnNotPt
    1U,	// LDrib_cdnPt
    1U,	// LDrib_ind_lo_V4
    9U,	// LDrib_indexed
    128U,	// LDrib_indexed_cNotPt
    128U,	// LDrib_indexed_cPt
    128U,	// LDrib_indexed_cdnNotPt
    128U,	// LDrib_indexed_cdnPt
    29U,	// LDrib_indexed_shl_V4
    132U,	// LDrib_indexed_shl_cNotPt_V4
    132U,	// LDrib_indexed_shl_cPt_V4
    132U,	// LDrib_indexed_shl_cdnNotPt_V4
    132U,	// LDrib_indexed_shl_cdnPt_V4
    0U,	// LDrid
    0U,	// LDrid_abs_V4
    0U,	// LDrid_abs_cNotPt_V4
    0U,	// LDrid_abs_cPt_V4
    0U,	// LDrid_abs_cdnNotPt_V4
    0U,	// LDrid_abs_cdnPt_V4
    1U,	// LDrid_abs_set_V4
    1U,	// LDrid_cNotPt
    1U,	// LDrid_cPt
    1U,	// LDrid_cdnNotPt
    1U,	// LDrid_cdnPt
    0U,	// LDrid_f
    0U,	// LDrid_ind_lo_V4
    9U,	// LDrid_indexed
    128U,	// LDrid_indexed_cNotPt
    128U,	// LDrid_indexed_cPt
    128U,	// LDrid_indexed_cdnNotPt
    128U,	// LDrid_indexed_cdnPt
    33U,	// LDrid_indexed_f
    29U,	// LDrid_indexed_shl_V4
    132U,	// LDrid_indexed_shl_cNotPt_V4
    132U,	// LDrid_indexed_shl_cPt_V4
    132U,	// LDrid_indexed_shl_cdnNotPt_V4
    132U,	// LDrid_indexed_shl_cdnPt_V4
    0U,	// LDrih
    0U,	// LDrih_abs_V4
    0U,	// LDrih_abs_cNotPt_V4
    0U,	// LDrih_abs_cPt_V4
    0U,	// LDrih_abs_cdnNotPt_V4
    0U,	// LDrih_abs_cdnPt_V4
    1U,	// LDrih_abs_set_V4
    1U,	// LDrih_cNotPt
    1U,	// LDrih_cPt
    1U,	// LDrih_cdnNotPt
    1U,	// LDrih_cdnPt
    1U,	// LDrih_ind_lo_V4
    9U,	// LDrih_indexed
    128U,	// LDrih_indexed_cNotPt
    128U,	// LDrih_indexed_cPt
    128U,	// LDrih_indexed_cdnNotPt
    128U,	// LDrih_indexed_cdnPt
    29U,	// LDrih_indexed_shl_V4
    132U,	// LDrih_indexed_shl_cNotPt_V4
    132U,	// LDrih_indexed_shl_cPt_V4
    132U,	// LDrih_indexed_shl_cdnNotPt_V4
    132U,	// LDrih_indexed_shl_cdnPt_V4
    0U,	// LDriub
    0U,	// LDriub_abs_V4
    0U,	// LDriub_abs_cNotPt_V4
    0U,	// LDriub_abs_cPt_V4
    0U,	// LDriub_abs_cdnNotPt_V4
    0U,	// LDriub_abs_cdnPt_V4
    1U,	// LDriub_abs_set_V4
    1U,	// LDriub_cNotPt
    1U,	// LDriub_cPt
    1U,	// LDriub_cdnNotPt
    1U,	// LDriub_cdnPt
    1U,	// LDriub_ind_anyext_lo_V4
    1U,	// LDriub_ind_lo_V4
    9U,	// LDriub_indexed
    128U,	// LDriub_indexed_cNotPt
    128U,	// LDriub_indexed_cPt
    128U,	// LDriub_indexed_cdnNotPt
    128U,	// LDriub_indexed_cdnPt
    29U,	// LDriub_indexed_shl_V4
    132U,	// LDriub_indexed_shl_cNotPt_V4
    132U,	// LDriub_indexed_shl_cPt_V4
    132U,	// LDriub_indexed_shl_cdnNotPt_V4
    132U,	// LDriub_indexed_shl_cdnPt_V4
    0U,	// LDriuh
    0U,	// LDriuh_abs_V4
    0U,	// LDriuh_abs_cNotPt_V4
    0U,	// LDriuh_abs_cPt_V4
    0U,	// LDriuh_abs_cdnNotPt_V4
    0U,	// LDriuh_abs_cdnPt_V4
    1U,	// LDriuh_abs_set_V4
    1U,	// LDriuh_cNotPt
    1U,	// LDriuh_cPt
    1U,	// LDriuh_cdnNotPt
    1U,	// LDriuh_cdnPt
    1U,	// LDriuh_ind_anyext_lo_V4
    1U,	// LDriuh_ind_lo_V4
    9U,	// LDriuh_indexed
    128U,	// LDriuh_indexed_cNotPt
    128U,	// LDriuh_indexed_cPt
    128U,	// LDriuh_indexed_cdnNotPt
    128U,	// LDriuh_indexed_cdnPt
    29U,	// LDriuh_indexed_shl_V4
    132U,	// LDriuh_indexed_shl_cNotPt_V4
    132U,	// LDriuh_indexed_shl_cPt_V4
    132U,	// LDriuh_indexed_shl_cdnNotPt_V4
    132U,	// LDriuh_indexed_shl_cdnPt_V4
    0U,	// LDriw
    0U,	// LDriw_abs_V4
    0U,	// LDriw_abs_cNotPt_V4
    0U,	// LDriw_abs_cPt_V4
    0U,	// LDriw_abs_cdnNotPt_V4
    0U,	// LDriw_abs_cdnPt_V4
    1U,	// LDriw_abs_set_V4
    1U,	// LDriw_cNotPt
    1U,	// LDriw_cPt
    1U,	// LDriw_cdnNotPt
    1U,	// LDriw_cdnPt
    0U,	// LDriw_f
    1U,	// LDriw_ind_lo_V4
    9U,	// LDriw_indexed
    128U,	// LDriw_indexed_cNotPt
    128U,	// LDriw_indexed_cPt
    128U,	// LDriw_indexed_cdnNotPt
    128U,	// LDriw_indexed_cdnPt
    33U,	// LDriw_indexed_f
    29U,	// LDriw_indexed_shl_V4
    132U,	// LDriw_indexed_shl_cNotPt_V4
    132U,	// LDriw_indexed_shl_cPt_V4
    132U,	// LDriw_indexed_shl_cdnNotPt_V4
    132U,	// LDriw_indexed_shl_cdnPt_V4
    0U,	// LDriw_pred
    0U,	// LDub_GP_V4
    0U,	// LDub_GP_cNotPt_V4
    0U,	// LDub_GP_cPt_V4
    0U,	// LDub_GP_cdnNotPt_V4
    0U,	// LDub_GP_cdnPt_V4
    0U,	// LDuh_GP_V4
    0U,	// LDuh_GP_cNotPt_V4
    0U,	// LDuh_GP_cPt_V4
    0U,	// LDuh_GP_cdnNotPt_V4
    0U,	// LDuh_GP_cdnPt_V4
    0U,	// LDw_GP_V4
    0U,	// LDw_GP_cNotPt_V4
    0U,	// LDw_GP_cPt_V4
    0U,	// LDw_GP_cdnNotPt_V4
    0U,	// LDw_GP_cdnPt_V4
    0U,	// LO
    0U,	// LOOP0_i
    0U,	// LOOP0_r
    0U,	// LO_jt
    0U,	// LO_label
    0U,	// LOi
    0U,	// LSL_ADD_rr
    0U,	// LSL_ADDd_rr
    0U,	// LSL_AND_rr
    0U,	// LSL_ANDd_rr
    0U,	// LSL_OR_rr
    0U,	// LSL_ORd_rr
    0U,	// LSL_SUB_rr
    0U,	// LSL_SUBd_rr
    0U,	// LSL_rr
    0U,	// LSLd
    0U,	// LSLd_rr_xor_V4
    0U,	// LSLi_V4
    28U,	// LSR_ADD_ri
    28U,	// LSR_ADD_rr
    28U,	// LSR_ADDd_ri
    28U,	// LSR_ADDd_rr
    28U,	// LSR_AND_ri
    28U,	// LSR_AND_rr
    28U,	// LSR_ANDd_ri
    28U,	// LSR_ANDd_rr
    28U,	// LSR_OR_ri
    28U,	// LSR_OR_rr
    28U,	// LSR_ORd_ri
    28U,	// LSR_ORd_rr
    28U,	// LSR_SUB_ri
    28U,	// LSR_SUB_rr
    28U,	// LSR_SUBd_ri
    28U,	// LSR_SUBd_rr
    28U,	// LSR_XOR_ri
    28U,	// LSR_XORd_ri
    28U,	// LSR_ri
    28U,	// LSR_rr
    28U,	// LSRd_ri
    28U,	// LSRd_rr
    28U,	// LSRd_rr_xor_V4
    0U,	// MASK_p
    136U,	// MAXUd_rr
    136U,	// MAXUw_rr
    136U,	// MAXd_rr
    136U,	// MAXw_dd
    136U,	// MAXw_rr
    136U,	// MINUd_rr
    136U,	// MINUw_rr
    136U,	// MINd_rr
    136U,	// MINw_dd
    136U,	// MINw_rr
    28U,	// MPY
    28U,	// MPY64
    28U,	// MPY64_acc
    28U,	// MPY64_sub
    28U,	// MPYI
    0U,	// MPYI_acc_ri
    28U,	// MPYI_acc_rr
    28U,	// MPYI_ri
    0U,	// MPYI_rin
    0U,	// MPYI_riu
    0U,	// MPYI_sub_ri
    28U,	// MPYU
    28U,	// MPYU64
    28U,	// MPYU64_acc
    28U,	// MPYU64_sub
    28U,	// MPY_trsext
    1300U,	// MUX_ii
    24U,	// MUX_ir
    12820U,	// MUX_ri
    24U,	// MUX_rr
    1U,	// MemOPb_ADDi_V4
    1U,	// MemOPb_ADDr_V4
    1U,	// MemOPb_ANDr_V4
    1U,	// MemOPb_CLRBITi_V4
    1U,	// MemOPb_ORr_V4
    1U,	// MemOPb_SETBITi_V4
    1U,	// MemOPb_SUBi_V4
    1U,	// MemOPb_SUBr_V4
    1U,	// MemOPh_ADDi_V4
    1U,	// MemOPh_ADDr_V4
    1U,	// MemOPh_ANDr_V4
    1U,	// MemOPh_CLRBITi_V4
    1U,	// MemOPh_ORr_V4
    1U,	// MemOPh_SETBITi_V4
    1U,	// MemOPh_SUBi_V4
    1U,	// MemOPh_SUBr_V4
    1U,	// MemOPw_ADDi_V4
    1U,	// MemOPw_ADDr_V4
    1U,	// MemOPw_ANDr_V4
    1U,	// MemOPw_CLRBITi_V4
    1U,	// MemOPw_ORr_V4
    1U,	// MemOPw_SETBITi_V4
    1U,	// MemOPw_SUBi_V4
    1U,	// MemOPw_SUBr_V4
    0U,	// NOP
    0U,	// NOT_p
    0U,	// NOT_rr64
    0U,	// NTSTBIT_ri
    0U,	// NTSTBIT_rr
    28U,	// OR_pp
    28U,	// OR_ri
    28U,	// OR_rr
    28U,	// OR_rr64
    0U,	// OR_rr_cNotPt
    0U,	// OR_rr_cPt
    0U,	// OR_rr_cdnNotPt
    0U,	// OR_rr_cdnPt
    28U,	// ORd_NOTd_V4
    0U,	// ORi_ASLri_V4
    0U,	// ORi_LSRri_V4
    28U,	// ORr_ANDr_NOTr_V4
    0U,	// ORr_ANDri2_V4
    268U,	// ORr_ANDri_V4
    28U,	// ORr_ANDrr_V4
    0U,	// ORr_ORri_V4
    28U,	// ORr_ORrr_V4
    0U,	// ORr_XORrr_V4
    17U,	// POST_LDrib
    140U,	// POST_LDrib_cNotPt
    140U,	// POST_LDrib_cPt
    140U,	// POST_LDrib_cdnNotPt_V4
    140U,	// POST_LDrib_cdnPt_V4
    17U,	// POST_LDrid
    140U,	// POST_LDrid_cNotPt
    140U,	// POST_LDrid_cPt
    140U,	// POST_LDrid_cdnNotPt_V4
    140U,	// POST_LDrid_cdnPt_V4
    17U,	// POST_LDrih
    140U,	// POST_LDrih_cNotPt
    140U,	// POST_LDrih_cPt
    140U,	// POST_LDrih_cdnNotPt_V4
    140U,	// POST_LDrih_cdnPt_V4
    17U,	// POST_LDriub
    140U,	// POST_LDriub_cNotPt
    140U,	// POST_LDriub_cPt
    140U,	// POST_LDriub_cdnNotPt_V4
    140U,	// POST_LDriub_cdnPt_V4
    17U,	// POST_LDriuh
    140U,	// POST_LDriuh_cNotPt
    140U,	// POST_LDriuh_cPt
    140U,	// POST_LDriuh_cdnNotPt_V4
    140U,	// POST_LDriuh_cdnPt_V4
    17U,	// POST_LDriw
    140U,	// POST_LDriw_cNotPt
    140U,	// POST_LDriw_cPt
    140U,	// POST_LDriw_cdnNotPt_V4
    140U,	// POST_LDriw_cdnPt_V4
    0U,	// POST_STbri
    59409U,	// POST_STbri_cNotPt
    75793U,	// POST_STbri_cNotPt_nv_V4
    59409U,	// POST_STbri_cPt
    75793U,	// POST_STbri_cPt_nv_V4
    59409U,	// POST_STbri_cdnNotPt_V4
    75793U,	// POST_STbri_cdnNotPt_nv_V4
    59409U,	// POST_STbri_cdnPt_V4
    75793U,	// POST_STbri_cdnPt_nv_V4
    0U,	// POST_STbri_nv_V4
    0U,	// POST_STdri
    59409U,	// POST_STdri_cNotPt
    59409U,	// POST_STdri_cPt
    59409U,	// POST_STdri_cdnNotPt_V4
    59409U,	// POST_STdri_cdnPt_V4
    0U,	// POST_SThri
    59409U,	// POST_SThri_cNotPt
    75793U,	// POST_SThri_cNotPt_nv_V4
    59409U,	// POST_SThri_cPt
    75793U,	// POST_SThri_cPt_nv_V4
    59409U,	// POST_SThri_cdnNotPt_V4
    75793U,	// POST_SThri_cdnNotPt_nv_V4
    59409U,	// POST_SThri_cdnPt_V4
    75793U,	// POST_SThri_cdnPt_nv_V4
    0U,	// POST_SThri_nv_V4
    0U,	// POST_STwri
    59409U,	// POST_STwri_cNotPt
    75793U,	// POST_STwri_cNotPt_nv_V4
    59409U,	// POST_STwri_cPt
    75793U,	// POST_STwri_cPt_nv_V4
    59409U,	// POST_STwri_cdnNotPt_V4
    75793U,	// POST_STwri_cdnNotPt_nv_V4
    59409U,	// POST_STwri_cdnPt_V4
    75793U,	// POST_STwri_cdnPt_nv_V4
    0U,	// POST_STwri_nv_V4
    0U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4
    0U,	// RESTORE_DEALLOC_RET_JMP_V4
    0U,	// SAVE_REGISTERS_CALL_V4
    28U,	// SETBIT
    28U,	// SETBIT_31
    0U,	// SI_to_SXTHI_asrh
    0U,	// STb_GP_V4
    0U,	// STb_GP_cNotPt_V4
    0U,	// STb_GP_cNotPt_nv_V4
    0U,	// STb_GP_cPt_V4
    0U,	// STb_GP_cPt_nv_V4
    0U,	// STb_GP_cdnNotPt_V4
    0U,	// STb_GP_cdnNotPt_nv_V4
    0U,	// STb_GP_cdnPt_V4
    0U,	// STb_GP_cdnPt_nv_V4
    0U,	// STb_GP_nv_V4
    0U,	// STd_GP_V4
    0U,	// STd_GP_cNotPt_V4
    0U,	// STd_GP_cPt_V4
    0U,	// STd_GP_cdnNotPt_V4
    0U,	// STd_GP_cdnPt_V4
    0U,	// STh_GP_V4
    0U,	// STh_GP_cNotPt_V4
    0U,	// STh_GP_cNotPt_nv_V4
    0U,	// STh_GP_cPt_V4
    0U,	// STh_GP_cPt_nv_V4
    0U,	// STh_GP_cdnNotPt_V4
    0U,	// STh_GP_cdnNotPt_nv_V4
    0U,	// STh_GP_cdnPt_V4
    0U,	// STh_GP_cdnPt_nv_V4
    0U,	// STh_GP_nv_V4
    0U,	// STrib
    0U,	// STrib_abs_V4
    0U,	// STrib_abs_cNotPt_V4
    0U,	// STrib_abs_cNotPt_nv_V4
    0U,	// STrib_abs_cPt_V4
    0U,	// STrib_abs_cPt_nv_V4
    0U,	// STrib_abs_cdnNotPt_V4
    0U,	// STrib_abs_cdnNotPt_nv_V4
    0U,	// STrib_abs_cdnPt_V4
    0U,	// STrib_abs_cdnPt_nv_V4
    0U,	// STrib_abs_nv_V4
    0U,	// STrib_abs_set_V4
    2309U,	// STrib_cNotPt
    2565U,	// STrib_cNotPt_nv_V4
    2309U,	// STrib_cPt
    2565U,	// STrib_cPt_nv_V4
    2309U,	// STrib_cdnNotPt_V4
    2565U,	// STrib_cdnNotPt_nv_V4
    2309U,	// STrib_cdnPt_V4
    2565U,	// STrib_cdnPt_nv_V4
    2U,	// STrib_imm_V4
    2849U,	// STrib_imm_cNotPt_V4
    2849U,	// STrib_imm_cPt_V4
    2849U,	// STrib_imm_cdnNotPt_V4
    2849U,	// STrib_imm_cdnPt_V4
    2305U,	// STrib_indexed
    55305U,	// STrib_indexed_cNotPt
    71689U,	// STrib_indexed_cNotPt_nv_V4
    55305U,	// STrib_indexed_cPt
    71689U,	// STrib_indexed_cPt_nv_V4
    55305U,	// STrib_indexed_cdnNotPt_V4
    71689U,	// STrib_indexed_cdnNotPt_nv_V4
    55305U,	// STrib_indexed_cdnPt_V4
    71689U,	// STrib_indexed_cdnPt_nv_V4
    2561U,	// STrib_indexed_nv_V4
    0U,	// STrib_indexed_shl_V4
    2449U,	// STrib_indexed_shl_cNotPt_V4
    2705U,	// STrib_indexed_shl_cNotPt_nv_V4
    2449U,	// STrib_indexed_shl_cPt_V4
    2705U,	// STrib_indexed_shl_cPt_nv_V4
    2449U,	// STrib_indexed_shl_cdnNotPt_V4
    2705U,	// STrib_indexed_shl_cdnNotPt_nv_V4
    2449U,	// STrib_indexed_shl_cdnPt_V4
    2705U,	// STrib_indexed_shl_cdnPt_nv_V4
    0U,	// STrib_indexed_shl_nv_V4
    0U,	// STrib_nv_V4
    0U,	// STrib_shl_V4
    0U,	// STrib_shl_nv_V4
    0U,	// STrid
    0U,	// STrid_abs_V4
    0U,	// STrid_abs_cNotPt_V4
    0U,	// STrid_abs_cPt_V4
    0U,	// STrid_abs_cdnNotPt_V4
    0U,	// STrid_abs_cdnPt_V4
    0U,	// STrid_abs_set_V4
    2309U,	// STrid_cNotPt
    2309U,	// STrid_cPt
    2309U,	// STrid_cdnNotPt_V4
    2309U,	// STrid_cdnPt_V4
    0U,	// STrid_f
    2305U,	// STrid_indexed
    55305U,	// STrid_indexed_cNotPt
    55305U,	// STrid_indexed_cPt
    55305U,	// STrid_indexed_cdnNotPt_V4
    55305U,	// STrid_indexed_cdnPt_V4
    2305U,	// STrid_indexed_f
    0U,	// STrid_indexed_shl_V4
    2449U,	// STrid_indexed_shl_cNotPt_V4
    2449U,	// STrid_indexed_shl_cPt_V4
    2449U,	// STrid_indexed_shl_cdnNotPt_V4
    2449U,	// STrid_indexed_shl_cdnPt_V4
    0U,	// STrid_shl_V4
    0U,	// STrih
    0U,	// STrih_abs_V4
    0U,	// STrih_abs_cNotPt_V4
    0U,	// STrih_abs_cNotPt_nv_V4
    0U,	// STrih_abs_cPt_V4
    0U,	// STrih_abs_cPt_nv_V4
    0U,	// STrih_abs_cdnNotPt_V4
    0U,	// STrih_abs_cdnNotPt_nv_V4
    0U,	// STrih_abs_cdnPt_V4
    0U,	// STrih_abs_cdnPt_nv_V4
    0U,	// STrih_abs_nv_V4
    0U,	// STrih_abs_set_V4
    2309U,	// STrih_cNotPt
    2565U,	// STrih_cNotPt_nv_V4
    2309U,	// STrih_cPt
    2565U,	// STrih_cPt_nv_V4
    2309U,	// STrih_cdnNotPt_V4
    2565U,	// STrih_cdnNotPt_nv_V4
    2309U,	// STrih_cdnPt_V4
    2565U,	// STrih_cdnPt_nv_V4
    2U,	// STrih_imm_V4
    2849U,	// STrih_imm_cNotPt_V4
    2849U,	// STrih_imm_cPt_V4
    2849U,	// STrih_imm_cdnNotPt_V4
    2849U,	// STrih_imm_cdnPt_V4
    2305U,	// STrih_indexed
    55305U,	// STrih_indexed_cNotPt
    71689U,	// STrih_indexed_cNotPt_nv_V4
    55305U,	// STrih_indexed_cPt
    71689U,	// STrih_indexed_cPt_nv_V4
    55305U,	// STrih_indexed_cdnNotPt_V4
    71689U,	// STrih_indexed_cdnNotPt_nv_V4
    55305U,	// STrih_indexed_cdnPt_V4
    71689U,	// STrih_indexed_cdnPt_nv_V4
    2561U,	// STrih_indexed_nv_V4
    0U,	// STrih_indexed_shl_V4
    2449U,	// STrih_indexed_shl_cNotPt_V4
    2705U,	// STrih_indexed_shl_cNotPt_nv_V4
    2449U,	// STrih_indexed_shl_cPt_V4
    2705U,	// STrih_indexed_shl_cPt_nv_V4
    2449U,	// STrih_indexed_shl_cdnNotPt_V4
    2705U,	// STrih_indexed_shl_cdnNotPt_nv_V4
    2449U,	// STrih_indexed_shl_cdnPt_V4
    2705U,	// STrih_indexed_shl_cdnPt_nv_V4
    0U,	// STrih_indexed_shl_nv_V4
    0U,	// STrih_nv_V4
    2U,	// STrih_offset_ext_V4
    0U,	// STrih_shl_V4
    0U,	// STrih_shl_nv_V4
    0U,	// STriw
    0U,	// STriw_abs_V4
    0U,	// STriw_abs_cNotPt_V4
    0U,	// STriw_abs_cNotPt_nv_V4
    0U,	// STriw_abs_cPt_V4
    0U,	// STriw_abs_cPt_nv_V4
    0U,	// STriw_abs_cdnNotPt_V4
    0U,	// STriw_abs_cdnNotPt_nv_V4
    0U,	// STriw_abs_cdnPt_V4
    0U,	// STriw_abs_cdnPt_nv_V4
    0U,	// STriw_abs_nv_V4
    0U,	// STriw_abs_set_V4
    2309U,	// STriw_cNotPt
    2565U,	// STriw_cNotPt_nv_V4
    2309U,	// STriw_cPt
    2565U,	// STriw_cPt_nv_V4
    2309U,	// STriw_cdnNotPt_V4
    2565U,	// STriw_cdnNotPt_nv_V4
    2309U,	// STriw_cdnPt_V4
    2565U,	// STriw_cdnPt_nv_V4
    0U,	// STriw_f
    2U,	// STriw_imm_V4
    2849U,	// STriw_imm_cNotPt_V4
    2849U,	// STriw_imm_cPt_V4
    2849U,	// STriw_imm_cdnNotPt_V4
    2849U,	// STriw_imm_cdnPt_V4
    2305U,	// STriw_indexed
    55305U,	// STriw_indexed_cNotPt
    71689U,	// STriw_indexed_cNotPt_nv_V4
    55305U,	// STriw_indexed_cPt
    71689U,	// STriw_indexed_cPt_nv_V4
    55305U,	// STriw_indexed_cdnNotPt_V4
    71689U,	// STriw_indexed_cdnNotPt_nv_V4
    55305U,	// STriw_indexed_cdnPt_V4
    71689U,	// STriw_indexed_cdnPt_nv_V4
    2305U,	// STriw_indexed_f
    2561U,	// STriw_indexed_nv_V4
    0U,	// STriw_indexed_shl_V4
    2449U,	// STriw_indexed_shl_cNotPt_V4
    2705U,	// STriw_indexed_shl_cNotPt_nv_V4
    2449U,	// STriw_indexed_shl_cPt_V4
    2705U,	// STriw_indexed_shl_cPt_nv_V4
    2449U,	// STriw_indexed_shl_cdnNotPt_V4
    2705U,	// STriw_indexed_shl_cdnNotPt_nv_V4
    2449U,	// STriw_indexed_shl_cdnPt_V4
    2705U,	// STriw_indexed_shl_cdnPt_nv_V4
    0U,	// STriw_indexed_shl_nv_V4
    0U,	// STriw_nv_V4
    2U,	// STriw_offset_ext_V4
    0U,	// STriw_pred
    0U,	// STriw_pred_V4
    0U,	// STriw_shl_V4
    0U,	// STriw_shl_nv_V4
    0U,	// STw_GP_V4
    0U,	// STw_GP_cNotPt_V4
    0U,	// STw_GP_cNotPt_nv_V4
    0U,	// STw_GP_cPt_V4
    0U,	// STw_GP_cPt_nv_V4
    0U,	// STw_GP_cdnNotPt_V4
    0U,	// STw_GP_cdnNotPt_nv_V4
    0U,	// STw_GP_cdnPt_V4
    0U,	// STw_GP_cdnPt_nv_V4
    0U,	// STw_GP_nv_V4
    28U,	// SUB64_rr
    0U,	// SUB_ri
    28U,	// SUB_rr
    0U,	// SUB_rr_cNotPt
    0U,	// SUB_rr_cPt
    0U,	// SUB_rr_cdnNotPt
    0U,	// SUB_rr_cdnPt
    2U,	// SUBi_ASLri_V4
    2U,	// SUBi_LSRri_V4
    0U,	// SUBri_acc
    28U,	// SUBrr_acc
    0U,	// SXTB
    0U,	// SXTB_cNotPt_V4
    0U,	// SXTB_cPt_V4
    0U,	// SXTB_cdnNotPt_V4
    0U,	// SXTB_cdnPt_V4
    0U,	// SXTH
    0U,	// SXTH_cNotPt_V4
    0U,	// SXTH_cPt_V4
    0U,	// SXTH_cdnNotPt_V4
    0U,	// SXTH_cdnPt_V4
    0U,	// SXTW
    0U,	// TCRETURNR
    0U,	// TCRETURNtext
    0U,	// TCRETURNtg
    0U,	// TFCR
    0U,	// TFR
    0U,	// TFR64
    0U,	// TFR64_cNotPt
    0U,	// TFR64_cPt
    0U,	// TFR64_cdnNotPt
    0U,	// TFR64_cdnPt
    0U,	// TFRI
    0U,	// TFRI64
    0U,	// TFRI_V4
    148U,	// TFRI_cNotPt
    148U,	// TFRI_cNotPt_V4
    0U,	// TFRI_cNotPt_f
    148U,	// TFRI_cPt
    148U,	// TFRI_cPt_V4
    148U,	// TFRI_cPt_f
    148U,	// TFRI_cdnNotPt
    148U,	// TFRI_cdnNotPt_V4
    148U,	// TFRI_cdnPt
    148U,	// TFRI_cdnPt_V4
    0U,	// TFRI_f
    0U,	// TFR_FI
    2U,	// TFR_FI_immext_V4
    0U,	// TFR_PdFalse
    0U,	// TFR_PdRs
    0U,	// TFR_RsPd
    0U,	// TFR_cNotPt
    0U,	// TFR_cPt
    0U,	// TFR_cdnNotPt
    0U,	// TFR_cdnPt
    0U,	// TFR_condset_ii
    0U,	// TFR_condset_ii_f
    0U,	// TFR_condset_ir
    0U,	// TFR_condset_ir_f
    0U,	// TFR_condset_ri
    0U,	// TFR_condset_ri_f
    0U,	// TFR_condset_rr
    0U,	// TFR_condset_rr64_f
    0U,	// TFR_condset_rr_f
    28U,	// TOGBIT
    28U,	// TOGBIT_31
    0U,	// TSTBIT0_f_Jumpnv_nt_V4
    0U,	// TSTBIT0_f_Jumpnv_t_V4
    0U,	// TSTBIT0_t_Jumpnv_nt_V4
    0U,	// TSTBIT0_t_Jumpnv_t_V4
    28U,	// TSTBIT_ri
    28U,	// TSTBIT_rr
    28U,	// V4_A4_rcmpeq
    28U,	// V4_A4_rcmpeqi
    28U,	// V4_A4_rcmpneq
    28U,	// V4_A4_rcmpneqi
    28U,	// VALIGN_rrp
    0U,	// VITPACK_pp
    0U,	// VMUX_prr64
    28U,	// VSPLICE_rrp
    0U,	// XOR_pp
    0U,	// XOR_rr
    0U,	// XOR_rr64
    0U,	// XOR_rr_cNotPt
    0U,	// XOR_rr_cPt
    0U,	// XOR_rr_cdnNotPt
    0U,	// XOR_rr_cdnPt
    0U,	// XORd_XORdd
    28U,	// XORr_ANDr_NOTr_V4
    28U,	// XORr_ANDrr_V4
    0U,	// XORr_ORrr_V4
    0U,	// XORr_XORrr_V4
    0U,	// ZXTB
    0U,	// ZXTB_cNotPt_V4
    0U,	// ZXTB_cPt_V4
    0U,	// ZXTB_cdnNotPt_V4
    0U,	// ZXTB_cdnPt_V4
    0U,	// ZXTH
    0U,	// ZXTH_cNotPt_V4
    0U,	// ZXTH_cPt_V4
    0U,	// ZXTH_cdnNotPt_V4
    0U,	// ZXTH_cdnPt_V4
    0U,	// fADD64_rr
    0U,	// fADD_rr
    0U,	// fMUL64_rr
    0U,	// fMUL_rr
    0U,	// fSUB64_rr
    0U,	// fSUB_rr
    0U
  };

  static const char AsmStrs[] = {
  /* 0 */ 'c', 'a', 'l', 'l', 32, 0,
  /* 6 */ 'j', 'u', 'm', 'p', 32, 0,
  /* 12 */ 'c', 'a', 'l', 'l', 'r', 32, 0,
  /* 19 */ 'j', 'u', 'm', 'p', 'r', 32, 0,
  /* 26 */ 'i', 'f', 32, '(', '!', 0,
  /* 32 */ 'i', 'f', '(', '!', 0,
  /* 37 */ 'm', 'e', 'm', 'b', '(', '#', '#', 0,
  /* 45 */ 'm', 'e', 'm', 'd', '(', '#', '#', 0,
  /* 53 */ 'm', 'e', 'm', 'h', '(', '#', '#', 0,
  /* 61 */ 'm', 'e', 'm', 'w', '(', '#', '#', 0,
  /* 69 */ 'm', 'e', 'm', 'b', '(', '#', 0,
  /* 76 */ 'm', 'e', 'm', 'd', '(', '#', 0,
  /* 83 */ 'a', 'l', 'l', 'o', 'c', 'f', 'r', 'a', 'm', 'e', '(', '#', 0,
  /* 96 */ 'm', 'e', 'm', 'h', '(', '#', 0,
  /* 103 */ 'i', 'm', 'm', 'e', 'x', 't', '(', '#', 0,
  /* 112 */ 'm', 'e', 'm', 'w', '(', '#', 0,
  /* 119 */ 'i', 'f', 32, '(', 0,
  /* 124 */ 'l', 'o', 'o', 'p', '0', '(', 0,
  /* 131 */ 'm', 'e', 'm', 'b', '(', 0,
  /* 137 */ 'm', 'e', 'm', 'd', '(', 0,
  /* 143 */ 'i', 'f', '(', 0,
  /* 147 */ 'm', 'e', 'm', 'h', '(', 0,
  /* 153 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 166 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 178 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 191 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 203 */ 'i', 'f', 32, '(', '!', 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 216 */ 'i', 'f', 32, '(', 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 228 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 242 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 255 */ 'm', 'e', 'm', 'w', '(', 0,
  /* 261 */ ':', 'e', 'n', 'd', 'l', 'o', 'o', 'p', '0', 0,
  /* 271 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 284 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 291 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 301 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 316 */ 'S', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'e', 'v', 'e', 'r', 32, 'b', 'e', 32, 'e', 'm', 'i', 't', 't', 'e', 'd', 0,
  /* 340 */ 'd', 'e', 'a', 'l', 'l', 'o', 'c', 'f', 'r', 'a', 'm', 'e', 0,
  /* 353 */ 'd', 'e', 'a', 'l', 'l', 'o', 'c', '_', 'r', 'e', 't', 'u', 'r', 'n', 0,
  /* 368 */ 'n', 'o', 'p', 0,
  /* 372 */ 'b', 'a', 'r', 'r', 'i', 'e', 'r', 0,
  /* 380 */ 'E', 'r', 'r', 'o', 'r', ';', 32, 's', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'o', 't', 32, 'e', 'm', 'i', 't', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits1 = OpInfo[MI->getOpcode()];
  uint64_t Bits2 = OpInfo2[MI->getOpcode()];
  uint64_t Bits = (Bits2 << 32) | Bits1;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 511)-1;


  // Fragment 0 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 9) & 7) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, ADJCALLSTACKDOWN, ADJ...
    return;
    break;
  case 1:
    // A2_add, ADD64_rr, ADDASL, ADD_ri, ADD_rr, ADDi_ASLri_V4, ADDi_LSRri_V4...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // A2_paddf, A2_paddfnew, A2_paddt, A2_paddtnew, ADD_ri_cNotPt, ADD_ri_cP...
    printOperand(MI, 1, O); 
    break;
  case 3:
    // IMMEXT_g, STb_GP_V4, STd_GP_V4, STh_GP_V4, STw_GP_V4
    printGlobalOperand(MI, 0, O); 
    break;
  case 4:
    // IMMEXT_i, STb_GP_nv_V4, STh_GP_nv_V4, STrib_abs_V4, STrib_abs_nv_V4, S...
    printImmOperand(MI, 0, O); 
    break;
  case 5:
    // POST_LDrib_cNotPt, POST_LDrib_cPt, POST_LDrib_cdnNotPt_V4, POST_LDrib_...
    printOperand(MI, 2, O); 
    break;
  case 6:
    // STrib, STrib_nv_V4, STrid, STrid_f, STrih, STrih_nv_V4, STriw, STriw_f...
    printMEMriOperand(MI, 0, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  }


  // Fragment 1 encoded into 9 bits for 376 unique commands.
  switch ((Bits >> 12) & 511) {
  default:   // unreachable.
  case 0:
    // A2_add, ADD64_rr, ADD_ri, ADD_rr, ADDr_ADDri_V4, ADDr_MPYir_V4, ADDr_M...
    O << " = add("; 
    break;
  case 1:
    // A2_paddf, A2_paddt, ADD_ri_cNotPt, ADD_ri_cPt, ADD_rr_cNotPt, ADD_rr_c...
    O << ") "; 
    printOperand(MI, 0, O); 
    break;
  case 2:
    // A2_paddfnew, A2_paddtnew, ADD_ri_cdnNotPt, ADD_ri_cdnPt, ADD_rr_cdnNot...
    O << ".new) "; 
    printOperand(MI, 0, O); 
    break;
  case 3:
    // ADDASL, HEXAGON_S2_addasl_rrri
    O << " = addasl("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 4:
    // ADDi_ASLri_V4, ADDi_LSRri_V4, ADDi_MPYri_V4, ADDi_MPYrr_V4
    O << " = add(#"; 
    printExtOperand(MI, 1, O); 
    break;
  case 5:
    // ADDri_acc, ADDrr_acc, HEXAGON_M2_acci, HEXAGON_M2_accii
    O << " += add("; 
    printOperand(MI, 2, O); 
    break;
  case 6:
    // ALLOCFRAME, IMMEXT_b, IMMEXT_c, IMMEXT_g, IMMEXT_i
    O << ')'; 
    return;
    break;
  case 7:
    // ALL_pp, HEXAGON_C2_all8
    O << " = all8("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 8:
    // AND_pnotp, AND_pp, AND_ri, AND_rr, AND_rr64, ANDd_NOTd_V4, HEXAGON_A2_...
    O << " = and("; 
    printOperand(MI, 1, O); 
    break;
  case 9:
    // ANDi_ASLri_V4, ANDi_LSRri_V4
    O << " = and(#"; 
    printExtOperand(MI, 1, O); 
    break;
  case 10:
    // ANDr_ANDr_NOTr_V4, ANDr_ANDrr_V4, HEXAGON_M4_and_and, HEXAGON_M4_and_a...
    O << " &= and("; 
    printOperand(MI, 2, O); 
    break;
  case 11:
    // ANDr_ORrr_V4, HEXAGON_M4_and_or
    O << " &= or("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 12:
    // ANDr_XORrr_V4, HEXAGON_M4_and_xor
    O << " &= xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 13:
    // ANY_pp, HEXAGON_C2_any8
    O << " = any8("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 14:
    // ARGEXTEND, HEXAGON_A2_tfr, HEXAGON_A2_tfrp, HEXAGON_C2_pxfer_map, HEXA...
    O << " = "; 
    printOperand(MI, 1, O); 
    break;
  case 15:
    // ASL, ASL_rr, ASLd, ASLd_ri, HEXAGON_S2_asl_i_p, HEXAGON_S2_asl_i_r, HE...
    O << " = asl("; 
    printOperand(MI, 1, O); 
    break;
  case 16:
    // ASLH, HEXAGON_A2_aslh
    O << " = aslh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 17:
    // ASL_ADD_ri, ASL_ADD_rr, ASL_ADDd_ri, ASL_ADDd_rr, HEXAGON_S2_asl_i_p_a...
    O << " += asl("; 
    printOperand(MI, 2, O); 
    break;
  case 18:
    // ASL_AND_ri, ASL_AND_rr, ASL_ANDd_ri, ASL_ANDd_rr, HEXAGON_S2_asl_i_p_a...
    O << " &= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 19:
    // ASL_OR_ri, ASL_OR_rr, ASL_ORd_ri, ASL_ORd_rr, HEXAGON_S2_asl_i_p_or, H...
    O << " |= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 20:
    // ASL_SUB_ri, ASL_SUB_rr, ASL_SUBd_ri, ASL_SUBd_rr, HEXAGON_S2_asl_i_p_n...
    O << " -= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 21:
    // ASL_XOR_ri, ASL_XORd_ri, ASLd_rr_xor_V4, HEXAGON_S2_asl_i_p_xacc, HEXA...
    O << " ^= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 22:
    // ASRH, HEXAGON_A2_asrh, SI_to_SXTHI_asrh
    O << " = asrh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 23:
    // ASR_ADD_ri, ASR_ADD_rr, ASR_ADDd_ri, ASR_ADDd_rr, HEXAGON_S2_asr_i_p_a...
    O << " += asr("; 
    printOperand(MI, 2, O); 
    break;
  case 24:
    // ASR_AND_ri, ASR_AND_rr, ASR_ANDd_ri, ASR_ANDd_rr, HEXAGON_S2_asr_i_p_a...
    O << " &= asr("; 
    printOperand(MI, 2, O); 
    break;
  case 25:
    // ASR_OR_ri, ASR_OR_rr, ASR_ORd_ri, ASR_ORd_rr, HEXAGON_S2_asr_i_p_or, H...
    O << " |= asr("; 
    printOperand(MI, 2, O); 
    break;
  case 26:
    // ASR_SUB_ri, ASR_SUB_rr, ASR_SUBd_ri, ASR_SUBd_rr, HEXAGON_S2_asr_i_p_n...
    O << " -= asr("; 
    printOperand(MI, 2, O); 
    break;
  case 27:
    // ASR_ri, ASR_rr, ASRd_ri, ASRd_rr, HEXAGON_S2_asr_i_p, HEXAGON_S2_asr_i...
    O << " = asr("; 
    printOperand(MI, 1, O); 
    break;
  case 28:
    // ASRd_rr_xor_V4
    O << " ^= asr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 29:
    // C4_cmpltei, CMPnotGT_rr, Hexagon_C4_cmplte, Hexagon_C4_cmpltei
    O << " = !cmp.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 30:
    // C4_cmplteui, CMPnotGTU_rr, Hexagon_C4_cmplteu
    O << " = !cmp.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 31:
    // C4_cmpneqi, CMPnotEQ_rr, Hexagon_A4_rcmpneq, Hexagon_A4_rcmpneqi, V4_A...
    O << " = !cmp.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 32:
    // CALL, CALLR, CALLRv3, CALLv3, EH_RETURN_JMPR, JMP, JMPR, JMPret, RESTO...
    return;
    break;
  case 33:
    // CLRBIT, CLRBIT_31, HEXAGON_S2_clrbit_i, HEXAGON_S2_clrbit_r
    O << " = clrbit("; 
    printOperand(MI, 1, O); 
    break;
  case 34:
    // CMPEHexagon4rr, CMPEQri, CMPEQrr, HEXAGON_C2_cmpeq, HEXAGON_C2_cmpeqi,...
    O << " = cmp.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 35:
    // CMPEQn1_f_Jumpnv_nt_V4, CMPEQn1_t_Jumpnv_nt_V4, CMPGTn1_f_Jumpnv_nt_V4...
    O << ".new, #-1)) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 36:
    // CMPEQn1_f_Jumpnv_t_V4, CMPEQn1_t_Jumpnv_t_V4, CMPGTn1_f_Jumpnv_t_V4, C...
    O << ".new, #-1)) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 37:
    // CMPEQri_f_Jumpnv_nt_V4, CMPEQri_f_Jumpnv_t_V4, CMPEQri_t_Jumpnv_nt_V4,...
    O << ".new, #"; 
    printImmOperand(MI, 1, O); 
    break;
  case 38:
    // CMPEQrr_f_Jumpnv_nt_V4, CMPEQrr_f_Jumpnv_t_V4, CMPEQrr_t_Jumpnv_nt_V4,...
    O << ".new, "; 
    printOperand(MI, 1, O); 
    break;
  case 39:
    // CMPGT64rr, CMPGTri, CMPGTrr, HEXAGON_C2_cmpgt, HEXAGON_C2_cmpgti, HEXA...
    O << " = cmp.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 40:
    // CMPGTU64rr, CMPGTUri, CMPGTUrr, HEXAGON_C2_cmpgtu, HEXAGON_C2_cmpgtui,...
    O << " = cmp.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 41:
    // CMPLTUrr_f_Jumpnv_nt_V4, CMPLTUrr_f_Jumpnv_t_V4, CMPLTUrr_t_Jumpnv_nt_...
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 42:
    // CMPbEQri_V4, CMPbEQrr_sbsb_V4, CMPbEQrr_ubub_V4
    O << " = cmpb.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 43:
    // CMPbGTUri_V4, CMPbGTUrr_V4
    O << " = cmpb.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 44:
    // CMPbGTrr_V4
    O << " = cmpb.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 45:
    // CMPhEQri_V4, CMPhEQrr_shl_V4, CMPhEQrr_xor_V4
    O << " = cmph.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 46:
    // CMPhGTUri_V4, CMPhGTUrr_V4
    O << " = cmph.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 47:
    // CMPhGTrr_shl_V4
    O << " = cmph.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 48:
    // COMBINE_Ii, COMBINE_Ir_V4, COMBINE_iI_V4, COMBINE_ii, HEXAGON_A2_combi...
    O << " = combine(#"; 
    break;
  case 49:
    // COMBINE_rI_V4, COMBINE_rr, HEXAGON_A2_combine_hh, HEXAGON_A2_combine_h...
    O << " = combine("; 
    printOperand(MI, 1, O); 
    break;
  case 50:
    // CONST32, CONST32GP_set, CONST32_Float_Real, CONST32_Int_Real, CONST32_...
    O << " = CONST32(#"; 
    break;
  case 51:
    // CONST32_Label
    O << " = CONST32("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 52:
    // CONST64_Float_Real, CONST64_Int_Real
    O << " = CONST64(#"; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 53:
    // CONVERT_d2df, HEXAGON_F2_conv_d2df
    O << " = convert_d2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 54:
    // CONVERT_d2sf, HEXAGON_F2_conv_d2sf
    O << " = convert_d2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 55:
    // CONVERT_df2d, CONVERT_df2d_nchop, HEXAGON_F2_conv_df2d, HEXAGON_F2_con...
    O << " = convert_df2d("; 
    printOperand(MI, 1, O); 
    break;
  case 56:
    // CONVERT_df2sf, HEXAGON_F2_conv_df2sf
    O << " = convert_df2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 57:
    // CONVERT_df2ud, CONVERT_df2ud_nchop, HEXAGON_F2_conv_df2ud, HEXAGON_F2_...
    O << " = convert_df2ud("; 
    printOperand(MI, 1, O); 
    break;
  case 58:
    // CONVERT_df2uw, CONVERT_df2uw_nchop, HEXAGON_F2_conv_df2uw, HEXAGON_F2_...
    O << " = convert_df2uw("; 
    printOperand(MI, 1, O); 
    break;
  case 59:
    // CONVERT_df2w, CONVERT_df2w_nchop, HEXAGON_F2_conv_df2w, HEXAGON_F2_con...
    O << " = convert_df2w("; 
    printOperand(MI, 1, O); 
    break;
  case 60:
    // CONVERT_sf2d, CONVERT_sf2d_nchop, HEXAGON_F2_conv_sf2d, HEXAGON_F2_con...
    O << " = convert_sf2d("; 
    printOperand(MI, 1, O); 
    break;
  case 61:
    // CONVERT_sf2df, HEXAGON_F2_conv_sf2df
    O << " = convert_sf2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 62:
    // CONVERT_sf2ud, CONVERT_sf2ud_nchop, HEXAGON_F2_conv_sf2ud, HEXAGON_F2_...
    O << " = convert_sf2ud("; 
    printOperand(MI, 1, O); 
    break;
  case 63:
    // CONVERT_sf2uw, CONVERT_sf2uw_nchop, HEXAGON_F2_conv_sf2uw, HEXAGON_F2_...
    O << " = convert_sf2uw("; 
    printOperand(MI, 1, O); 
    break;
  case 64:
    // CONVERT_sf2w, CONVERT_sf2w_nchop, HEXAGON_F2_conv_sf2w, HEXAGON_F2_con...
    O << " = convert_sf2w("; 
    printOperand(MI, 1, O); 
    break;
  case 65:
    // CONVERT_ud2df, HEXAGON_F2_conv_ud2df
    O << " = convert_ud2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 66:
    // CONVERT_ud2sf, HEXAGON_F2_conv_ud2sf
    O << " = convert_ud2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 67:
    // CONVERT_uw2df, HEXAGON_F2_conv_uw2df
    O << " = convert_uw2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 68:
    // CONVERT_uw2sf, HEXAGON_F2_conv_uw2sf
    O << " = convert_uw2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 69:
    // CONVERT_w2df, HEXAGON_F2_conv_w2df
    O << " = convert_w2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 70:
    // CONVERT_w2sf, HEXAGON_F2_conv_w2sf
    O << " = convert_w2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 71:
    // CTLZ64_rr, CTLZ_rr, HEXAGON_S2_cl0, HEXAGON_S2_cl0p
    O << " = cl0("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 72:
    // CTTZ64_rr, CTTZ_rr, HEXAGON_S2_ct0
    O << " = ct0("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 73:
    // DEALLOC_RET_cNotPt_V4, DEALLOC_RET_cPt_V4
    O << ") dealloc_return"; 
    return;
    break;
  case 74:
    // DEALLOC_RET_cNotdnPnt_V4, DEALLOC_RET_cdnPnt_V4
    O << ".new) dealloc_return:nt"; 
    return;
    break;
  case 75:
    // DEALLOC_RET_cNotdnPt_V4, DEALLOC_RET_cdnPt_V4
    O << ".new) dealloc_return:t"; 
    return;
    break;
  case 76:
    // FCMPOEQ32_rr, FCMPUEQ32_rr, HEXAGON_F2_sfcmpeq
    O << " = sfcmp.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 77:
    // FCMPOEQ64_rr, FCMPUEQ64_rr, HEXAGON_F2_dfcmpeq
    O << " = dfcmp.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 78:
    // FCMPOGE32_rr, FCMPUGE32_rr, HEXAGON_F2_sfcmpge
    O << " = sfcmp.ge("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 79:
    // FCMPOGE64_rr, FCMPUGE64_rr, HEXAGON_F2_dfcmpge
    O << " = dfcmp.ge("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 80:
    // FCMPOGT32_rr, FCMPUGT32_rr, HEXAGON_F2_sfcmpgt
    O << " = sfcmp.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 81:
    // FCMPOGT64_rr, FCMPUGT64_rr, HEXAGON_F2_dfcmpgt
    O << " = dfcmp.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 82:
    // FMADD_dp, HEXAGON_F2_dffma, HEXAGON_F2_dffma_lib, HEXAGON_F2_dffma_sc
    O << " += dfmpy("; 
    break;
  case 83:
    // FMADD_sp, HEXAGON_F2_sffma, HEXAGON_F2_sffma_lib, HEXAGON_F2_sffma_sc
    O << " += sfmpy("; 
    break;
  case 84:
    // FMAX_dp, HEXAGON_F2_dfmax
    O << " = dfmax("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 85:
    // FMAX_sp, HEXAGON_F2_sfmax
    O << " = sfmax("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 86:
    // FMIN_dp, HEXAGON_F2_dfmin
    O << " = dfmin("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 87:
    // FMIN_sp, HEXAGON_F2_sfmin
    O << " = sfmin("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 88:
    // HEXAGON_A2_abs, HEXAGON_A2_absp, HEXAGON_A2_abssat
    O << " = abs("; 
    printOperand(MI, 1, O); 
    break;
  case 89:
    // HEXAGON_A2_max, Hexagon_A2_maxp, MAXd_rr, MAXw_dd, MAXw_rr
    O << " = max("; 
    break;
  case 90:
    // HEXAGON_A2_maxu, Hexagon_A2_maxup, MAXUd_rr, MAXUw_rr
    O << " = maxu("; 
    break;
  case 91:
    // HEXAGON_A2_min, MINd_rr, MINw_dd, MINw_rr
    O << " = min("; 
    break;
  case 92:
    // HEXAGON_A2_minu, MINUd_rr, MINUw_rr
    O << " = minu("; 
    break;
  case 93:
    // HEXAGON_A2_neg, HEXAGON_A2_negp, HEXAGON_A2_negsat
    O << " = neg("; 
    printOperand(MI, 1, O); 
    break;
  case 94:
    // HEXAGON_A2_not, HEXAGON_A2_notp, HEXAGON_C2_not, NOT_p, NOT_rr64
    O << " = not("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 95:
    // HEXAGON_A2_or, HEXAGON_A2_orir, HEXAGON_A2_orp, HEXAGON_C2_or, HEXAGON...
    O << " = or("; 
    printOperand(MI, 1, O); 
    break;
  case 96:
    // HEXAGON_A2_sat
    O << " = sat("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 97:
    // HEXAGON_A2_satb
    O << " = satb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 98:
    // HEXAGON_A2_sath
    O << " = sath("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 99:
    // HEXAGON_A2_satub
    O << " = satub("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 100:
    // HEXAGON_A2_satuh
    O << " = satuh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 101:
    // HEXAGON_A2_sub, HEXAGON_A2_subh_h16_hh, HEXAGON_A2_subh_h16_hl, HEXAGO...
    O << " = sub("; 
    printOperand(MI, 1, O); 
    break;
  case 102:
    // HEXAGON_A2_subri, SUB_ri, SUBi_ASLri_V4, SUBi_LSRri_V4
    O << " = sub(#"; 
    break;
  case 103:
    // HEXAGON_A2_svaddh, HEXAGON_A2_svaddhs, HEXAGON_A2_vaddh, HEXAGON_A2_va...
    O << " = vaddh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 104:
    // HEXAGON_A2_svadduhs, HEXAGON_A2_vadduhs
    O << " = vadduh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 105:
    // HEXAGON_A2_svavgh, HEXAGON_A2_svavghs, HEXAGON_A2_vavgh, HEXAGON_A2_va...
    O << " = vavgh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 106:
    // HEXAGON_A2_svnavgh, HEXAGON_A2_vnavgh, HEXAGON_A2_vnavghcr, HEXAGON_A2...
    O << " = vnavgh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 107:
    // HEXAGON_A2_svsubh, HEXAGON_A2_svsubhs, HEXAGON_A2_vsubh, HEXAGON_A2_vs...
    O << " = vsubh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 108:
    // HEXAGON_A2_svsubuhs, HEXAGON_A2_vsubuhs
    O << " = vsubuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 109:
    // HEXAGON_A2_swiz
    O << " = swiz("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 110:
    // HEXAGON_A2_sxtb, SXTB
    O << " = sxtb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 111:
    // HEXAGON_A2_sxth, SXTH
    O << " = sxth("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 112:
    // HEXAGON_A2_sxtw, SXTW
    O << " = sxtw("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 113:
    // HEXAGON_A2_tfrih
    O << ".h = #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 114:
    // HEXAGON_A2_tfril
    O << ".l = #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 115:
    // HEXAGON_A2_tfrpi, HEXAGON_A2_tfrsi, TFRI, TFRI64, TFRI_V4, TFRI_f
    O << " = #"; 
    break;
  case 116:
    // HEXAGON_A2_vabsh, HEXAGON_A2_vabshsat
    O << " = vabsh("; 
    printOperand(MI, 1, O); 
    break;
  case 117:
    // HEXAGON_A2_vabsw, HEXAGON_A2_vabswsat
    O << " = vabsw("; 
    printOperand(MI, 1, O); 
    break;
  case 118:
    // HEXAGON_A2_vaddub, HEXAGON_A2_vaddubs
    O << " = vaddub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 119:
    // HEXAGON_A2_vaddw, HEXAGON_A2_vaddws
    O << " = vaddw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 120:
    // HEXAGON_A2_vavgub, HEXAGON_A2_vavgubr
    O << " = vavgub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 121:
    // HEXAGON_A2_vavguh, HEXAGON_A2_vavguhr
    O << " = vavguh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 122:
    // HEXAGON_A2_vavguw, HEXAGON_A2_vavguwr
    O << " = vavguw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 123:
    // HEXAGON_A2_vavgw, HEXAGON_A2_vavgwcr, HEXAGON_A2_vavgwr
    O << " = vavgw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 124:
    // HEXAGON_A2_vcmpbeq
    O << " = vcmpb.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 125:
    // HEXAGON_A2_vcmpbgtu
    O << " = vcmpb.gtu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 126:
    // HEXAGON_A2_vcmpheq
    O << " = vcmph.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 127:
    // HEXAGON_A2_vcmphgt
    O << " = vcmph.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 128:
    // HEXAGON_A2_vcmphgtu
    O << " = vcmph.gtu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 129:
    // HEXAGON_A2_vcmpweq
    O << " = vcmpw.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 130:
    // HEXAGON_A2_vcmpwgt
    O << " = vcmpw.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 131:
    // HEXAGON_A2_vcmpwgtu
    O << " = vcmpw.gtu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 132:
    // HEXAGON_A2_vconj
    O << " = vconj("; 
    printOperand(MI, 1, O); 
    O << "):sat"; 
    return;
    break;
  case 133:
    // HEXAGON_A2_vmaxh
    O << " = vmaxh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 134:
    // HEXAGON_A2_vmaxub
    O << " = vmaxub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 135:
    // HEXAGON_A2_vmaxuh
    O << " = vmaxuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 136:
    // HEXAGON_A2_vmaxuw
    O << " = vmaxuw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 137:
    // HEXAGON_A2_vmaxw
    O << " = vmaxw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 138:
    // HEXAGON_A2_vminh
    O << " = vminh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 139:
    // HEXAGON_A2_vminub
    O << " = vminub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 140:
    // HEXAGON_A2_vminuh
    O << " = vminuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 141:
    // HEXAGON_A2_vminuw
    O << " = vminuw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 142:
    // HEXAGON_A2_vminw
    O << " = vminw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 143:
    // HEXAGON_A2_vnavgw, HEXAGON_A2_vnavgwcr, HEXAGON_A2_vnavgwr
    O << " = vnavgw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 144:
    // HEXAGON_A2_vraddub
    O << " = vraddub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 145:
    // HEXAGON_A2_vraddub_acc
    O << " += vraddub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 146:
    // HEXAGON_A2_vrsadub
    O << " = vrsadub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 147:
    // HEXAGON_A2_vrsadub_acc
    O << " += vrsadub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 148:
    // HEXAGON_A2_vsubub, HEXAGON_A2_vsububs
    O << " = vsubub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 149:
    // HEXAGON_A2_vsubw, HEXAGON_A2_vsubws
    O << " = vsubw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 150:
    // HEXAGON_A2_xor, HEXAGON_A2_xorp, HEXAGON_C2_xor, TFR_PdFalse, XOR_pp, ...
    O << " = xor("; 
    break;
  case 151:
    // HEXAGON_A2_zxtb, ZXTB
    O << " = zxtb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 152:
    // HEXAGON_A2_zxth, ZXTH
    O << " = zxth("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 153:
    // HEXAGON_A4_cround_ri, HEXAGON_A4_cround_rr
    O << " = cround("; 
    printOperand(MI, 1, O); 
    break;
  case 154:
    // HEXAGON_A4_modwrapu
    O << " = modwrap("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 155:
    // HEXAGON_A4_round_ri, HEXAGON_A4_round_ri_sat, HEXAGON_A4_round_rr, HEX...
    O << " = round("; 
    printOperand(MI, 1, O); 
    break;
  case 156:
    // HEXAGON_A5_vaddhubs
    O << " = vaddhub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 157:
    // HEXAGON_C2_cmpgei
    O << " = cmp.ge("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 158:
    // HEXAGON_C2_cmpgeui
    O << " = cmp.geu("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 159:
    // HEXAGON_C2_cmplt
    O << " = cmp.lt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 160:
    // HEXAGON_C2_cmpltu
    O << " = cmp.ltu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 161:
    // HEXAGON_C2_mask, MASK_p
    O << " = mask("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 162:
    // HEXAGON_C2_mux, HEXAGON_C2_muxii, HEXAGON_C2_muxir, HEXAGON_C2_muxri, ...
    O << " = mux("; 
    printOperand(MI, 1, O); 
    break;
  case 163:
    // HEXAGON_C2_vitpack, VITPACK_pp
    O << " = vitpack("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 164:
    // HEXAGON_C2_vmux, VMUX_prr64
    O << " = vmux("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 165:
    // HEXAGON_C4_fastcorner9, Hexagon_C4_fastcorner9
    O << " = fastcorner9("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 166:
    // HEXAGON_C4_fastcorner9_not, Hexagon_C4_fastcorner9_not
    O << " = !fastcorner9("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 167:
    // HEXAGON_F2_dfadd, fADD64_rr
    O << " = dfadd("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 168:
    // HEXAGON_F2_dfclass
    O << " = dfclass("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 169:
    // HEXAGON_F2_dfcmpuo
    O << " = dfcmp.uo("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 170:
    // HEXAGON_F2_dffixupd
    O << " = dffixupd("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 171:
    // HEXAGON_F2_dffixupn
    O << " = dffixupn("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 172:
    // HEXAGON_F2_dffixupr
    O << " = dffixupr("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 173:
    // HEXAGON_F2_dffms, HEXAGON_F2_dffms_lib
    O << " -= dfmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 174:
    // HEXAGON_F2_dfimm_n, HEXAGON_F2_dfimm_p
    O << " = dfmake#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 175:
    // HEXAGON_F2_dfmpy, fMUL64_rr
    O << " = dfmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 176:
    // HEXAGON_F2_dfsub, fSUB64_rr
    O << " = dfsub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 177:
    // HEXAGON_F2_sfadd, fADD_rr
    O << " = sfadd("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 178:
    // HEXAGON_F2_sfclass
    O << " = sfclass("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 179:
    // HEXAGON_F2_sfcmpuo
    O << " = sfcmp.uo("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 180:
    // HEXAGON_F2_sffixupd
    O << " = sffixupd("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 181:
    // HEXAGON_F2_sffixupn
    O << " = sffixupn("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 182:
    // HEXAGON_F2_sffixupr
    O << " = sffixupr("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 183:
    // HEXAGON_F2_sffms, HEXAGON_F2_sffms_lib
    O << " -= sfmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 184:
    // HEXAGON_F2_sfimm_n, HEXAGON_F2_sfimm_p
    O << " = sfmake#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 185:
    // HEXAGON_F2_sfmpy, fMUL_rr
    O << " = sfmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 186:
    // HEXAGON_F2_sfsub, fSUB_rr
    O << " = sfsub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 187:
    // HEXAGON_M2_cmaci_s0
    O << " += cmpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 188:
    // HEXAGON_M2_cmacr_s0
    O << " += cmpyr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 189:
    // HEXAGON_M2_cmacs_s0, HEXAGON_M2_cmacs_s1, HEXAGON_M2_cmacsc_s0, HEXAGO...
    O << " += cmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 190:
    // HEXAGON_M2_cmpyi_s0
    O << " = cmpyi("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 191:
    // HEXAGON_M2_cmpyr_s0
    O << " = cmpyr("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 192:
    // HEXAGON_M2_cmpyrs_s0, HEXAGON_M2_cmpyrs_s1, HEXAGON_M2_cmpyrsc_s0, HEX...
    O << " = cmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 193:
    // HEXAGON_M2_cnacs_s0, HEXAGON_M2_cnacs_s1, HEXAGON_M2_cnacsc_s0, HEXAGO...
    O << " -= cmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 194:
    // HEXAGON_M2_dpmpyss_acc_s0, HEXAGON_M2_mpy_acc_hh_s0, HEXAGON_M2_mpy_ac...
    O << " += mpy("; 
    printOperand(MI, 2, O); 
    break;
  case 195:
    // HEXAGON_M2_dpmpyss_nac_s0, HEXAGON_M2_mpy_nac_hh_s0, HEXAGON_M2_mpy_na...
    O << " -= mpy("; 
    printOperand(MI, 2, O); 
    break;
  case 196:
    // HEXAGON_M2_dpmpyss_rnd_s0, HEXAGON_M2_dpmpyss_s0, HEXAGON_M2_hmmpyh_rs...
    O << " = mpy("; 
    printOperand(MI, 1, O); 
    break;
  case 197:
    // HEXAGON_M2_dpmpyuu_acc_s0, HEXAGON_M2_mpyu_acc_hh_s0, HEXAGON_M2_mpyu_...
    O << " += mpyu("; 
    printOperand(MI, 2, O); 
    break;
  case 198:
    // HEXAGON_M2_dpmpyuu_nac_s0, HEXAGON_M2_mpyu_nac_hh_s0, HEXAGON_M2_mpyu_...
    O << " -= mpyu("; 
    printOperand(MI, 2, O); 
    break;
  case 199:
    // HEXAGON_M2_dpmpyuu_s0, HEXAGON_M2_mpyu_hh_s0, HEXAGON_M2_mpyu_hh_s1, H...
    O << " = mpyu("; 
    printOperand(MI, 1, O); 
    break;
  case 200:
    // HEXAGON_M2_maci, HEXAGON_M2_macsip, MPYI_acc_ri, MPYI_acc_rr
    O << " += mpyi("; 
    printOperand(MI, 2, O); 
    break;
  case 201:
    // HEXAGON_M2_macsin, MPYI_sub_ri
    O << " -= mpyi("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    break;
  case 202:
    // HEXAGON_M2_mmachs_rs0, HEXAGON_M2_mmachs_rs1, HEXAGON_M2_mmachs_s0, HE...
    O << " += vmpywoh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 203:
    // HEXAGON_M2_mmacls_rs0, HEXAGON_M2_mmacls_rs1, HEXAGON_M2_mmacls_s0, HE...
    O << " += vmpyweh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 204:
    // HEXAGON_M2_mmacuhs_rs0, HEXAGON_M2_mmacuhs_rs1, HEXAGON_M2_mmacuhs_s0,...
    O << " += vmpywouh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 205:
    // HEXAGON_M2_mmaculs_rs0, HEXAGON_M2_mmaculs_rs1, HEXAGON_M2_mmaculs_s0,...
    O << " += vmpyweuh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 206:
    // HEXAGON_M2_mmpyh_rs0, HEXAGON_M2_mmpyh_rs1, HEXAGON_M2_mmpyh_s0, HEXAG...
    O << " = vmpywoh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 207:
    // HEXAGON_M2_mmpyl_rs0, HEXAGON_M2_mmpyl_rs1, HEXAGON_M2_mmpyl_s0, HEXAG...
    O << " = vmpyweh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 208:
    // HEXAGON_M2_mmpyuh_rs0, HEXAGON_M2_mmpyuh_rs1, HEXAGON_M2_mmpyuh_s0, HE...
    O << " = vmpywouh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 209:
    // HEXAGON_M2_mmpyul_rs0, HEXAGON_M2_mmpyul_rs1, HEXAGON_M2_mmpyul_s0, HE...
    O << " = vmpyweuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 210:
    // HEXAGON_M2_mpyi, Hexagon_M2_mpysmi, MPYI, MPYI_ri
    O << " = mpyi("; 
    printOperand(MI, 1, O); 
    break;
  case 211:
    // HEXAGON_M2_mpyui
    O << " = mpyui("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 212:
    // HEXAGON_M2_nacci, HEXAGON_M2_naccii, SUBri_acc, SUBrr_acc
    O << " -= add("; 
    printOperand(MI, 2, O); 
    break;
  case 213:
    // HEXAGON_M2_subacc
    O << " += sub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 214:
    // HEXAGON_M2_vabsdiffh
    O << " = vabsdiffh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 215:
    // HEXAGON_M2_vabsdiffw
    O << " = vabsdiffw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 216:
    // HEXAGON_M2_vcmac_s0_sat_i
    O << " += vcmpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):sat"; 
    return;
    break;
  case 217:
    // HEXAGON_M2_vcmac_s0_sat_r
    O << " += vcmpyr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):sat"; 
    return;
    break;
  case 218:
    // HEXAGON_M2_vcmpy_s0_sat_i, HEXAGON_M2_vcmpy_s1_sat_i
    O << " = vcmpyi("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 219:
    // HEXAGON_M2_vcmpy_s0_sat_r, HEXAGON_M2_vcmpy_s1_sat_r
    O << " = vcmpyr("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 220:
    // HEXAGON_M2_vdmacs_s0, HEXAGON_M2_vdmacs_s1
    O << " += vdmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 221:
    // HEXAGON_M2_vdmpyrs_s0, HEXAGON_M2_vdmpyrs_s1, HEXAGON_M2_vdmpys_s0, HE...
    O << " = vdmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 222:
    // HEXAGON_M2_vmac2, HEXAGON_M2_vmac2s_s0, HEXAGON_M2_vmac2s_s1
    O << " += vmpyh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 223:
    // HEXAGON_M2_vmac2es, HEXAGON_M2_vmac2es_s0, HEXAGON_M2_vmac2es_s1
    O << " += vmpyeh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 224:
    // HEXAGON_M2_vmpy2es_s0, HEXAGON_M2_vmpy2es_s1
    O << " = vmpyeh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 225:
    // HEXAGON_M2_vmpy2s_s0, HEXAGON_M2_vmpy2s_s0pack, HEXAGON_M2_vmpy2s_s1, ...
    O << " = vmpyh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 226:
    // HEXAGON_M2_vrcmaci_s0, HEXAGON_M2_vrcmaci_s0c
    O << " += vrcmpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 227:
    // HEXAGON_M2_vrcmacr_s0, HEXAGON_M2_vrcmacr_s0c
    O << " += vrcmpyr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 228:
    // HEXAGON_M2_vrcmpyi_s0, HEXAGON_M2_vrcmpyi_s0c
    O << " = vrcmpyi("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 229:
    // HEXAGON_M2_vrcmpyr_s0, HEXAGON_M2_vrcmpyr_s0c
    O << " = vrcmpyr("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 230:
    // HEXAGON_M2_vrmac_s0
    O << " += vrmpyh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 231:
    // HEXAGON_M2_vrmpy_s0
    O << " = vrmpyh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 232:
    // HEXAGON_M2_xor_xacc, Hexagon_M4_xor_xacc, XORd_XORdd, XORr_XORrr_V4
    O << " ^= xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 233:
    // HEXAGON_M4_or_and, HEXAGON_M4_or_andn, HEXAGON_S4_or_andi, ORr_ANDr_NO...
    O << " |= and("; 
    printOperand(MI, 2, O); 
    break;
  case 234:
    // HEXAGON_M4_or_or, HEXAGON_S4_or_ori, ORr_ORri_V4, ORr_ORrr_V4
    O << " |= or("; 
    printOperand(MI, 2, O); 
    break;
  case 235:
    // HEXAGON_M4_or_xor, ORr_XORrr_V4
    O << " |= xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 236:
    // HEXAGON_M4_xor_and, HEXAGON_M4_xor_andn, XORr_ANDr_NOTr_V4, XORr_ANDrr...
    O << " ^= and("; 
    printOperand(MI, 2, O); 
    break;
  case 237:
    // HEXAGON_M4_xor_or, XORr_ORrr_V4
    O << " ^= or("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 238:
    // HEXAGON_M5_vdmacbsu
    O << " += vdmpybsu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):sat"; 
    return;
    break;
  case 239:
    // HEXAGON_M5_vdmpybsu
    O << " = vdmpybsu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 240:
    // HEXAGON_M5_vmacbsu
    O << " += vmpybsu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 241:
    // HEXAGON_M5_vmacbuu
    O << " += vmpybu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 242:
    // HEXAGON_M5_vmpybsu
    O << " = vmpybsu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 243:
    // HEXAGON_M5_vmpybuu
    O << " = vmpybu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 244:
    // HEXAGON_M5_vrmacbsu
    O << " += vrmpybsu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 245:
    // HEXAGON_M5_vrmacbuu
    O << " += vrmpybu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 246:
    // HEXAGON_M5_vrmpybsu
    O << " = vrmpybsu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 247:
    // HEXAGON_M5_vrmpybuu
    O << " = vrmpybu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 248:
    // HEXAGON_S2_asl_i_vh, HEXAGON_S2_asl_r_vh
    O << " = vaslh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 249:
    // HEXAGON_S2_asl_i_vw, HEXAGON_S2_asl_r_vw
    O << " = vaslw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 250:
    // HEXAGON_S2_asr_i_p_rnd_goodsyntax, HEXAGON_S2_asr_i_r_rnd_goodsyntax
    O << " = asrrnd("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 251:
    // HEXAGON_S2_asr_i_svw_trun, HEXAGON_S2_asr_i_vw, HEXAGON_S2_asr_r_svw_t...
    O << " = vasrw("; 
    printOperand(MI, 1, O); 
    break;
  case 252:
    // HEXAGON_S2_asr_i_vh, HEXAGON_S2_asr_r_vh, HEXAGON_S5_vasrhrnd_goodsynt...
    O << " = vasrh("; 
    printOperand(MI, 1, O); 
    break;
  case 253:
    // HEXAGON_S2_cl1, HEXAGON_S2_cl1p
    O << " = cl1("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 254:
    // HEXAGON_S2_clb, HEXAGON_S2_clbp
    O << " = clb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 255:
    // HEXAGON_S2_clbnorm
    O << " = normamt("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 256:
    // HEXAGON_S2_ct1
    O << " = ct1("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 257:
    // HEXAGON_S2_extractu, HEXAGON_S2_extractu_rp, HEXAGON_S2_extractup, HEX...
    O << " = extractu("; 
    printOperand(MI, 1, O); 
    break;
  case 258:
    // HEXAGON_S2_lsl_r_p, HEXAGON_S2_lsl_r_r, LSL_rr, LSLd
    O << " = lsl("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 259:
    // HEXAGON_S2_lsl_r_p_acc, HEXAGON_S2_lsl_r_r_acc, LSL_ADD_rr, LSL_ADDd_r...
    O << " += lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 260:
    // HEXAGON_S2_lsl_r_p_and, HEXAGON_S2_lsl_r_r_and, LSL_AND_rr, LSL_ANDd_r...
    O << " &= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 261:
    // HEXAGON_S2_lsl_r_p_nac, HEXAGON_S2_lsl_r_r_nac, LSL_SUB_rr, LSL_SUBd_r...
    O << " -= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 262:
    // HEXAGON_S2_lsl_r_p_or, HEXAGON_S2_lsl_r_r_or, LSL_OR_rr, LSL_ORd_rr
    O << " |= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 263:
    // HEXAGON_S2_lsl_r_vh
    O << " = vlslh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 264:
    // HEXAGON_S2_lsl_r_vw
    O << " = vlslw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 265:
    // HEXAGON_S2_lsr_i_p, HEXAGON_S2_lsr_i_r, HEXAGON_S2_lsr_r_p, HEXAGON_S2...
    O << " = lsr("; 
    printOperand(MI, 1, O); 
    break;
  case 266:
    // HEXAGON_S2_lsr_i_p_acc, HEXAGON_S2_lsr_i_r_acc, HEXAGON_S2_lsr_r_p_acc...
    O << " += lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 267:
    // HEXAGON_S2_lsr_i_p_and, HEXAGON_S2_lsr_i_r_and, HEXAGON_S2_lsr_r_p_and...
    O << " &= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 268:
    // HEXAGON_S2_lsr_i_p_nac, HEXAGON_S2_lsr_i_r_nac, HEXAGON_S2_lsr_r_p_nac...
    O << " -= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 269:
    // HEXAGON_S2_lsr_i_p_or, HEXAGON_S2_lsr_i_r_or, HEXAGON_S2_lsr_r_p_or, H...
    O << " |= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 270:
    // HEXAGON_S2_lsr_i_p_xacc, HEXAGON_S2_lsr_i_r_xacc, LSR_XOR_ri, LSR_XORd...
    O << " ^= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 271:
    // HEXAGON_S2_lsr_i_vh, HEXAGON_S2_lsr_r_vh
    O << " = vlsrh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 272:
    // HEXAGON_S2_lsr_i_vw, HEXAGON_S2_lsr_r_vw
    O << " = vlsrw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 273:
    // HEXAGON_S2_packhl
    O << " = packhl("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 274:
    // HEXAGON_S2_parityp
    O << " = parity("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 275:
    // HEXAGON_S2_setbit_i, HEXAGON_S2_setbit_r, SETBIT, SETBIT_31, TOGBIT
    O << " = setbit("; 
    printOperand(MI, 1, O); 
    break;
  case 276:
    // HEXAGON_S2_shuffeb
    O << " = shuffeb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 277:
    // HEXAGON_S2_shuffeh
    O << " = shuffeh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 278:
    // HEXAGON_S2_shuffob
    O << " = shuffob("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 279:
    // HEXAGON_S2_shuffoh
    O << " = shuffoh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 280:
    // HEXAGON_S2_svsathb, HEXAGON_S2_vsathb, HEXAGON_S2_vsathb_nopack
    O << " = vsathb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 281:
    // HEXAGON_S2_svsathub, HEXAGON_S2_vsathub, HEXAGON_S2_vsathub_nopack
    O << " = vsathub("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 282:
    // HEXAGON_S2_togglebit_i, HEXAGON_S2_togglebit_r, TOGBIT_31
    O << " = togglebit("; 
    printOperand(MI, 1, O); 
    break;
  case 283:
    // HEXAGON_S2_tstbit_i, HEXAGON_S2_tstbit_r, TSTBIT_ri, TSTBIT_rr
    O << " = tstbit("; 
    printOperand(MI, 1, O); 
    break;
  case 284:
    // HEXAGON_S2_valignib, HEXAGON_S2_valignrb, VALIGN_rrp
    O << " = valignb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 285:
    // HEXAGON_S2_vcrotate
    O << " = vcrotate("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 286:
    // HEXAGON_S2_vrndpackwh, HEXAGON_S2_vrndpackwhs
    O << " = vrndwh("; 
    printOperand(MI, 1, O); 
    break;
  case 287:
    // HEXAGON_S2_vsatwh, HEXAGON_S2_vsatwh_nopack
    O << " = vsatwh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 288:
    // HEXAGON_S2_vsatwuh, HEXAGON_S2_vsatwuh_nopack
    O << " = vsatwuh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 289:
    // HEXAGON_S2_vsplatrb
    O << " = vsplatb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 290:
    // HEXAGON_S2_vsplatrh
    O << " = vsplath("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 291:
    // HEXAGON_S2_vsxtbh
    O << " = vsxtbh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 292:
    // HEXAGON_S2_vsxthw
    O << " = vsxthw("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 293:
    // HEXAGON_S2_vtrunehb
    O << " = vtrunehb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 294:
    // HEXAGON_S2_vtrunewh
    O << " = vtrunewh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 295:
    // HEXAGON_S2_vtrunohb
    O << " = vtrunohb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 296:
    // HEXAGON_S2_vtrunowh
    O << " = vtrunowh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 297:
    // HEXAGON_S2_vzxtbh
    O << " = vzxtbh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 298:
    // HEXAGON_S2_vzxthw
    O << " = vzxthw("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 299:
    // HEXAGON_S5_asrhub_rnd_sat_goodsyntax, HEXAGON_S5_asrhub_sat
    O << " = vasrhub("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    break;
  case 300:
    // HEXAGON_S5_popcountp
    O << " = popcount("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 301:
    // HEXAGON_circ_ldd, LDrid, LDrid_abs_set_V4, LDrid_f, LDrid_indexed, LDr...
    O << " = memd("; 
    break;
  case 302:
    // HI, HI_jt, HI_label, HIi
    O << ".h = #HI("; 
    break;
  case 303:
    // Hexagon_C2_bitsclr, Hexagon_C2_bitsclri
    O << " = bitsclr("; 
    printOperand(MI, 1, O); 
    break;
  case 304:
    // Hexagon_C2_bitsset
    O << " = bitsset("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 305:
    // Hexagon_M2_vradduh
    O << " = vradduh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 306:
    // Hexagon_M2_vrcmpys_acc_s1
    O << " += vrcmpys("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):<<1:sat"; 
    return;
    break;
  case 307:
    // Hexagon_M2_vrcmpys_s1, Hexagon_M2_vrcmpys_s1rp
    O << " = vrcmpys("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 308:
    // Hexagon_S2_brev
    O << " = brev("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 309:
    // Hexagon_S2_deinterleave
    O << " = deinterleave("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 310:
    // Hexagon_S2_insert, Hexagon_S2_insert_rp, Hexagon_S2_insertp, Hexagon_S...
    O << " = insert("; 
    printOperand(MI, 2, O); 
    break;
  case 311:
    // Hexagon_S2_interleave
    O << " = interleave("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 312:
    // Hexagon_S2_lfsp
    O << " = lfs("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 313:
    // Hexagon_S2_tableidxb_goodsyntax
    O << " = tableidxb("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 314:
    // Hexagon_S2_tableidxd_goodsyntax
    O << " = tableidxd("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 315:
    // Hexagon_S2_tableidxh_goodsyntax
    O << " = tableidxh("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 316:
    // Hexagon_S2_tableidxw_goodsyntax
    O << " = tableidxw("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 317:
    // Hexagon_S2_vspliceib, Hexagon_S2_vsplicerb, VSPLICE_rrp
    O << " = vspliceb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 318:
    // JMPR_f, JMPR_t, JMPret_f, JMPret_t
    O << ") jumpr "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 319:
    // JMPR_fnew_ntV3, JMPR_tnew_ntV3, JMPret_fnew_ntV3, JMPret_tnew_ntV3
    O << ".new) jumpr:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 320:
    // JMPR_fnew_tV3, JMPR_tnew_tV3, JMPret_fnew_tV3, JMPret_tnew_tV3
    O << ".new) jumpr:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 321:
    // JMP_f, JMP_t
    O << ") jump "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 322:
    // JMP_fnew_nt, JMP_tnew_nt
    O << ".new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 323:
    // JMP_fnew_t, JMP_tnew_t
    O << ".new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 324:
    // LDb_GP_V4
    O << " = memb(#"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 325:
    // LDd_GP_V4
    O << " = memd(#"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 326:
    // LDh_GP_V4
    O << " = memh(#"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 327:
    // LDrib, LDrib_abs_set_V4, LDrib_ind_lo_V4, LDrib_indexed, LDrib_indexed...
    O << " = memb("; 
    break;
  case 328:
    // LDrib_abs_V4
    O << " = memb(##"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 329:
    // LDrid_abs_V4
    O << " = memd(##"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 330:
    // LDrid_ind_lo_V4
    O << "=memd("; 
    printOperand(MI, 1, O); 
    O << "<<#"; 
    printImmOperand(MI, 2, O); 
    O << "+##"; 
    printGlobalOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 331:
    // LDrih, LDrih_abs_set_V4, LDrih_ind_lo_V4, LDrih_indexed, LDrih_indexed...
    O << " = memh("; 
    break;
  case 332:
    // LDrih_abs_V4
    O << " = memh(##"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 333:
    // LDriub, LDriub_abs_set_V4, LDriub_ind_anyext_lo_V4, LDriub_ind_lo_V4, ...
    O << " = memub("; 
    break;
  case 334:
    // LDriub_abs_V4
    O << " = memub(##"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 335:
    // LDriuh, LDriuh_abs_set_V4, LDriuh_ind_anyext_lo_V4, LDriuh_ind_lo_V4, ...
    O << " = memuh("; 
    break;
  case 336:
    // LDriuh_abs_V4
    O << " = memuh(##"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 337:
    // LDriw, LDriw_abs_set_V4, LDriw_f, LDriw_ind_lo_V4, LDriw_indexed, LDri...
    O << " = memw("; 
    break;
  case 338:
    // LDriw_abs_V4
    O << " = memw(##"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 339:
    // LDub_GP_V4
    O << " = memub(#"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 340:
    // LDuh_GP_V4
    O << " = memuh(#"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 341:
    // LDw_GP_V4
    O << " = memw(#"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 342:
    // LO, LO_jt, LO_label, LOi
    O << ".l = #LO("; 
    break;
  case 343:
    // LOOP0_i
    O << ", #"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 344:
    // LSLd_rr_xor_V4
    O << " ^= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 345:
    // LSLi_V4
    O << " = lsl(#"; 
    printImmOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 346:
    // MPYI_rin
    O << " =- mpyi("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 347:
    // MPYI_riu
    O << " =+ mpyi("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printExtOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 348:
    // MemOPb_ADDi_V4, MemOPb_ADDr_V4, MemOPb_ANDr_V4, MemOPb_CLRBITi_V4, Mem...
    O << "+#"; 
    break;
  case 349:
    // NTSTBIT_ri, NTSTBIT_rr
    O << " = !tstbit("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 350:
    // ORi_ASLri_V4, ORi_LSRri_V4
    O << " = or(#"; 
    printExtOperand(MI, 1, O); 
    break;
  case 351:
    // POST_STbri, POST_STbri_nv_V4, POST_STdri, POST_SThri, POST_SThri_nv_V4...
    O << "++#"; 
    printImmOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 3, O); 
    break;
  case 352:
    // POST_STbri_cNotPt, POST_STbri_cNotPt_nv_V4, POST_STbri_cPt, POST_STbri...
    O << ") memb("; 
    break;
  case 353:
    // POST_STbri_cdnNotPt_V4, POST_STbri_cdnNotPt_nv_V4, POST_STbri_cdnPt_V4...
    O << ".new) memb("; 
    break;
  case 354:
    // POST_STdri_cNotPt, POST_STdri_cPt, STrid_cNotPt, STrid_cPt, STrid_inde...
    O << ") memd("; 
    break;
  case 355:
    // POST_STdri_cdnNotPt_V4, POST_STdri_cdnPt_V4, STrid_cdnNotPt_V4, STrid_...
    O << ".new) memd("; 
    break;
  case 356:
    // POST_SThri_cNotPt, POST_SThri_cNotPt_nv_V4, POST_SThri_cPt, POST_SThri...
    O << ") memh("; 
    break;
  case 357:
    // POST_SThri_cdnNotPt_V4, POST_SThri_cdnNotPt_nv_V4, POST_SThri_cdnPt_V4...
    O << ".new) memh("; 
    break;
  case 358:
    // POST_STwri_cNotPt, POST_STwri_cNotPt_nv_V4, POST_STwri_cPt, POST_STwri...
    O << ") memw("; 
    break;
  case 359:
    // POST_STwri_cdnNotPt_V4, POST_STwri_cdnNotPt_nv_V4, POST_STwri_cdnPt_V4...
    O << ".new) memw("; 
    break;
  case 360:
    // SAVE_REGISTERS_CALL_V4
    O << " // Save_calle_saved_registers"; 
    return;
    break;
  case 361:
    // STb_GP_V4, STb_GP_nv_V4, STd_GP_V4, STh_GP_V4, STh_GP_nv_V4, STrib_abs...
    O << ") = "; 
    printOperand(MI, 1, O); 
    break;
  case 362:
    // STb_GP_cNotPt_V4, STb_GP_cNotPt_nv_V4, STb_GP_cPt_V4, STb_GP_cPt_nv_V4...
    O << ") memb(##"; 
    printImmOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 363:
    // STb_GP_cdnNotPt_V4, STb_GP_cdnNotPt_nv_V4, STb_GP_cdnPt_V4, STb_GP_cdn...
    O << ".new) memb(##"; 
    printImmOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 364:
    // STd_GP_cNotPt_V4, STd_GP_cPt_V4, STrid_abs_cNotPt_V4, STrid_abs_cPt_V4
    O << ") memd(##"; 
    printImmOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 365:
    // STd_GP_cdnNotPt_V4, STd_GP_cdnPt_V4, STrid_abs_cdnNotPt_V4, STrid_abs_...
    O << ".new) memd(##"; 
    printImmOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 366:
    // STh_GP_cNotPt_V4, STh_GP_cNotPt_nv_V4, STh_GP_cPt_V4, STh_GP_cPt_nv_V4...
    O << ") memh(##"; 
    printImmOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 367:
    // STh_GP_cdnNotPt_V4, STh_GP_cdnNotPt_nv_V4, STh_GP_cdnPt_V4, STh_GP_cdn...
    O << ".new) memh(##"; 
    printImmOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 368:
    // STrib_abs_set_V4, STrid_abs_set_V4, STrih_abs_set_V4, STriw_abs_set_V4
    O << "=##"; 
    printImmOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 369:
    // STrib_indexed_shl_V4, STrib_indexed_shl_nv_V4, STrid_indexed_shl_V4, S...
    O << '+'; 
    printOperand(MI, 1, O); 
    O << "<<#"; 
    printImmOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 3, O); 
    break;
  case 370:
    // STrib_nv_V4, STrih_nv_V4, STriw_nv_V4
    O << ".new"; 
    return;
    break;
  case 371:
    // STrib_shl_V4, STrib_shl_nv_V4, STrid_shl_V4, STrih_shl_V4, STrih_shl_n...
    O << "<<#"; 
    printImmOperand(MI, 1, O); 
    O << "+##"; 
    printImmOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 3, O); 
    break;
  case 372:
    // STriw_abs_cNotPt_V4, STriw_abs_cNotPt_nv_V4, STriw_abs_cPt_V4, STriw_a...
    O << ") memw(##"; 
    printImmOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 373:
    // STriw_abs_cdnNotPt_V4, STriw_abs_cdnNotPt_nv_V4, STriw_abs_cdnPt_V4, S...
    O << ".new) memw(##"; 
    printImmOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 374:
    // TSTBIT0_f_Jumpnv_nt_V4, TSTBIT0_t_Jumpnv_nt_V4
    O << ".new, #0)) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 375:
    // TSTBIT0_f_Jumpnv_t_V4, TSTBIT0_t_Jumpnv_t_V4
    O << ".new, #0)) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 7 bits for 74 unique commands.
  switch ((Bits >> 21) & 127) {
  default:   // unreachable.
  case 0:
    // A2_add, ADD64_rr, ADD_ri, ADD_rr, ADDr_ADDri_V4, ADDr_MPYir_V4, ADDr_M...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // A2_paddf, A2_paddfnew, A2_paddt, A2_paddtnew, ADD_ri_cNotPt, ADD_ri_cP...
    O << " = add("; 
    printOperand(MI, 2, O); 
    break;
  case 2:
    // ADDi_ASLri_V4, ANDi_ASLri_V4, ORi_ASLri_V4
    O << ", asl("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 3:
    // ADDi_LSRri_V4, ANDi_LSRri_V4, ORi_LSRri_V4
    O << ", lsr("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 4:
    // ADDi_MPYri_V4, ADDi_MPYrr_V4
    O << ", mpyi("; 
    printOperand(MI, 2, O); 
    break;
  case 5:
    // ADDri_acc, AND_ri, ASL, ASL_ADD_ri, ASL_ADDd_ri, ASL_AND_ri, ASL_ANDd_...
    O << ", #"; 
    break;
  case 6:
    // ADDrr_acc, AND_pp, AND_rr, AND_rr64, ANDr_ANDrr_V4, ASL_ADD_rr, ASL_AD...
    O << ", "; 
    break;
  case 7:
    // AND_pnotp, HEXAGON_C2_andn, HEXAGON_C2_orn
    O << ", !"; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 8:
    // AND_rr_cNotPt, AND_rr_cPt, AND_rr_cdnNotPt, AND_rr_cdnPt
    O << " = and("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 9:
    // ANDd_NOTd_V4, ANDr_ANDr_NOTr_V4, HEXAGON_M4_and_andn, HEXAGON_M4_or_an...
    O << ", ~"; 
    break;
  case 10:
    // ARGEXTEND, HEXAGON_A2_tfr, HEXAGON_A2_tfrp, HEXAGON_C2_pxfer_map, HEXA...
    return;
    break;
  case 11:
    // ASLH_cNotPt_V4, ASLH_cPt_V4, ASLH_cdnNotPt_V4, ASLH_cdnPt_V4
    O << " = aslh("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 12:
    // ASRH_cNotPt_V4, ASRH_cPt_V4, ASRH_cdnNotPt_V4, ASRH_cdnPt_V4
    O << " = asrh("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 13:
    // CMPEQri_f_Jumpnv_nt_V4, CMPEQri_t_Jumpnv_nt_V4, CMPEQrr_f_Jumpnv_nt_V4...
    O << ")) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 14:
    // CMPEQri_f_Jumpnv_t_V4, CMPEQri_t_Jumpnv_t_V4, CMPEQrr_f_Jumpnv_t_V4, C...
    O << ")) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 15:
    // CMPLTUrr_f_Jumpnv_nt_V4, CMPLTUrr_t_Jumpnv_nt_V4, CMPLTrr_f_Jumpnv_nt_...
    O << ".new)) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 16:
    // CMPLTUrr_f_Jumpnv_t_V4, CMPLTUrr_t_Jumpnv_t_V4, CMPLTrr_f_Jumpnv_t_V4,...
    O << ".new)) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 17:
    // COMBINE_Ii, COMBINE_Ir_V4, MemOPb_ADDi_V4, MemOPb_ADDr_V4, MemOPb_ANDr...
    printExtOperand(MI, 1, O); 
    break;
  case 18:
    // COMBINE_iI_V4, COMBINE_ii, HEXAGON_A2_combineii, HEXAGON_A2_subri, HEX...
    printImmOperand(MI, 1, O); 
    break;
  case 19:
    // COMBINE_rr_cNotPt, COMBINE_rr_cPt, COMBINE_rr_cdnNotPt, COMBINE_rr_cdn...
    O << " = combine("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 20:
    // CONST32, CONST32GP_set, CONST32_set, FCONST32_nsdata, HI, LO
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 21:
    // CONST32_set_jt, HI_jt, LO_jt
    printJumpTable(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 22:
    // CONVERT_df2d, CONVERT_df2ud, CONVERT_df2uw, CONVERT_df2w, CONVERT_sf2d...
    O << "):chop"; 
    return;
    break;
  case 23:
    // CONVERT_df2d_nchop, CONVERT_df2ud_nchop, CONVERT_df2uw_nchop, CONVERT_...
    O << ')'; 
    return;
    break;
  case 24:
    // FMADD_dp, FMADD_sp, HEXAGON_F2_dffma_sc, HEXAGON_F2_sffma_sc, HEXAGON_...
    printOperand(MI, 2, O); 
    break;
  case 25:
    // HEXAGON_A2_abssat, HEXAGON_A2_negsat, HEXAGON_A2_svaddhs, HEXAGON_A2_s...
    O << "):sat"; 
    return;
    break;
  case 26:
    // HEXAGON_A2_combine_hh, HEXAGON_A2_combine_hl, HEXAGON_A2_subh_h16_hh, ...
    O << ".H, "; 
    break;
  case 27:
    // HEXAGON_A2_combine_lh, HEXAGON_A2_combine_ll, HEXAGON_A2_subh_h16_lh, ...
    O << ".L, "; 
    break;
  case 28:
    // HEXAGON_A2_svavghs, HEXAGON_A2_vavghr, HEXAGON_A2_vavgubr, HEXAGON_A2_...
    O << "):rnd"; 
    return;
    break;
  case 29:
    // HEXAGON_A2_vavghcr, HEXAGON_A2_vavgwcr
    O << "):crnd"; 
    return;
    break;
  case 30:
    // HEXAGON_A2_vnavghcr, HEXAGON_A2_vnavgwcr
    O << "):crnd:sat"; 
    return;
    break;
  case 31:
    // HEXAGON_A2_vnavghr, HEXAGON_A2_vnavgwr, HEXAGON_M2_cmpyrs_s0, HEXAGON_...
    O << "):rnd:sat"; 
    return;
    break;
  case 32:
    // HEXAGON_F2_dffms_lib, HEXAGON_F2_sffms_lib
    O << "):lib"; 
    return;
    break;
  case 33:
    // HEXAGON_F2_dfimm_n, HEXAGON_F2_sfimm_n
    O << "):neg"; 
    return;
    break;
  case 34:
    // HEXAGON_F2_dfimm_p, HEXAGON_F2_sfimm_p
    O << "):pos"; 
    return;
    break;
  case 35:
    // HEXAGON_M2_cmacs_s1, HEXAGON_M2_cmpys_s1, HEXAGON_M2_cnacs_s1, HEXAGON...
    O << "):<<1:sat"; 
    return;
    break;
  case 36:
    // HEXAGON_M2_cmacsc_s0, HEXAGON_M2_cmpysc_s0, HEXAGON_M2_cnacsc_s0
    O << "*):sat"; 
    return;
    break;
  case 37:
    // HEXAGON_M2_cmacsc_s1, HEXAGON_M2_cmpysc_s1, HEXAGON_M2_cnacsc_s1
    O << "*):<<1:sat"; 
    return;
    break;
  case 38:
    // HEXAGON_M2_cmpyrs_s1, HEXAGON_M2_mmachs_rs1, HEXAGON_M2_mmacls_rs1, HE...
    O << "):<<1:rnd:sat"; 
    return;
    break;
  case 39:
    // HEXAGON_M2_cmpyrsc_s0
    O << "*):rnd:sat"; 
    return;
    break;
  case 40:
    // HEXAGON_M2_cmpyrsc_s1
    O << "*):<<1:rnd:sat"; 
    return;
    break;
  case 41:
    // HEXAGON_M2_macsin
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 42:
    // HEXAGON_M2_vrcmaci_s0c, HEXAGON_M2_vrcmacr_s0c, HEXAGON_M2_vrcmpyi_s0c...
    O << "*)"; 
    return;
    break;
  case 43:
    // HEXAGON_S4_or_andix, Hexagon_C4_and_and, Hexagon_C4_and_andn, Hexagon_...
    O << ", and("; 
    printOperand(MI, 2, O); 
    break;
  case 44:
    // Hexagon_C4_and_or, Hexagon_C4_and_orn, Hexagon_C4_or_or, Hexagon_C4_or...
    O << ", or("; 
    printOperand(MI, 2, O); 
    break;
  case 45:
    // LDb_GP_cNotPt_V4, LDb_GP_cPt_V4, LDb_GP_cdnNotPt_V4, LDb_GP_cdnPt_V4, ...
    O << " = memb(##"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 46:
    // LDd_GP_cNotPt_V4, LDd_GP_cPt_V4, LDd_GP_cdnNotPt_V4, LDd_GP_cdnPt_V4, ...
    O << " = memd(##"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 47:
    // LDh_GP_cNotPt_V4, LDh_GP_cPt_V4, LDh_GP_cdnNotPt_V4, LDh_GP_cdnPt_V4, ...
    O << " = memh(##"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 48:
    // LDrib, LDrid, LDrid_f, LDrih, LDriub, LDriuh, LDriw, LDriw_f, STrib_cN...
    printMEMriOperand(MI, 1, O); 
    break;
  case 49:
    // LDrib_cNotPt, LDrib_cPt, LDrib_cdnNotPt, LDrib_cdnPt, LDrib_indexed_cN...
    O << " = memb("; 
    break;
  case 50:
    // LDrid_cNotPt, LDrid_cPt, LDrid_cdnNotPt, LDrid_cdnPt, LDrid_indexed_cN...
    O << " = memd("; 
    break;
  case 51:
    // LDrih_cNotPt, LDrih_cPt, LDrih_cdnNotPt, LDrih_cdnPt, LDrih_indexed_cN...
    O << " = memh("; 
    break;
  case 52:
    // LDriub_abs_cNotPt_V4, LDriub_abs_cPt_V4, LDriub_abs_cdnNotPt_V4, LDriu...
    O << " = memub(##"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 53:
    // LDriub_cNotPt, LDriub_cPt, LDriub_cdnNotPt, LDriub_cdnPt, LDriub_index...
    O << " = memub("; 
    break;
  case 54:
    // LDriuh_abs_cNotPt_V4, LDriuh_abs_cPt_V4, LDriuh_abs_cdnNotPt_V4, LDriu...
    O << " = memuh(##"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 55:
    // LDriuh_cNotPt, LDriuh_cPt, LDriuh_cdnNotPt, LDriuh_cdnPt, LDriuh_index...
    O << " = memuh("; 
    break;
  case 56:
    // LDriw_abs_cNotPt_V4, LDriw_abs_cPt_V4, LDriw_abs_cdnNotPt_V4, LDriw_ab...
    O << " = memw(##"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 57:
    // LDriw_cNotPt, LDriw_cPt, LDriw_cdnNotPt, LDriw_cdnPt, LDriw_indexed_cN...
    O << " = memw("; 
    break;
  case 58:
    // MPYI_sub_ri
    printExtOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 59:
    // NTSTBIT_ri
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 60:
    // OR_rr_cNotPt, OR_rr_cPt, OR_rr_cdnNotPt, OR_rr_cdnPt
    O << " = or("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 61:
    // POST_STbri_nv_V4, POST_SThri_nv_V4, POST_STwri_nv_V4, STb_GP_cNotPt_nv...
    O << ".new"; 
    return;
    break;
  case 62:
    // SUB_rr_cNotPt, SUB_rr_cPt, SUB_rr_cdnNotPt, SUB_rr_cdnPt
    O << " = sub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 63:
    // SXTB_cNotPt_V4, SXTB_cPt_V4, SXTB_cdnNotPt_V4, SXTB_cdnPt_V4
    O << " = sxtb("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 64:
    // SXTH_cNotPt_V4, SXTH_cPt_V4, SXTH_cdnNotPt_V4, SXTH_cdnPt_V4
    O << " = sxth("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 65:
    // TFR64_cNotPt, TFR64_cPt, TFR64_cdnNotPt, TFR64_cdnPt, TFR_cNotPt, TFR_...
    O << " = "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 66:
    // TFRI_cNotPt, TFRI_cNotPt_V4, TFRI_cPt, TFRI_cPt_V4, TFRI_cPt_f, TFRI_c...
    O << " = #"; 
    break;
  case 67:
    // TFRI_cNotPt_f
    O << " =#"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 68:
    // TFR_FI
    printFrameIndexOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 69:
    // TFR_PdFalse
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    O << ')'; 
    return;
    break;
  case 70:
    // TFR_PdRs, TFR_RsPd
    O << "  /* Should almost never emit this. */"; 
    return;
    break;
  case 71:
    // XOR_rr_cNotPt, XOR_rr_cPt, XOR_rr_cdnNotPt, XOR_rr_cdnPt
    O << " = xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 72:
    // ZXTB_cNotPt_V4, ZXTB_cPt_V4, ZXTB_cdnNotPt_V4, ZXTB_cdnPt_V4
    O << " = zxtb("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 73:
    // ZXTH_cNotPt_V4, ZXTH_cPt_V4, ZXTH_cdnNotPt_V4, ZXTH_cdnPt_V4
    O << " = zxth("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  }


  // Fragment 3 encoded into 6 bits for 37 unique commands.
  switch ((Bits >> 28) & 63) {
  default:   // unreachable.
  case 0:
    // A2_add, A2_paddf, A2_paddfnew, A2_paddt, A2_paddtnew, ADD64_rr, ADD_rr...
    O << ", "; 
    break;
  case 1:
    // ADD_ri, ADD_ri_cNotPt, ADD_ri_cPt, ADD_ri_cdnNotPt, ADD_ri_cdnPt, ADDi...
    O << ", #"; 
    break;
  case 2:
    // ADDr_ADDri_V4, Hexagon_S4_addaddi
    O << ", add("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    break;
  case 3:
    // ADDr_MPYir_V4
    O << ", mpyi(#"; 
    printImmOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 4:
    // ADDr_MPYri_V4, ADDr_MPYrr_V4
    O << ", mpyi("; 
    printOperand(MI, 2, O); 
    break;
  case 5:
    // ADDr_SUBri_V4, ADDri_SUBr_V4, Hexagon_S4_subaddi
    O << ", sub(#"; 
    break;
  case 6:
    // ADDri_acc, MPYI_acc_ri, ORr_ANDri2_V4, ORr_ORri_V4, SUBri_acc
    printExtOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 7:
    // ADDrr_acc, ANDr_ANDr_NOTr_V4, ANDr_ANDrr_V4, ASL_ADD_rr, ASL_ADDd_rr, ...
    printOperand(MI, 3, O); 
    break;
  case 8:
    // AND_pp, AND_rr, AND_rr64, ANDd_NOTd_V4, ASL_rr, ASLd, ASR_rr, ASRd_rr,...
    printOperand(MI, 2, O); 
    break;
  case 9:
    // AND_ri, C4_cmpltei, C4_cmplteui, C4_cmpneqi, CMPEQri, CMPGTUri, CMPGTr...
    printExtOperand(MI, 2, O); 
    break;
  case 10:
    // ASL, ASLd_ri, ASR_ri, ASRd_ri, CLRBIT, CLRBIT_31, CMPbEQri_V4, CMPhEQr...
    printImmOperand(MI, 2, O); 
    break;
  case 11:
    // ASL_ADD_ri, ASL_ADDd_ri, ASL_AND_ri, ASL_ANDd_ri, ASL_OR_ri, ASL_ORd_r...
    printImmOperand(MI, 3, O); 
    break;
  case 12:
    // CONST32_Float_Real, CONST32_Int_Real, HI_label, HIi, LDrib, LDrid, LDr...
    O << ')'; 
    return;
    break;
  case 13:
    // HEXAGON_A2_addh_h16_hh, HEXAGON_A2_addh_h16_hl, HEXAGON_A2_addh_h16_sa...
    O << ".H, "; 
    printOperand(MI, 2, O); 
    break;
  case 14:
    // HEXAGON_A2_addh_h16_lh, HEXAGON_A2_addh_h16_ll, HEXAGON_A2_addh_h16_sa...
    O << ".L, "; 
    printOperand(MI, 2, O); 
    break;
  case 15:
    // HEXAGON_A2_tfrpi, HEXAGON_A2_tfrsi, TFRI, TFRI64, TFRI_V4, TFRI_f
    return;
    break;
  case 16:
    // HEXAGON_circ_ldd, POST_LDrib, POST_LDrid, POST_LDrih, POST_LDriub, POS...
    O << "++#"; 
    break;
  case 17:
    // Hexagon_C4_and_andn, Hexagon_C4_and_orn, Hexagon_C4_or_andn, Hexagon_C...
    O << ", !"; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 18:
    // LDrib_abs_set_V4, LDrid_abs_set_V4, LDrih_abs_set_V4, LDriub_abs_set_V...
    O << "=##"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 19:
    // LDrib_cNotPt, LDrib_cPt, LDrib_cdnNotPt, LDrib_cdnPt, LDrid_cNotPt, LD...
    printMEMriOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 20:
    // LDrib_ind_lo_V4, LDrih_ind_lo_V4, LDriub_ind_anyext_lo_V4, LDriub_ind_...
    O << "<<#"; 
    printImmOperand(MI, 2, O); 
    O << "+##"; 
    printGlobalOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 21:
    // LDrib_indexed, LDrid_indexed, LDrid_indexed_f, LDrih_indexed, LDriub_i...
    O << "+#"; 
    break;
  case 22:
    // LDrib_indexed_shl_V4, LDrid_indexed_shl_V4, LDrih_indexed_shl_V4, LDri...
    O << '+'; 
    printOperand(MI, 2, O); 
    O << "<<#"; 
    printImmOperand(MI, 3, O); 
    break;
  case 23:
    // MemOPb_ADDi_V4, MemOPh_ADDi_V4, MemOPw_ADDi_V4
    O << ") += #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 24:
    // MemOPb_ADDr_V4, MemOPh_ADDr_V4, MemOPw_ADDr_V4
    O << ") += "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 25:
    // MemOPb_ANDr_V4, MemOPh_ANDr_V4, MemOPw_ANDr_V4
    O << ") &= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 26:
    // MemOPb_CLRBITi_V4, MemOPh_CLRBITi_V4, MemOPw_CLRBITi_V4
    O << ") =clrbit(#"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 27:
    // MemOPb_ORr_V4, MemOPh_ORr_V4, MemOPw_ORr_V4
    O << ") |= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 28:
    // MemOPb_SETBITi_V4, MemOPh_SETBITi_V4, MemOPw_SETBITi_V4
    O << ") =setbit(#"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 29:
    // MemOPb_SUBi_V4, MemOPh_SUBi_V4, MemOPw_SUBi_V4
    O << ") -= #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 30:
    // MemOPb_SUBr_V4, MemOPh_SUBr_V4, MemOPw_SUBr_V4
    O << ") -= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 31:
    // STrib_cNotPt, STrib_cNotPt_nv_V4, STrib_cPt, STrib_cPt_nv_V4, STrib_cd...
    O << ") = "; 
    break;
  case 32:
    // STrib_imm_V4, STrih_imm_V4, STriw_imm_V4
    O << ") = #"; 
    printExtOperand(MI, 2, O); 
    return;
    break;
  case 33:
    // STrih_offset_ext_V4, STriw_offset_ext_V4
    O << ") = ##"; 
    printGlobalOperand(MI, 2, O); 
    return;
    break;
  case 34:
    // SUBi_ASLri_V4
    O << ", asl("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 35:
    // SUBi_LSRri_V4
    O << ", lsr("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 36:
    // TFR_FI_immext_V4
    O << ", ##"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  }


  // Fragment 4 encoded into 6 bits for 38 unique commands.
  switch ((Bits >> 34) & 63) {
  default:   // unreachable.
  case 0:
    // A2_add, ADD64_rr, ADD_rr, COMBINE_Ir_V4, HEXAGON_A2_add, HEXAGON_A2_ad...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // A2_paddf, A2_paddfnew, A2_paddt, A2_paddtnew, ADD_rr_cNotPt, ADD_rr_cP...
    printOperand(MI, 3, O); 
    break;
  case 2:
    // ADD_ri, ADDr_SUBri_V4, ADDri_SUBr_V4, COMBINE_iI_V4, LDrib_indexed, LD...
    printExtOperand(MI, 2, O); 
    break;
  case 3:
    // ADD_ri_cNotPt, ADD_ri_cPt, ADD_ri_cdnNotPt, ADD_ri_cdnPt, ADDr_ADDri_V...
    printExtOperand(MI, 3, O); 
    break;
  case 4:
    // ADDi_MPYri_V4, HEXAGON_S4_or_andix, Hexagon_S4_addaddi, POST_LDrib, PO...
    printImmOperand(MI, 3, O); 
    break;
  case 5:
    // ADDr_MPYri_V4, HEXAGON_C2_muxii, HEXAGON_C2_muxir, HEXAGON_S2_extractu...
    O << ", #"; 
    break;
  case 6:
    // ADDr_MPYrr_V4, HEXAGON_C2_mux, HEXAGON_C2_muxri, MUX_ir, MUX_rr
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 7:
    // ADDrr_acc, AND_pp, AND_ri, AND_rr, AND_rr64, ANDd_NOTd_V4, ANDr_ANDr_N...
    O << ')'; 
    return;
    break;
  case 8:
    // ADJDYNALLOC, COMBINE_Ii, COMBINE_ii, HEXAGON_A2_addi, HEXAGON_A2_combi...
    printImmOperand(MI, 2, O); 
    break;
  case 9:
    // HEXAGON_A2_addh_h16_hh, HEXAGON_A2_addh_h16_lh, HEXAGON_A2_subh_h16_hh...
    O << ".H):<<16"; 
    return;
    break;
  case 10:
    // HEXAGON_A2_addh_h16_hl, HEXAGON_A2_addh_h16_ll, HEXAGON_A2_subh_h16_hl...
    O << ".L):<<16"; 
    return;
    break;
  case 11:
    // HEXAGON_A2_addh_h16_sat_hh, HEXAGON_A2_addh_h16_sat_lh, HEXAGON_A2_sub...
    O << ".H):sat:<<16"; 
    return;
    break;
  case 12:
    // HEXAGON_A2_addh_h16_sat_hl, HEXAGON_A2_addh_h16_sat_ll, HEXAGON_A2_sub...
    O << ".L):sat:<<16"; 
    return;
    break;
  case 13:
    // HEXAGON_A2_addh_l16_hl, HEXAGON_A2_combine_hh, HEXAGON_A2_combine_lh, ...
    O << ".H)"; 
    return;
    break;
  case 14:
    // HEXAGON_A2_addh_l16_ll, HEXAGON_A2_combine_hl, HEXAGON_A2_combine_ll, ...
    O << ".L)"; 
    return;
    break;
  case 15:
    // HEXAGON_A2_addh_l16_sat_hl, HEXAGON_A2_subh_l16_sat_hl, HEXAGON_M2_mpy...
    O << ".H):sat"; 
    return;
    break;
  case 16:
    // HEXAGON_A2_addh_l16_sat_ll, HEXAGON_A2_subh_l16_sat_ll, HEXAGON_M2_mpy...
    O << ".L):sat"; 
    return;
    break;
  case 17:
    // HEXAGON_A2_subsat, HEXAGON_A4_round_ri_sat, HEXAGON_A4_round_rr_sat, H...
    O << "):sat"; 
    return;
    break;
  case 18:
    // HEXAGON_M2_dpmpyss_rnd_s0, HEXAGON_S2_asr_i_r_rnd, HEXAGON_S5_vasrhrnd...
    O << "):rnd"; 
    return;
    break;
  case 19:
    // HEXAGON_M2_hmmpyh_rs1, HEXAGON_M2_mpy_sat_rnd_hh_s1, HEXAGON_M2_mpy_sa...
    O << ".H):<<1:rnd:sat"; 
    return;
    break;
  case 20:
    // HEXAGON_M2_hmmpyl_rs1, HEXAGON_M2_mpy_sat_rnd_hl_s1, HEXAGON_M2_mpy_sa...
    O << ".L):<<1:rnd:sat"; 
    return;
    break;
  case 21:
    // HEXAGON_M2_mpy_acc_hh_s1, HEXAGON_M2_mpy_acc_lh_s1, HEXAGON_M2_mpy_hh_...
    O << ".H):<<1"; 
    return;
    break;
  case 22:
    // HEXAGON_M2_mpy_acc_hl_s1, HEXAGON_M2_mpy_acc_ll_s1, HEXAGON_M2_mpy_hl_...
    O << ".L):<<1"; 
    return;
    break;
  case 23:
    // HEXAGON_M2_mpy_acc_sat_hh_s1, HEXAGON_M2_mpy_acc_sat_lh_s1, HEXAGON_M2...
    O << ".H):<<1:sat"; 
    return;
    break;
  case 24:
    // HEXAGON_M2_mpy_acc_sat_hl_s1, HEXAGON_M2_mpy_acc_sat_ll_s1, HEXAGON_M2...
    O << ".L):<<1:sat"; 
    return;
    break;
  case 25:
    // HEXAGON_M2_mpy_rnd_hh_s0, HEXAGON_M2_mpy_rnd_lh_s0, HEXAGON_M2_mpyd_rn...
    O << ".H):rnd"; 
    return;
    break;
  case 26:
    // HEXAGON_M2_mpy_rnd_hh_s1, HEXAGON_M2_mpy_rnd_lh_s1, HEXAGON_M2_mpyd_rn...
    O << ".H):<<1:rnd"; 
    return;
    break;
  case 27:
    // HEXAGON_M2_mpy_rnd_hl_s0, HEXAGON_M2_mpy_rnd_ll_s0, HEXAGON_M2_mpyd_rn...
    O << ".L):rnd"; 
    return;
    break;
  case 28:
    // HEXAGON_M2_mpy_rnd_hl_s1, HEXAGON_M2_mpy_rnd_ll_s1, HEXAGON_M2_mpyd_rn...
    O << ".L):<<1:rnd"; 
    return;
    break;
  case 29:
    // HEXAGON_M2_mpy_sat_rnd_hh_s0, HEXAGON_M2_mpy_sat_rnd_lh_s0
    O << ".H):rnd:sat"; 
    return;
    break;
  case 30:
    // HEXAGON_M2_mpy_sat_rnd_hl_s0, HEXAGON_M2_mpy_sat_rnd_ll_s0
    O << ".L):rnd:sat"; 
    return;
    break;
  case 31:
    // HEXAGON_circ_ldd
    printImmOperand(MI, 5, O); 
    O << ":circ("; 
    printOperand(MI, 4, O); 
    O << "))"; 
    return;
    break;
  case 32:
    // LDrib_indexed_cNotPt, LDrib_indexed_cPt, LDrib_indexed_cdnNotPt, LDrib...
    O << "+#"; 
    printExtOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 33:
    // LDrib_indexed_shl_cNotPt_V4, LDrib_indexed_shl_cPt_V4, LDrib_indexed_s...
    O << '+'; 
    printOperand(MI, 3, O); 
    O << "<<#"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 34:
    // MAXUd_rr, MAXUw_rr, MAXd_rr, MAXw_dd, MAXw_rr, MINUd_rr, MINUw_rr, MIN...
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 35:
    // POST_LDrib_cNotPt, POST_LDrib_cPt, POST_LDrib_cdnNotPt_V4, POST_LDrib_...
    O << "++#"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 36:
    // STrib_indexed_shl_cNotPt_V4, STrib_indexed_shl_cNotPt_nv_V4, STrib_ind...
    O << ") = "; 
    printOperand(MI, 4, O); 
    break;
  case 37:
    // TFRI_cNotPt, TFRI_cNotPt_V4, TFRI_cPt, TFRI_cPt_V4, TFRI_cPt_f, TFRI_c...
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 40) & 15) {
  default:   // unreachable.
  case 0:
    // A2_add, A2_paddf, A2_paddfnew, A2_paddt, A2_paddtnew, ADD64_rr, ADD_ri...
    O << ')'; 
    return;
    break;
  case 1:
    // ADDi_MPYri_V4, ADDi_MPYrr_V4, ADDr_ADDri_V4, ADDr_MPYrr_V4, HEXAGON_S4...
    O << "))"; 
    return;
    break;
  case 2:
    // ADDr_MPYri_V4, MUX_ri
    printExtOperand(MI, 3, O); 
    break;
  case 3:
    // ADDr_SUBri_V4, ADDri_SUBr_V4, HEXAGON_F2_dffma_sc, HEXAGON_F2_sffma_sc...
    O << ", "; 
    break;
  case 4:
    // HEXAGON_A2_addsat
    O << "):sat"; 
    return;
    break;
  case 5:
    // HEXAGON_C2_muxii, HEXAGON_C2_muxir, HEXAGON_S2_extractu, HEXAGON_S2_ex...
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 6:
    // HEXAGON_F2_dffma_lib, HEXAGON_F2_sffma_lib
    O << "):lib"; 
    return;
    break;
  case 7:
    // Hexagon_S2_insert, Hexagon_S2_insertp
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 8:
    // POST_STbri_cNotPt, POST_STbri_cNotPt_nv_V4, POST_STbri_cPt, POST_STbri...
    O << ") = "; 
    break;
  case 9:
    // STrib_cNotPt, STrib_cPt, STrib_cdnNotPt_V4, STrib_cdnPt_V4, STrib_inde...
    return;
    break;
  case 10:
    // STrib_cNotPt_nv_V4, STrib_cPt_nv_V4, STrib_cdnNotPt_nv_V4, STrib_cdnPt...
    O << ".new"; 
    return;
    break;
  case 11:
    // STrib_imm_cNotPt_V4, STrib_imm_cPt_V4, STrib_imm_cdnNotPt_V4, STrib_im...
    O << ") = #"; 
    printExtOperand(MI, 3, O); 
    return;
    break;
  }


  // Fragment 6 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 44) & 3) {
  default:   // unreachable.
  case 0:
    // ADDr_MPYri_V4
    O << "))"; 
    return;
    break;
  case 1:
    // ADDr_SUBri_V4, ADDri_SUBr_V4, Hexagon_S4_subaddi, STrib_indexed_cNotPt...
    printOperand(MI, 3, O); 
    break;
  case 2:
    // HEXAGON_F2_dffma_sc, HEXAGON_F2_sffma_sc, POST_STbri_cNotPt, POST_STbr...
    printOperand(MI, 4, O); 
    break;
  case 3:
    // MUX_ri
    O << ')'; 
    return;
    break;
  }


  // Fragment 7 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 46) & 7) {
  default:   // unreachable.
  case 0:
    // ADDr_SUBri_V4, ADDri_SUBr_V4
    O << "))"; 
    return;
    break;
  case 1:
    // HEXAGON_F2_dffma_sc, HEXAGON_F2_sffma_sc
    O << "):scale"; 
    return;
    break;
  case 2:
    // Hexagon_S4_subaddi
    O << ')'; 
    return;
    break;
  case 3:
    // POST_STbri_cNotPt, POST_STbri_cPt, POST_STbri_cdnNotPt_V4, POST_STbri_...
    return;
    break;
  case 4:
    // POST_STbri_cNotPt_nv_V4, POST_STbri_cPt_nv_V4, POST_STbri_cdnNotPt_nv_...
    O << ".new"; 
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *HexagonInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 64 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'r', '1', '1', ':', '1', '0', 0,
  /* 7 */ 'r', '1', '0', 0,
  /* 11 */ 'r', '2', '1', ':', '2', '0', 0,
  /* 18 */ 'r', '2', '0', 0,
  /* 22 */ 'r', '3', '1', ':', '3', '0', 0,
  /* 29 */ 'r', '3', '0', 0,
  /* 33 */ 'r', '1', ':', '0', 0,
  /* 38 */ 's', 'a', '0', 0,
  /* 42 */ 'l', 'c', '0', 0,
  /* 46 */ 'm', '0', 0,
  /* 49 */ 'p', '0', 0,
  /* 52 */ 'r', '0', 0,
  /* 55 */ 'r', '1', '1', 0,
  /* 59 */ 'r', '2', '1', 0,
  /* 63 */ 'r', '3', '1', 0,
  /* 67 */ 's', 'a', '1', 0,
  /* 71 */ 'l', 'c', '1', 0,
  /* 75 */ 'm', '1', 0,
  /* 78 */ 'p', '1', 0,
  /* 81 */ 'r', '1', 0,
  /* 84 */ 'r', '1', '3', ':', '1', '2', 0,
  /* 91 */ 'r', '1', '2', 0,
  /* 95 */ 'r', '2', '3', ':', '2', '2', 0,
  /* 102 */ 'r', '2', '2', 0,
  /* 106 */ 'r', '3', ':', '2', 0,
  /* 111 */ 'p', '2', 0,
  /* 114 */ 'r', '2', 0,
  /* 117 */ 'r', '1', '3', 0,
  /* 121 */ 'r', '2', '3', 0,
  /* 125 */ 'p', '3', 0,
  /* 128 */ 'r', '3', 0,
  /* 131 */ 'r', '1', '5', ':', '1', '4', 0,
  /* 138 */ 'r', '1', '4', 0,
  /* 142 */ 'r', '2', '5', ':', '2', '4', 0,
  /* 149 */ 'r', '2', '4', 0,
  /* 153 */ 'r', '5', ':', '4', 0,
  /* 158 */ 'r', '4', 0,
  /* 161 */ 'r', '1', '5', 0,
  /* 165 */ 'r', '2', '5', 0,
  /* 169 */ 'r', '5', 0,
  /* 172 */ 'r', '1', '7', ':', '1', '6', 0,
  /* 179 */ 'r', '1', '6', 0,
  /* 183 */ 'r', '2', '7', ':', '2', '6', 0,
  /* 190 */ 'r', '2', '6', 0,
  /* 194 */ 'r', '7', ':', '6', 0,
  /* 199 */ 'r', '6', 0,
  /* 202 */ 'r', '1', '7', 0,
  /* 206 */ 'r', '2', '7', 0,
  /* 210 */ 'r', '7', 0,
  /* 213 */ 'r', '1', '9', ':', '1', '8', 0,
  /* 220 */ 'r', '1', '8', 0,
  /* 224 */ 'r', '2', '9', ':', '2', '8', 0,
  /* 231 */ 'r', '2', '8', 0,
  /* 235 */ 'r', '9', ':', '8', 0,
  /* 240 */ 'r', '8', 0,
  /* 243 */ 'r', '1', '9', 0,
  /* 247 */ 'r', '2', '9', 0,
  /* 251 */ 'r', '9', 0,
  /* 254 */ 'p', 'c', 0,
  /* 257 */ 'f', 'p', 0,
  /* 260 */ 'g', 'p', 0,
  /* 263 */ 's', 'p', 0,
  /* 266 */ 'l', 'r', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    257, 260, 266, 254, 263, 33, 106, 153, 194, 235, 0, 84, 131, 172, 
    213, 11, 95, 142, 183, 224, 22, 42, 71, 46, 75, 49, 78, 111, 
    125, 52, 81, 114, 128, 158, 169, 199, 210, 240, 251, 7, 55, 91, 
    117, 138, 161, 179, 202, 220, 243, 18, 59, 102, 121, 149, 165, 190, 
    206, 231, 247, 29, 63, 38, 67, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool HexagonInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
