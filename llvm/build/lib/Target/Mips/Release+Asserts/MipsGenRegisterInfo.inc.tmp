/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Register Enum Values                                                 *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM
namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass MipsMCRegisterClasses[];

namespace Mips {
enum {
  NoRegister,
  AT = 1,
  DSPCCond = 2,
  DSPCarry = 3,
  DSPEFI = 4,
  DSPOutFlag = 5,
  DSPPos = 6,
  DSPSCount = 7,
  FP = 8,
  GP = 9,
  MSAAccess = 10,
  MSACSR = 11,
  MSAIR = 12,
  MSAMap = 13,
  MSAModify = 14,
  MSARequest = 15,
  MSASave = 16,
  MSAUnmap = 17,
  PC = 18,
  RA = 19,
  SP = 20,
  ZERO = 21,
  A0 = 22,
  A1 = 23,
  A2 = 24,
  A3 = 25,
  AC0 = 26,
  AC1 = 27,
  AC2 = 28,
  AC3 = 29,
  AT_64 = 30,
  COP20 = 31,
  COP21 = 32,
  COP22 = 33,
  COP23 = 34,
  COP24 = 35,
  COP25 = 36,
  COP26 = 37,
  COP27 = 38,
  COP28 = 39,
  COP29 = 40,
  COP30 = 41,
  COP31 = 42,
  COP32 = 43,
  COP33 = 44,
  COP34 = 45,
  COP35 = 46,
  COP36 = 47,
  COP37 = 48,
  COP38 = 49,
  COP39 = 50,
  COP210 = 51,
  COP211 = 52,
  COP212 = 53,
  COP213 = 54,
  COP214 = 55,
  COP215 = 56,
  COP216 = 57,
  COP217 = 58,
  COP218 = 59,
  COP219 = 60,
  COP220 = 61,
  COP221 = 62,
  COP222 = 63,
  COP223 = 64,
  COP224 = 65,
  COP225 = 66,
  COP226 = 67,
  COP227 = 68,
  COP228 = 69,
  COP229 = 70,
  COP230 = 71,
  COP231 = 72,
  COP310 = 73,
  COP311 = 74,
  COP312 = 75,
  COP313 = 76,
  COP314 = 77,
  COP315 = 78,
  COP316 = 79,
  COP317 = 80,
  COP318 = 81,
  COP319 = 82,
  COP320 = 83,
  COP321 = 84,
  COP322 = 85,
  COP323 = 86,
  COP324 = 87,
  COP325 = 88,
  COP326 = 89,
  COP327 = 90,
  COP328 = 91,
  COP329 = 92,
  COP330 = 93,
  COP331 = 94,
  D0 = 95,
  D1 = 96,
  D2 = 97,
  D3 = 98,
  D4 = 99,
  D5 = 100,
  D6 = 101,
  D7 = 102,
  D8 = 103,
  D9 = 104,
  D10 = 105,
  D11 = 106,
  D12 = 107,
  D13 = 108,
  D14 = 109,
  D15 = 110,
  DSPOutFlag20 = 111,
  DSPOutFlag21 = 112,
  DSPOutFlag22 = 113,
  DSPOutFlag23 = 114,
  F0 = 115,
  F1 = 116,
  F2 = 117,
  F3 = 118,
  F4 = 119,
  F5 = 120,
  F6 = 121,
  F7 = 122,
  F8 = 123,
  F9 = 124,
  F10 = 125,
  F11 = 126,
  F12 = 127,
  F13 = 128,
  F14 = 129,
  F15 = 130,
  F16 = 131,
  F17 = 132,
  F18 = 133,
  F19 = 134,
  F20 = 135,
  F21 = 136,
  F22 = 137,
  F23 = 138,
  F24 = 139,
  F25 = 140,
  F26 = 141,
  F27 = 142,
  F28 = 143,
  F29 = 144,
  F30 = 145,
  F31 = 146,
  FCC0 = 147,
  FCC1 = 148,
  FCC2 = 149,
  FCC3 = 150,
  FCC4 = 151,
  FCC5 = 152,
  FCC6 = 153,
  FCC7 = 154,
  FCR0 = 155,
  FCR1 = 156,
  FCR2 = 157,
  FCR3 = 158,
  FCR4 = 159,
  FCR5 = 160,
  FCR6 = 161,
  FCR7 = 162,
  FCR8 = 163,
  FCR9 = 164,
  FCR10 = 165,
  FCR11 = 166,
  FCR12 = 167,
  FCR13 = 168,
  FCR14 = 169,
  FCR15 = 170,
  FCR16 = 171,
  FCR17 = 172,
  FCR18 = 173,
  FCR19 = 174,
  FCR20 = 175,
  FCR21 = 176,
  FCR22 = 177,
  FCR23 = 178,
  FCR24 = 179,
  FCR25 = 180,
  FCR26 = 181,
  FCR27 = 182,
  FCR28 = 183,
  FCR29 = 184,
  FCR30 = 185,
  FCR31 = 186,
  FP_64 = 187,
  F_HI0 = 188,
  F_HI1 = 189,
  F_HI2 = 190,
  F_HI3 = 191,
  F_HI4 = 192,
  F_HI5 = 193,
  F_HI6 = 194,
  F_HI7 = 195,
  F_HI8 = 196,
  F_HI9 = 197,
  F_HI10 = 198,
  F_HI11 = 199,
  F_HI12 = 200,
  F_HI13 = 201,
  F_HI14 = 202,
  F_HI15 = 203,
  F_HI16 = 204,
  F_HI17 = 205,
  F_HI18 = 206,
  F_HI19 = 207,
  F_HI20 = 208,
  F_HI21 = 209,
  F_HI22 = 210,
  F_HI23 = 211,
  F_HI24 = 212,
  F_HI25 = 213,
  F_HI26 = 214,
  F_HI27 = 215,
  F_HI28 = 216,
  F_HI29 = 217,
  F_HI30 = 218,
  F_HI31 = 219,
  GP_64 = 220,
  HI0 = 221,
  HI1 = 222,
  HI2 = 223,
  HI3 = 224,
  HWR0 = 225,
  HWR1 = 226,
  HWR2 = 227,
  HWR3 = 228,
  HWR4 = 229,
  HWR5 = 230,
  HWR6 = 231,
  HWR7 = 232,
  HWR8 = 233,
  HWR9 = 234,
  HWR10 = 235,
  HWR11 = 236,
  HWR12 = 237,
  HWR13 = 238,
  HWR14 = 239,
  HWR15 = 240,
  HWR16 = 241,
  HWR17 = 242,
  HWR18 = 243,
  HWR19 = 244,
  HWR20 = 245,
  HWR21 = 246,
  HWR22 = 247,
  HWR23 = 248,
  HWR24 = 249,
  HWR25 = 250,
  HWR26 = 251,
  HWR27 = 252,
  HWR28 = 253,
  HWR29 = 254,
  HWR30 = 255,
  HWR31 = 256,
  K0 = 257,
  K1 = 258,
  LO0 = 259,
  LO1 = 260,
  LO2 = 261,
  LO3 = 262,
  MPL0 = 263,
  MPL1 = 264,
  MPL2 = 265,
  P0 = 266,
  P1 = 267,
  P2 = 268,
  RA_64 = 269,
  S0 = 270,
  S1 = 271,
  S2 = 272,
  S3 = 273,
  S4 = 274,
  S5 = 275,
  S6 = 276,
  S7 = 277,
  SP_64 = 278,
  T0 = 279,
  T1 = 280,
  T2 = 281,
  T3 = 282,
  T4 = 283,
  T5 = 284,
  T6 = 285,
  T7 = 286,
  T8 = 287,
  T9 = 288,
  V0 = 289,
  V1 = 290,
  W0 = 291,
  W1 = 292,
  W2 = 293,
  W3 = 294,
  W4 = 295,
  W5 = 296,
  W6 = 297,
  W7 = 298,
  W8 = 299,
  W9 = 300,
  W10 = 301,
  W11 = 302,
  W12 = 303,
  W13 = 304,
  W14 = 305,
  W15 = 306,
  W16 = 307,
  W17 = 308,
  W18 = 309,
  W19 = 310,
  W20 = 311,
  W21 = 312,
  W22 = 313,
  W23 = 314,
  W24 = 315,
  W25 = 316,
  W26 = 317,
  W27 = 318,
  W28 = 319,
  W29 = 320,
  W30 = 321,
  W31 = 322,
  ZERO_64 = 323,
  A0_64 = 324,
  A1_64 = 325,
  A2_64 = 326,
  A3_64 = 327,
  AC0_64 = 328,
  D0_64 = 329,
  D1_64 = 330,
  D2_64 = 331,
  D3_64 = 332,
  D4_64 = 333,
  D5_64 = 334,
  D6_64 = 335,
  D7_64 = 336,
  D8_64 = 337,
  D9_64 = 338,
  D10_64 = 339,
  D11_64 = 340,
  D12_64 = 341,
  D13_64 = 342,
  D14_64 = 343,
  D15_64 = 344,
  D16_64 = 345,
  D17_64 = 346,
  D18_64 = 347,
  D19_64 = 348,
  D20_64 = 349,
  D21_64 = 350,
  D22_64 = 351,
  D23_64 = 352,
  D24_64 = 353,
  D25_64 = 354,
  D26_64 = 355,
  D27_64 = 356,
  D28_64 = 357,
  D29_64 = 358,
  D30_64 = 359,
  D31_64 = 360,
  DSPOutFlag16_19 = 361,
  HI0_64 = 362,
  K0_64 = 363,
  K1_64 = 364,
  LO0_64 = 365,
  S0_64 = 366,
  S1_64 = 367,
  S2_64 = 368,
  S3_64 = 369,
  S4_64 = 370,
  S5_64 = 371,
  S6_64 = 372,
  S7_64 = 373,
  T0_64 = 374,
  T1_64 = 375,
  T2_64 = 376,
  T3_64 = 377,
  T4_64 = 378,
  T5_64 = 379,
  T6_64 = 380,
  T7_64 = 381,
  T8_64 = 382,
  T9_64 = 383,
  V0_64 = 384,
  V1_64 = 385,
  NUM_TARGET_REGS 	// 386
};
}

// Register classes
namespace Mips {
enum {
  OddSPRegClassID = 0,
  CCRRegClassID = 1,
  COP2RegClassID = 2,
  COP3RegClassID = 3,
  DSPRRegClassID = 4,
  FGR32RegClassID = 5,
  FGRCCRegClassID = 6,
  FGRH32RegClassID = 7,
  GPR32RegClassID = 8,
  HWRegsRegClassID = 9,
  OddSP_with_sub_hiRegClassID = 10,
  FGR32_and_OddSPRegClassID = 11,
  FGRH32_and_OddSPRegClassID = 12,
  OddSP_with_sub_hi_with_sub_hi_in_FGRH32RegClassID = 13,
  CPU16RegsPlusSPRegClassID = 14,
  CPU16RegsRegClassID = 15,
  FCCRegClassID = 16,
  GPRMM16RegClassID = 17,
  MSACtrlRegClassID = 18,
  OddSP_with_sub_hi_with_sub_hi_in_FGR32RegClassID = 19,
  HI32DSPRegClassID = 20,
  LO32DSPRegClassID = 21,
  CPURARegRegClassID = 22,
  CPUSPRegRegClassID = 23,
  DSPCCRegClassID = 24,
  HI32RegClassID = 25,
  LO32RegClassID = 26,
  FGR64RegClassID = 27,
  GPR64RegClassID = 28,
  AFGR64RegClassID = 29,
  FGR64_and_OddSPRegClassID = 30,
  GPR64_with_sub_32_in_CPU16RegsPlusSPRegClassID = 31,
  AFGR64_and_OddSPRegClassID = 32,
  GPR64_with_sub_32_in_CPU16RegsRegClassID = 33,
  ACC64DSPRegClassID = 34,
  OCTEON_MPLRegClassID = 35,
  OCTEON_PRegClassID = 36,
  ACC64RegClassID = 37,
  GPR64_with_sub_32_in_CPURARegRegClassID = 38,
  GPR64_with_sub_32_in_CPUSPRegRegClassID = 39,
  HI64RegClassID = 40,
  LO64RegClassID = 41,
  MSA128BRegClassID = 42,
  MSA128DRegClassID = 43,
  MSA128HRegClassID = 44,
  MSA128WRegClassID = 45,
  MSA128B_with_sub_64_in_OddSPRegClassID = 46,
  ACC128RegClassID = 47
  };
}

// Subregister indices
namespace Mips {
enum {
  NoSubRegister,
  sub_32,	// 1
  sub_64,	// 2
  sub_dsp16_19,	// 3
  sub_dsp20,	// 4
  sub_dsp21,	// 5
  sub_dsp22,	// 6
  sub_dsp23,	// 7
  sub_hi,	// 8
  sub_lo,	// 9
  sub_hi_then_sub_32,	// 10
  sub_32_sub_hi_then_sub_32,	// 11
  NUM_TARGET_SUBREGS
};
}
} // End llvm namespace 
#endif // GET_REGINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*MC Register Information                                                     *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC
namespace llvm {

extern const MCPhysReg MipsRegDiffLists[] = {
  /* 0 */ 0, 0,
  /* 2 */ 4, 1, 1, 1, 1, 0,
  /* 8 */ 356, 65286, 1, 1, 1, 0,
  /* 14 */ 20, 1, 0,
  /* 17 */ 21, 1, 0,
  /* 20 */ 22, 1, 0,
  /* 23 */ 23, 1, 0,
  /* 26 */ 24, 1, 0,
  /* 29 */ 25, 1, 0,
  /* 32 */ 26, 1, 0,
  /* 35 */ 27, 1, 0,
  /* 38 */ 28, 1, 0,
  /* 41 */ 29, 1, 0,
  /* 44 */ 30, 1, 0,
  /* 47 */ 31, 1, 0,
  /* 50 */ 32, 1, 0,
  /* 53 */ 33, 1, 0,
  /* 56 */ 34, 1, 0,
  /* 59 */ 35, 1, 0,
  /* 62 */ 65447, 1, 0,
  /* 65 */ 65513, 1, 0,
  /* 68 */ 3, 0,
  /* 70 */ 4, 0,
  /* 72 */ 6, 0,
  /* 74 */ 11, 0,
  /* 76 */ 12, 0,
  /* 78 */ 22, 0,
  /* 80 */ 23, 0,
  /* 82 */ 29, 0,
  /* 84 */ 30, 0,
  /* 86 */ 65308, 72, 0,
  /* 89 */ 65346, 72, 0,
  /* 92 */ 38, 65322, 73, 0,
  /* 96 */ 95, 0,
  /* 98 */ 96, 0,
  /* 100 */ 106, 0,
  /* 102 */ 179, 0,
  /* 104 */ 211, 0,
  /* 106 */ 250, 0,
  /* 108 */ 258, 0,
  /* 110 */ 302, 0,
  /* 112 */ 65047, 0,
  /* 114 */ 65124, 0,
  /* 116 */ 65180, 0,
  /* 118 */ 65234, 0,
  /* 120 */ 65237, 0,
  /* 122 */ 65278, 0,
  /* 124 */ 65286, 0,
  /* 126 */ 65303, 0,
  /* 128 */ 65325, 0,
  /* 130 */ 37, 65430, 103, 65395, 65341, 0,
  /* 136 */ 65357, 0,
  /* 138 */ 65395, 0,
  /* 140 */ 65410, 0,
  /* 142 */ 65415, 0,
  /* 144 */ 65427, 0,
  /* 146 */ 65428, 0,
  /* 148 */ 65429, 0,
  /* 150 */ 65430, 0,
  /* 152 */ 65440, 0,
  /* 154 */ 65441, 0,
  /* 156 */ 141, 65498, 0,
  /* 159 */ 233, 65498, 0,
  /* 162 */ 65516, 234, 65498, 0,
  /* 166 */ 65515, 235, 65498, 0,
  /* 170 */ 65514, 236, 65498, 0,
  /* 174 */ 65513, 237, 65498, 0,
  /* 178 */ 65512, 238, 65498, 0,
  /* 182 */ 65511, 239, 65498, 0,
  /* 186 */ 65510, 240, 65498, 0,
  /* 190 */ 65509, 241, 65498, 0,
  /* 194 */ 65508, 242, 65498, 0,
  /* 198 */ 65507, 243, 65498, 0,
  /* 202 */ 65506, 244, 65498, 0,
  /* 206 */ 65505, 245, 65498, 0,
  /* 210 */ 65504, 246, 65498, 0,
  /* 214 */ 65503, 247, 65498, 0,
  /* 218 */ 65502, 248, 65498, 0,
  /* 222 */ 65501, 249, 65498, 0,
  /* 226 */ 65500, 250, 65498, 0,
  /* 230 */ 65303, 339, 65499, 0,
  /* 234 */ 65341, 336, 65502, 0,
  /* 238 */ 65507, 0,
  /* 240 */ 65510, 0,
  /* 242 */ 65511, 0,
  /* 244 */ 65512, 0,
  /* 246 */ 65516, 0,
  /* 248 */ 65521, 0,
  /* 250 */ 65522, 0,
  /* 252 */ 65535, 0,
};

extern const uint16_t MipsSubRegIdxLists[] = {
  /* 0 */ 1, 0,
  /* 2 */ 3, 4, 5, 6, 7, 0,
  /* 8 */ 2, 9, 8, 0,
  /* 12 */ 9, 1, 8, 10, 11, 0,
};

extern const MCRegisterInfo::SubRegCoveredBits MipsSubRegIdxRanges[] = {
  { 65535, 65535 },
  { 0, 32 },	// sub_32
  { 0, 64 },	// sub_64
  { 16, 4 },	// sub_dsp16_19
  { 20, 1 },	// sub_dsp20
  { 21, 1 },	// sub_dsp21
  { 22, 1 },	// sub_dsp22
  { 23, 1 },	// sub_dsp23
  { 32, 32 },	// sub_hi
  { 0, 32 },	// sub_lo
  { 32, 32 },	// sub_hi_then_sub_32
  { 0, 64 },	// sub_32_sub_hi_then_sub_32
};

extern const char MipsRegStrings[] = {
  /* 0 */ 'C', 'O', 'P', '2', '1', '0', 0,
  /* 7 */ 'C', 'O', 'P', '3', '1', '0', 0,
  /* 14 */ 'D', '1', '0', 0,
  /* 18 */ 'F', '1', '0', 0,
  /* 22 */ 'F', '_', 'H', 'I', '1', '0', 0,
  /* 29 */ 'F', 'C', 'R', '1', '0', 0,
  /* 35 */ 'H', 'W', 'R', '1', '0', 0,
  /* 41 */ 'W', '1', '0', 0,
  /* 45 */ 'C', 'O', 'P', '2', '2', '0', 0,
  /* 52 */ 'C', 'O', 'P', '3', '2', '0', 0,
  /* 59 */ 'F', '2', '0', 0,
  /* 63 */ 'F', '_', 'H', 'I', '2', '0', 0,
  /* 70 */ 'C', 'O', 'P', '2', '0', 0,
  /* 76 */ 'F', 'C', 'R', '2', '0', 0,
  /* 82 */ 'H', 'W', 'R', '2', '0', 0,
  /* 88 */ 'W', '2', '0', 0,
  /* 92 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '0', 0,
  /* 105 */ 'C', 'O', 'P', '2', '3', '0', 0,
  /* 112 */ 'C', 'O', 'P', '3', '3', '0', 0,
  /* 119 */ 'F', '3', '0', 0,
  /* 123 */ 'F', '_', 'H', 'I', '3', '0', 0,
  /* 130 */ 'C', 'O', 'P', '3', '0', 0,
  /* 136 */ 'F', 'C', 'R', '3', '0', 0,
  /* 142 */ 'H', 'W', 'R', '3', '0', 0,
  /* 148 */ 'W', '3', '0', 0,
  /* 152 */ 'A', '0', 0,
  /* 155 */ 'A', 'C', '0', 0,
  /* 159 */ 'F', 'C', 'C', '0', 0,
  /* 164 */ 'D', '0', 0,
  /* 167 */ 'F', '0', 0,
  /* 170 */ 'F', '_', 'H', 'I', '0', 0,
  /* 176 */ 'K', '0', 0,
  /* 179 */ 'M', 'P', 'L', '0', 0,
  /* 184 */ 'L', 'O', '0', 0,
  /* 188 */ 'P', '0', 0,
  /* 191 */ 'F', 'C', 'R', '0', 0,
  /* 196 */ 'H', 'W', 'R', '0', 0,
  /* 201 */ 'S', '0', 0,
  /* 204 */ 'T', '0', 0,
  /* 207 */ 'V', '0', 0,
  /* 210 */ 'W', '0', 0,
  /* 213 */ 'C', 'O', 'P', '2', '1', '1', 0,
  /* 220 */ 'C', 'O', 'P', '3', '1', '1', 0,
  /* 227 */ 'D', '1', '1', 0,
  /* 231 */ 'F', '1', '1', 0,
  /* 235 */ 'F', '_', 'H', 'I', '1', '1', 0,
  /* 242 */ 'F', 'C', 'R', '1', '1', 0,
  /* 248 */ 'H', 'W', 'R', '1', '1', 0,
  /* 254 */ 'W', '1', '1', 0,
  /* 258 */ 'C', 'O', 'P', '2', '2', '1', 0,
  /* 265 */ 'C', 'O', 'P', '3', '2', '1', 0,
  /* 272 */ 'F', '2', '1', 0,
  /* 276 */ 'F', '_', 'H', 'I', '2', '1', 0,
  /* 283 */ 'C', 'O', 'P', '2', '1', 0,
  /* 289 */ 'F', 'C', 'R', '2', '1', 0,
  /* 295 */ 'H', 'W', 'R', '2', '1', 0,
  /* 301 */ 'W', '2', '1', 0,
  /* 305 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '1', 0,
  /* 318 */ 'C', 'O', 'P', '2', '3', '1', 0,
  /* 325 */ 'C', 'O', 'P', '3', '3', '1', 0,
  /* 332 */ 'F', '3', '1', 0,
  /* 336 */ 'F', '_', 'H', 'I', '3', '1', 0,
  /* 343 */ 'C', 'O', 'P', '3', '1', 0,
  /* 349 */ 'F', 'C', 'R', '3', '1', 0,
  /* 355 */ 'H', 'W', 'R', '3', '1', 0,
  /* 361 */ 'W', '3', '1', 0,
  /* 365 */ 'A', '1', 0,
  /* 368 */ 'A', 'C', '1', 0,
  /* 372 */ 'F', 'C', 'C', '1', 0,
  /* 377 */ 'D', '1', 0,
  /* 380 */ 'F', '1', 0,
  /* 383 */ 'F', '_', 'H', 'I', '1', 0,
  /* 389 */ 'K', '1', 0,
  /* 392 */ 'M', 'P', 'L', '1', 0,
  /* 397 */ 'L', 'O', '1', 0,
  /* 401 */ 'P', '1', 0,
  /* 404 */ 'F', 'C', 'R', '1', 0,
  /* 409 */ 'H', 'W', 'R', '1', 0,
  /* 414 */ 'S', '1', 0,
  /* 417 */ 'T', '1', 0,
  /* 420 */ 'V', '1', 0,
  /* 423 */ 'W', '1', 0,
  /* 426 */ 'C', 'O', 'P', '2', '1', '2', 0,
  /* 433 */ 'C', 'O', 'P', '3', '1', '2', 0,
  /* 440 */ 'D', '1', '2', 0,
  /* 444 */ 'F', '1', '2', 0,
  /* 448 */ 'F', '_', 'H', 'I', '1', '2', 0,
  /* 455 */ 'F', 'C', 'R', '1', '2', 0,
  /* 461 */ 'H', 'W', 'R', '1', '2', 0,
  /* 467 */ 'W', '1', '2', 0,
  /* 471 */ 'C', 'O', 'P', '2', '2', '2', 0,
  /* 478 */ 'C', 'O', 'P', '3', '2', '2', 0,
  /* 485 */ 'F', '2', '2', 0,
  /* 489 */ 'F', '_', 'H', 'I', '2', '2', 0,
  /* 496 */ 'C', 'O', 'P', '2', '2', 0,
  /* 502 */ 'F', 'C', 'R', '2', '2', 0,
  /* 508 */ 'H', 'W', 'R', '2', '2', 0,
  /* 514 */ 'W', '2', '2', 0,
  /* 518 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '2', 0,
  /* 531 */ 'C', 'O', 'P', '3', '2', 0,
  /* 537 */ 'A', '2', 0,
  /* 540 */ 'A', 'C', '2', 0,
  /* 544 */ 'F', 'C', 'C', '2', 0,
  /* 549 */ 'D', '2', 0,
  /* 552 */ 'F', '2', 0,
  /* 555 */ 'F', '_', 'H', 'I', '2', 0,
  /* 561 */ 'M', 'P', 'L', '2', 0,
  /* 566 */ 'L', 'O', '2', 0,
  /* 570 */ 'P', '2', 0,
  /* 573 */ 'F', 'C', 'R', '2', 0,
  /* 578 */ 'H', 'W', 'R', '2', 0,
  /* 583 */ 'S', '2', 0,
  /* 586 */ 'T', '2', 0,
  /* 589 */ 'W', '2', 0,
  /* 592 */ 'C', 'O', 'P', '2', '1', '3', 0,
  /* 599 */ 'C', 'O', 'P', '3', '1', '3', 0,
  /* 606 */ 'D', '1', '3', 0,
  /* 610 */ 'F', '1', '3', 0,
  /* 614 */ 'F', '_', 'H', 'I', '1', '3', 0,
  /* 621 */ 'F', 'C', 'R', '1', '3', 0,
  /* 627 */ 'H', 'W', 'R', '1', '3', 0,
  /* 633 */ 'W', '1', '3', 0,
  /* 637 */ 'C', 'O', 'P', '2', '2', '3', 0,
  /* 644 */ 'C', 'O', 'P', '3', '2', '3', 0,
  /* 651 */ 'F', '2', '3', 0,
  /* 655 */ 'F', '_', 'H', 'I', '2', '3', 0,
  /* 662 */ 'C', 'O', 'P', '2', '3', 0,
  /* 668 */ 'F', 'C', 'R', '2', '3', 0,
  /* 674 */ 'H', 'W', 'R', '2', '3', 0,
  /* 680 */ 'W', '2', '3', 0,
  /* 684 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '3', 0,
  /* 697 */ 'C', 'O', 'P', '3', '3', 0,
  /* 703 */ 'A', '3', 0,
  /* 706 */ 'A', 'C', '3', 0,
  /* 710 */ 'F', 'C', 'C', '3', 0,
  /* 715 */ 'D', '3', 0,
  /* 718 */ 'F', '3', 0,
  /* 721 */ 'F', '_', 'H', 'I', '3', 0,
  /* 727 */ 'L', 'O', '3', 0,
  /* 731 */ 'F', 'C', 'R', '3', 0,
  /* 736 */ 'H', 'W', 'R', '3', 0,
  /* 741 */ 'S', '3', 0,
  /* 744 */ 'T', '3', 0,
  /* 747 */ 'W', '3', 0,
  /* 750 */ 'C', 'O', 'P', '2', '1', '4', 0,
  /* 757 */ 'C', 'O', 'P', '3', '1', '4', 0,
  /* 764 */ 'D', '1', '4', 0,
  /* 768 */ 'F', '1', '4', 0,
  /* 772 */ 'F', '_', 'H', 'I', '1', '4', 0,
  /* 779 */ 'F', 'C', 'R', '1', '4', 0,
  /* 785 */ 'H', 'W', 'R', '1', '4', 0,
  /* 791 */ 'W', '1', '4', 0,
  /* 795 */ 'C', 'O', 'P', '2', '2', '4', 0,
  /* 802 */ 'C', 'O', 'P', '3', '2', '4', 0,
  /* 809 */ 'F', '2', '4', 0,
  /* 813 */ 'F', '_', 'H', 'I', '2', '4', 0,
  /* 820 */ 'C', 'O', 'P', '2', '4', 0,
  /* 826 */ 'F', 'C', 'R', '2', '4', 0,
  /* 832 */ 'H', 'W', 'R', '2', '4', 0,
  /* 838 */ 'W', '2', '4', 0,
  /* 842 */ 'C', 'O', 'P', '3', '4', 0,
  /* 848 */ 'D', '1', '0', '_', '6', '4', 0,
  /* 855 */ 'D', '2', '0', '_', '6', '4', 0,
  /* 862 */ 'D', '3', '0', '_', '6', '4', 0,
  /* 869 */ 'A', '0', '_', '6', '4', 0,
  /* 875 */ 'A', 'C', '0', '_', '6', '4', 0,
  /* 882 */ 'D', '0', '_', '6', '4', 0,
  /* 888 */ 'H', 'I', '0', '_', '6', '4', 0,
  /* 895 */ 'K', '0', '_', '6', '4', 0,
  /* 901 */ 'L', 'O', '0', '_', '6', '4', 0,
  /* 908 */ 'S', '0', '_', '6', '4', 0,
  /* 914 */ 'T', '0', '_', '6', '4', 0,
  /* 920 */ 'V', '0', '_', '6', '4', 0,
  /* 926 */ 'D', '1', '1', '_', '6', '4', 0,
  /* 933 */ 'D', '2', '1', '_', '6', '4', 0,
  /* 940 */ 'D', '3', '1', '_', '6', '4', 0,
  /* 947 */ 'A', '1', '_', '6', '4', 0,
  /* 953 */ 'D', '1', '_', '6', '4', 0,
  /* 959 */ 'K', '1', '_', '6', '4', 0,
  /* 965 */ 'S', '1', '_', '6', '4', 0,
  /* 971 */ 'T', '1', '_', '6', '4', 0,
  /* 977 */ 'V', '1', '_', '6', '4', 0,
  /* 983 */ 'D', '1', '2', '_', '6', '4', 0,
  /* 990 */ 'D', '2', '2', '_', '6', '4', 0,
  /* 997 */ 'A', '2', '_', '6', '4', 0,
  /* 1003 */ 'D', '2', '_', '6', '4', 0,
  /* 1009 */ 'S', '2', '_', '6', '4', 0,
  /* 1015 */ 'T', '2', '_', '6', '4', 0,
  /* 1021 */ 'D', '1', '3', '_', '6', '4', 0,
  /* 1028 */ 'D', '2', '3', '_', '6', '4', 0,
  /* 1035 */ 'A', '3', '_', '6', '4', 0,
  /* 1041 */ 'D', '3', '_', '6', '4', 0,
  /* 1047 */ 'S', '3', '_', '6', '4', 0,
  /* 1053 */ 'T', '3', '_', '6', '4', 0,
  /* 1059 */ 'D', '1', '4', '_', '6', '4', 0,
  /* 1066 */ 'D', '2', '4', '_', '6', '4', 0,
  /* 1073 */ 'D', '4', '_', '6', '4', 0,
  /* 1079 */ 'S', '4', '_', '6', '4', 0,
  /* 1085 */ 'T', '4', '_', '6', '4', 0,
  /* 1091 */ 'D', '1', '5', '_', '6', '4', 0,
  /* 1098 */ 'D', '2', '5', '_', '6', '4', 0,
  /* 1105 */ 'D', '5', '_', '6', '4', 0,
  /* 1111 */ 'S', '5', '_', '6', '4', 0,
  /* 1117 */ 'T', '5', '_', '6', '4', 0,
  /* 1123 */ 'D', '1', '6', '_', '6', '4', 0,
  /* 1130 */ 'D', '2', '6', '_', '6', '4', 0,
  /* 1137 */ 'D', '6', '_', '6', '4', 0,
  /* 1143 */ 'S', '6', '_', '6', '4', 0,
  /* 1149 */ 'T', '6', '_', '6', '4', 0,
  /* 1155 */ 'D', '1', '7', '_', '6', '4', 0,
  /* 1162 */ 'D', '2', '7', '_', '6', '4', 0,
  /* 1169 */ 'D', '7', '_', '6', '4', 0,
  /* 1175 */ 'S', '7', '_', '6', '4', 0,
  /* 1181 */ 'T', '7', '_', '6', '4', 0,
  /* 1187 */ 'D', '1', '8', '_', '6', '4', 0,
  /* 1194 */ 'D', '2', '8', '_', '6', '4', 0,
  /* 1201 */ 'D', '8', '_', '6', '4', 0,
  /* 1207 */ 'T', '8', '_', '6', '4', 0,
  /* 1213 */ 'D', '1', '9', '_', '6', '4', 0,
  /* 1220 */ 'D', '2', '9', '_', '6', '4', 0,
  /* 1227 */ 'D', '9', '_', '6', '4', 0,
  /* 1233 */ 'T', '9', '_', '6', '4', 0,
  /* 1239 */ 'R', 'A', '_', '6', '4', 0,
  /* 1245 */ 'Z', 'E', 'R', 'O', '_', '6', '4', 0,
  /* 1253 */ 'F', 'P', '_', '6', '4', 0,
  /* 1259 */ 'G', 'P', '_', '6', '4', 0,
  /* 1265 */ 'S', 'P', '_', '6', '4', 0,
  /* 1271 */ 'A', 'T', '_', '6', '4', 0,
  /* 1277 */ 'F', 'C', 'C', '4', 0,
  /* 1282 */ 'D', '4', 0,
  /* 1285 */ 'F', '4', 0,
  /* 1288 */ 'F', '_', 'H', 'I', '4', 0,
  /* 1294 */ 'F', 'C', 'R', '4', 0,
  /* 1299 */ 'H', 'W', 'R', '4', 0,
  /* 1304 */ 'S', '4', 0,
  /* 1307 */ 'T', '4', 0,
  /* 1310 */ 'W', '4', 0,
  /* 1313 */ 'C', 'O', 'P', '2', '1', '5', 0,
  /* 1320 */ 'C', 'O', 'P', '3', '1', '5', 0,
  /* 1327 */ 'D', '1', '5', 0,
  /* 1331 */ 'F', '1', '5', 0,
  /* 1335 */ 'F', '_', 'H', 'I', '1', '5', 0,
  /* 1342 */ 'F', 'C', 'R', '1', '5', 0,
  /* 1348 */ 'H', 'W', 'R', '1', '5', 0,
  /* 1354 */ 'W', '1', '5', 0,
  /* 1358 */ 'C', 'O', 'P', '2', '2', '5', 0,
  /* 1365 */ 'C', 'O', 'P', '3', '2', '5', 0,
  /* 1372 */ 'F', '2', '5', 0,
  /* 1376 */ 'F', '_', 'H', 'I', '2', '5', 0,
  /* 1383 */ 'C', 'O', 'P', '2', '5', 0,
  /* 1389 */ 'F', 'C', 'R', '2', '5', 0,
  /* 1395 */ 'H', 'W', 'R', '2', '5', 0,
  /* 1401 */ 'W', '2', '5', 0,
  /* 1405 */ 'C', 'O', 'P', '3', '5', 0,
  /* 1411 */ 'F', 'C', 'C', '5', 0,
  /* 1416 */ 'D', '5', 0,
  /* 1419 */ 'F', '5', 0,
  /* 1422 */ 'F', '_', 'H', 'I', '5', 0,
  /* 1428 */ 'F', 'C', 'R', '5', 0,
  /* 1433 */ 'H', 'W', 'R', '5', 0,
  /* 1438 */ 'S', '5', 0,
  /* 1441 */ 'T', '5', 0,
  /* 1444 */ 'W', '5', 0,
  /* 1447 */ 'C', 'O', 'P', '2', '1', '6', 0,
  /* 1454 */ 'C', 'O', 'P', '3', '1', '6', 0,
  /* 1461 */ 'F', '1', '6', 0,
  /* 1465 */ 'F', '_', 'H', 'I', '1', '6', 0,
  /* 1472 */ 'F', 'C', 'R', '1', '6', 0,
  /* 1478 */ 'H', 'W', 'R', '1', '6', 0,
  /* 1484 */ 'W', '1', '6', 0,
  /* 1488 */ 'C', 'O', 'P', '2', '2', '6', 0,
  /* 1495 */ 'C', 'O', 'P', '3', '2', '6', 0,
  /* 1502 */ 'F', '2', '6', 0,
  /* 1506 */ 'F', '_', 'H', 'I', '2', '6', 0,
  /* 1513 */ 'C', 'O', 'P', '2', '6', 0,
  /* 1519 */ 'F', 'C', 'R', '2', '6', 0,
  /* 1525 */ 'H', 'W', 'R', '2', '6', 0,
  /* 1531 */ 'W', '2', '6', 0,
  /* 1535 */ 'C', 'O', 'P', '3', '6', 0,
  /* 1541 */ 'F', 'C', 'C', '6', 0,
  /* 1546 */ 'D', '6', 0,
  /* 1549 */ 'F', '6', 0,
  /* 1552 */ 'F', '_', 'H', 'I', '6', 0,
  /* 1558 */ 'F', 'C', 'R', '6', 0,
  /* 1563 */ 'H', 'W', 'R', '6', 0,
  /* 1568 */ 'S', '6', 0,
  /* 1571 */ 'T', '6', 0,
  /* 1574 */ 'W', '6', 0,
  /* 1577 */ 'C', 'O', 'P', '2', '1', '7', 0,
  /* 1584 */ 'C', 'O', 'P', '3', '1', '7', 0,
  /* 1591 */ 'F', '1', '7', 0,
  /* 1595 */ 'F', '_', 'H', 'I', '1', '7', 0,
  /* 1602 */ 'F', 'C', 'R', '1', '7', 0,
  /* 1608 */ 'H', 'W', 'R', '1', '7', 0,
  /* 1614 */ 'W', '1', '7', 0,
  /* 1618 */ 'C', 'O', 'P', '2', '2', '7', 0,
  /* 1625 */ 'C', 'O', 'P', '3', '2', '7', 0,
  /* 1632 */ 'F', '2', '7', 0,
  /* 1636 */ 'F', '_', 'H', 'I', '2', '7', 0,
  /* 1643 */ 'C', 'O', 'P', '2', '7', 0,
  /* 1649 */ 'F', 'C', 'R', '2', '7', 0,
  /* 1655 */ 'H', 'W', 'R', '2', '7', 0,
  /* 1661 */ 'W', '2', '7', 0,
  /* 1665 */ 'C', 'O', 'P', '3', '7', 0,
  /* 1671 */ 'F', 'C', 'C', '7', 0,
  /* 1676 */ 'D', '7', 0,
  /* 1679 */ 'F', '7', 0,
  /* 1682 */ 'F', '_', 'H', 'I', '7', 0,
  /* 1688 */ 'F', 'C', 'R', '7', 0,
  /* 1693 */ 'H', 'W', 'R', '7', 0,
  /* 1698 */ 'S', '7', 0,
  /* 1701 */ 'T', '7', 0,
  /* 1704 */ 'W', '7', 0,
  /* 1707 */ 'C', 'O', 'P', '2', '1', '8', 0,
  /* 1714 */ 'C', 'O', 'P', '3', '1', '8', 0,
  /* 1721 */ 'F', '1', '8', 0,
  /* 1725 */ 'F', '_', 'H', 'I', '1', '8', 0,
  /* 1732 */ 'F', 'C', 'R', '1', '8', 0,
  /* 1738 */ 'H', 'W', 'R', '1', '8', 0,
  /* 1744 */ 'W', '1', '8', 0,
  /* 1748 */ 'C', 'O', 'P', '2', '2', '8', 0,
  /* 1755 */ 'C', 'O', 'P', '3', '2', '8', 0,
  /* 1762 */ 'F', '2', '8', 0,
  /* 1766 */ 'F', '_', 'H', 'I', '2', '8', 0,
  /* 1773 */ 'C', 'O', 'P', '2', '8', 0,
  /* 1779 */ 'F', 'C', 'R', '2', '8', 0,
  /* 1785 */ 'H', 'W', 'R', '2', '8', 0,
  /* 1791 */ 'W', '2', '8', 0,
  /* 1795 */ 'C', 'O', 'P', '3', '8', 0,
  /* 1801 */ 'D', '8', 0,
  /* 1804 */ 'F', '8', 0,
  /* 1807 */ 'F', '_', 'H', 'I', '8', 0,
  /* 1813 */ 'F', 'C', 'R', '8', 0,
  /* 1818 */ 'H', 'W', 'R', '8', 0,
  /* 1823 */ 'T', '8', 0,
  /* 1826 */ 'W', '8', 0,
  /* 1829 */ 'C', 'O', 'P', '2', '1', '9', 0,
  /* 1836 */ 'C', 'O', 'P', '3', '1', '9', 0,
  /* 1843 */ 'F', '1', '9', 0,
  /* 1847 */ 'F', '_', 'H', 'I', '1', '9', 0,
  /* 1854 */ 'F', 'C', 'R', '1', '9', 0,
  /* 1860 */ 'H', 'W', 'R', '1', '9', 0,
  /* 1866 */ 'W', '1', '9', 0,
  /* 1870 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '1', '6', '_', '1', '9', 0,
  /* 1886 */ 'C', 'O', 'P', '2', '2', '9', 0,
  /* 1893 */ 'C', 'O', 'P', '3', '2', '9', 0,
  /* 1900 */ 'F', '2', '9', 0,
  /* 1904 */ 'F', '_', 'H', 'I', '2', '9', 0,
  /* 1911 */ 'C', 'O', 'P', '2', '9', 0,
  /* 1917 */ 'F', 'C', 'R', '2', '9', 0,
  /* 1923 */ 'H', 'W', 'R', '2', '9', 0,
  /* 1929 */ 'W', '2', '9', 0,
  /* 1933 */ 'C', 'O', 'P', '3', '9', 0,
  /* 1939 */ 'D', '9', 0,
  /* 1942 */ 'F', '9', 0,
  /* 1945 */ 'F', '_', 'H', 'I', '9', 0,
  /* 1951 */ 'F', 'C', 'R', '9', 0,
  /* 1956 */ 'H', 'W', 'R', '9', 0,
  /* 1961 */ 'T', '9', 0,
  /* 1964 */ 'W', '9', 0,
  /* 1967 */ 'R', 'A', 0,
  /* 1970 */ 'P', 'C', 0,
  /* 1973 */ 'D', 'S', 'P', 'E', 'F', 'I', 0,
  /* 1980 */ 'Z', 'E', 'R', 'O', 0,
  /* 1985 */ 'F', 'P', 0,
  /* 1988 */ 'G', 'P', 0,
  /* 1991 */ 'S', 'P', 0,
  /* 1994 */ 'M', 'S', 'A', 'I', 'R', 0,
  /* 2000 */ 'M', 'S', 'A', 'C', 'S', 'R', 0,
  /* 2007 */ 'A', 'T', 0,
  /* 2010 */ 'D', 'S', 'P', 'C', 'C', 'o', 'n', 'd', 0,
  /* 2019 */ 'M', 'S', 'A', 'S', 'a', 'v', 'e', 0,
  /* 2027 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', 0,
  /* 2038 */ 'M', 'S', 'A', 'M', 'a', 'p', 0,
  /* 2045 */ 'M', 'S', 'A', 'U', 'n', 'm', 'a', 'p', 0,
  /* 2054 */ 'D', 'S', 'P', 'P', 'o', 's', 0,
  /* 2061 */ 'M', 'S', 'A', 'A', 'c', 'c', 'e', 's', 's', 0,
  /* 2071 */ 'D', 'S', 'P', 'S', 'C', 'o', 'u', 'n', 't', 0,
  /* 2081 */ 'M', 'S', 'A', 'R', 'e', 'q', 'u', 'e', 's', 't', 0,
  /* 2092 */ 'M', 'S', 'A', 'M', 'o', 'd', 'i', 'f', 'y', 0,
  /* 2102 */ 'D', 'S', 'P', 'C', 'a', 'r', 'r', 'y', 0,
};

extern const MCRegisterDesc MipsRegDesc[] = { // Descriptors
  { 6, 0, 0, 0, 0 },
  { 2007, 1, 82, 1, 4033 },
  { 2010, 1, 1, 1, 4033 },
  { 2102, 1, 1, 1, 4033 },
  { 1973, 1, 1, 1, 4033 },
  { 2027, 8, 1, 2, 32 },
  { 2054, 1, 1, 1, 1089 },
  { 2071, 1, 1, 1, 1089 },
  { 1985, 1, 102, 1, 1089 },
  { 1988, 1, 104, 1, 1089 },
  { 2061, 1, 1, 1, 1089 },
  { 2000, 1, 1, 1, 1089 },
  { 1994, 1, 1, 1, 1089 },
  { 2038, 1, 1, 1, 1089 },
  { 2092, 1, 1, 1, 1089 },
  { 2081, 1, 1, 1, 1089 },
  { 2019, 1, 1, 1, 1089 },
  { 2045, 1, 1, 1, 1089 },
  { 1970, 1, 1, 1, 1089 },
  { 1967, 1, 106, 1, 1089 },
  { 1991, 1, 108, 1, 1089 },
  { 1980, 1, 110, 1, 1089 },
  { 152, 1, 110, 1, 1089 },
  { 365, 1, 110, 1, 1089 },
  { 537, 1, 110, 1, 1089 },
  { 703, 1, 110, 1, 1089 },
  { 155, 159, 110, 9, 1042 },
  { 368, 159, 1, 9, 1042 },
  { 540, 159, 1, 9, 1042 },
  { 706, 159, 1, 9, 1042 },
  { 1271, 238, 1, 0, 0 },
  { 70, 1, 1, 1, 1153 },
  { 283, 1, 1, 1, 1153 },
  { 496, 1, 1, 1, 1153 },
  { 662, 1, 1, 1, 1153 },
  { 820, 1, 1, 1, 1153 },
  { 1383, 1, 1, 1, 1153 },
  { 1513, 1, 1, 1, 1153 },
  { 1643, 1, 1, 1, 1153 },
  { 1773, 1, 1, 1, 1153 },
  { 1911, 1, 1, 1, 1153 },
  { 130, 1, 1, 1, 1153 },
  { 343, 1, 1, 1, 1153 },
  { 531, 1, 1, 1, 1153 },
  { 697, 1, 1, 1, 1153 },
  { 842, 1, 1, 1, 1153 },
  { 1405, 1, 1, 1, 1153 },
  { 1535, 1, 1, 1, 1153 },
  { 1665, 1, 1, 1, 1153 },
  { 1795, 1, 1, 1, 1153 },
  { 1933, 1, 1, 1, 1153 },
  { 0, 1, 1, 1, 1153 },
  { 213, 1, 1, 1, 1153 },
  { 426, 1, 1, 1, 1153 },
  { 592, 1, 1, 1, 1153 },
  { 750, 1, 1, 1, 1153 },
  { 1313, 1, 1, 1, 1153 },
  { 1447, 1, 1, 1, 1153 },
  { 1577, 1, 1, 1, 1153 },
  { 1707, 1, 1, 1, 1153 },
  { 1829, 1, 1, 1, 1153 },
  { 45, 1, 1, 1, 1153 },
  { 258, 1, 1, 1, 1153 },
  { 471, 1, 1, 1, 1153 },
  { 637, 1, 1, 1, 1153 },
  { 795, 1, 1, 1, 1153 },
  { 1358, 1, 1, 1, 1153 },
  { 1488, 1, 1, 1, 1153 },
  { 1618, 1, 1, 1, 1153 },
  { 1748, 1, 1, 1, 1153 },
  { 1886, 1, 1, 1, 1153 },
  { 105, 1, 1, 1, 1153 },
  { 318, 1, 1, 1, 1153 },
  { 7, 1, 1, 1, 1153 },
  { 220, 1, 1, 1, 1153 },
  { 433, 1, 1, 1, 1153 },
  { 599, 1, 1, 1, 1153 },
  { 757, 1, 1, 1, 1153 },
  { 1320, 1, 1, 1, 1153 },
  { 1454, 1, 1, 1, 1153 },
  { 1584, 1, 1, 1, 1153 },
  { 1714, 1, 1, 1, 1153 },
  { 1836, 1, 1, 1, 1153 },
  { 52, 1, 1, 1, 1153 },
  { 265, 1, 1, 1, 1153 },
  { 478, 1, 1, 1, 1153 },
  { 644, 1, 1, 1, 1153 },
  { 802, 1, 1, 1, 1153 },
  { 1365, 1, 1, 1, 1153 },
  { 1495, 1, 1, 1, 1153 },
  { 1625, 1, 1, 1, 1153 },
  { 1755, 1, 1, 1, 1153 },
  { 1893, 1, 1, 1, 1153 },
  { 112, 1, 1, 1, 1153 },
  { 325, 1, 1, 1, 1153 },
  { 164, 14, 1, 9, 994 },
  { 377, 17, 1, 9, 994 },
  { 549, 20, 1, 9, 994 },
  { 715, 23, 1, 9, 994 },
  { 1282, 26, 1, 9, 994 },
  { 1416, 29, 1, 9, 994 },
  { 1546, 32, 1, 9, 994 },
  { 1676, 35, 1, 9, 994 },
  { 1801, 38, 1, 9, 994 },
  { 1939, 41, 1, 9, 994 },
  { 14, 44, 1, 9, 994 },
  { 227, 47, 1, 9, 994 },
  { 440, 50, 1, 9, 994 },
  { 606, 53, 1, 9, 994 },
  { 764, 56, 1, 9, 994 },
  { 1327, 59, 1, 9, 994 },
  { 92, 1, 150, 1, 2401 },
  { 305, 1, 148, 1, 2401 },
  { 518, 1, 146, 1, 2401 },
  { 684, 1, 144, 1, 2401 },
  { 167, 1, 162, 1, 4001 },
  { 380, 1, 166, 1, 4001 },
  { 552, 1, 166, 1, 4001 },
  { 718, 1, 170, 1, 4001 },
  { 1285, 1, 170, 1, 4001 },
  { 1419, 1, 174, 1, 4001 },
  { 1549, 1, 174, 1, 4001 },
  { 1679, 1, 178, 1, 4001 },
  { 1804, 1, 178, 1, 4001 },
  { 1942, 1, 182, 1, 4001 },
  { 18, 1, 182, 1, 4001 },
  { 231, 1, 186, 1, 4001 },
  { 444, 1, 186, 1, 4001 },
  { 610, 1, 190, 1, 4001 },
  { 768, 1, 190, 1, 4001 },
  { 1331, 1, 194, 1, 4001 },
  { 1461, 1, 194, 1, 4001 },
  { 1591, 1, 198, 1, 4001 },
  { 1721, 1, 198, 1, 4001 },
  { 1843, 1, 202, 1, 4001 },
  { 59, 1, 202, 1, 4001 },
  { 272, 1, 206, 1, 4001 },
  { 485, 1, 206, 1, 4001 },
  { 651, 1, 210, 1, 4001 },
  { 809, 1, 210, 1, 4001 },
  { 1372, 1, 214, 1, 4001 },
  { 1502, 1, 214, 1, 4001 },
  { 1632, 1, 218, 1, 4001 },
  { 1762, 1, 218, 1, 4001 },
  { 1900, 1, 222, 1, 4001 },
  { 119, 1, 222, 1, 4001 },
  { 332, 1, 226, 1, 4001 },
  { 159, 1, 1, 1, 4001 },
  { 372, 1, 1, 1, 4001 },
  { 544, 1, 1, 1, 4001 },
  { 710, 1, 1, 1, 4001 },
  { 1277, 1, 1, 1, 4001 },
  { 1411, 1, 1, 1, 4001 },
  { 1541, 1, 1, 1, 4001 },
  { 1671, 1, 1, 1, 4001 },
  { 191, 1, 1, 1, 4001 },
  { 404, 1, 1, 1, 4001 },
  { 573, 1, 1, 1, 4001 },
  { 731, 1, 1, 1, 4001 },
  { 1294, 1, 1, 1, 4001 },
  { 1428, 1, 1, 1, 4001 },
  { 1558, 1, 1, 1, 4001 },
  { 1688, 1, 1, 1, 4001 },
  { 1813, 1, 1, 1, 4001 },
  { 1951, 1, 1, 1, 4001 },
  { 29, 1, 1, 1, 4001 },
  { 242, 1, 1, 1, 4001 },
  { 455, 1, 1, 1, 4001 },
  { 621, 1, 1, 1, 4001 },
  { 779, 1, 1, 1, 4001 },
  { 1342, 1, 1, 1, 4001 },
  { 1472, 1, 1, 1, 4001 },
  { 1602, 1, 1, 1, 4001 },
  { 1732, 1, 1, 1, 4001 },
  { 1854, 1, 1, 1, 4001 },
  { 76, 1, 1, 1, 4001 },
  { 289, 1, 1, 1, 4001 },
  { 502, 1, 1, 1, 4001 },
  { 668, 1, 1, 1, 4001 },
  { 826, 1, 1, 1, 4001 },
  { 1389, 1, 1, 1, 4001 },
  { 1519, 1, 1, 1, 4001 },
  { 1649, 1, 1, 1, 4001 },
  { 1779, 1, 1, 1, 4001 },
  { 1917, 1, 1, 1, 4001 },
  { 136, 1, 1, 1, 4001 },
  { 349, 1, 1, 1, 4001 },
  { 1253, 136, 1, 0, 1184 },
  { 170, 1, 156, 1, 3969 },
  { 383, 1, 156, 1, 3969 },
  { 555, 1, 156, 1, 3969 },
  { 721, 1, 156, 1, 3969 },
  { 1288, 1, 156, 1, 3969 },
  { 1422, 1, 156, 1, 3969 },
  { 1552, 1, 156, 1, 3969 },
  { 1682, 1, 156, 1, 3969 },
  { 1807, 1, 156, 1, 3969 },
  { 1945, 1, 156, 1, 3969 },
  { 22, 1, 156, 1, 3969 },
  { 235, 1, 156, 1, 3969 },
  { 448, 1, 156, 1, 3969 },
  { 614, 1, 156, 1, 3969 },
  { 772, 1, 156, 1, 3969 },
  { 1335, 1, 156, 1, 3969 },
  { 1465, 1, 156, 1, 3969 },
  { 1595, 1, 156, 1, 3969 },
  { 1725, 1, 156, 1, 3969 },
  { 1847, 1, 156, 1, 3969 },
  { 63, 1, 156, 1, 3969 },
  { 276, 1, 156, 1, 3969 },
  { 489, 1, 156, 1, 3969 },
  { 655, 1, 156, 1, 3969 },
  { 813, 1, 156, 1, 3969 },
  { 1376, 1, 156, 1, 3969 },
  { 1506, 1, 156, 1, 3969 },
  { 1636, 1, 156, 1, 3969 },
  { 1766, 1, 156, 1, 3969 },
  { 1904, 1, 156, 1, 3969 },
  { 123, 1, 156, 1, 3969 },
  { 336, 1, 156, 1, 3969 },
  { 1259, 128, 1, 0, 1216 },
  { 172, 1, 234, 1, 1826 },
  { 385, 1, 134, 1, 1826 },
  { 557, 1, 134, 1, 1826 },
  { 723, 1, 134, 1, 1826 },
  { 196, 1, 1, 1, 3937 },
  { 409, 1, 1, 1, 3937 },
  { 578, 1, 1, 1, 3937 },
  { 736, 1, 1, 1, 3937 },
  { 1299, 1, 1, 1, 3937 },
  { 1433, 1, 1, 1, 3937 },
  { 1563, 1, 1, 1, 3937 },
  { 1693, 1, 1, 1, 3937 },
  { 1818, 1, 1, 1, 3937 },
  { 1956, 1, 1, 1, 3937 },
  { 35, 1, 1, 1, 3937 },
  { 248, 1, 1, 1, 3937 },
  { 461, 1, 1, 1, 3937 },
  { 627, 1, 1, 1, 3937 },
  { 785, 1, 1, 1, 3937 },
  { 1348, 1, 1, 1, 3937 },
  { 1478, 1, 1, 1, 3937 },
  { 1608, 1, 1, 1, 3937 },
  { 1738, 1, 1, 1, 3937 },
  { 1860, 1, 1, 1, 3937 },
  { 82, 1, 1, 1, 3937 },
  { 295, 1, 1, 1, 3937 },
  { 508, 1, 1, 1, 3937 },
  { 674, 1, 1, 1, 3937 },
  { 832, 1, 1, 1, 3937 },
  { 1395, 1, 1, 1, 3937 },
  { 1525, 1, 1, 1, 3937 },
  { 1655, 1, 1, 1, 3937 },
  { 1785, 1, 1, 1, 3937 },
  { 1923, 1, 1, 1, 3937 },
  { 142, 1, 1, 1, 3937 },
  { 355, 1, 1, 1, 3937 },
  { 176, 1, 100, 1, 3937 },
  { 389, 1, 100, 1, 3937 },
  { 184, 1, 230, 1, 1794 },
  { 397, 1, 126, 1, 1794 },
  { 566, 1, 126, 1, 1794 },
  { 727, 1, 126, 1, 1794 },
  { 179, 1, 1, 1, 3905 },
  { 392, 1, 1, 1, 3905 },
  { 561, 1, 1, 1, 3905 },
  { 188, 1, 1, 1, 3905 },
  { 401, 1, 1, 1, 3905 },
  { 570, 1, 1, 1, 3905 },
  { 1239, 124, 1, 0, 1248 },
  { 201, 1, 98, 1, 3873 },
  { 414, 1, 98, 1, 3873 },
  { 583, 1, 98, 1, 3873 },
  { 741, 1, 98, 1, 3873 },
  { 1304, 1, 98, 1, 3873 },
  { 1438, 1, 98, 1, 3873 },
  { 1568, 1, 98, 1, 3873 },
  { 1698, 1, 98, 1, 3873 },
  { 1265, 122, 1, 0, 1280 },
  { 204, 1, 96, 1, 3841 },
  { 417, 1, 96, 1, 3841 },
  { 586, 1, 96, 1, 3841 },
  { 744, 1, 96, 1, 3841 },
  { 1307, 1, 96, 1, 3841 },
  { 1441, 1, 96, 1, 3841 },
  { 1571, 1, 96, 1, 3841 },
  { 1701, 1, 96, 1, 3841 },
  { 1823, 1, 96, 1, 3841 },
  { 1961, 1, 96, 1, 3841 },
  { 207, 1, 96, 1, 3841 },
  { 420, 1, 96, 1, 3841 },
  { 210, 92, 1, 8, 1425 },
  { 423, 92, 1, 8, 1425 },
  { 589, 92, 1, 8, 1425 },
  { 747, 92, 1, 8, 1425 },
  { 1310, 92, 1, 8, 1425 },
  { 1444, 92, 1, 8, 1425 },
  { 1574, 92, 1, 8, 1425 },
  { 1704, 92, 1, 8, 1425 },
  { 1826, 92, 1, 8, 1425 },
  { 1964, 92, 1, 8, 1425 },
  { 41, 92, 1, 8, 1425 },
  { 254, 92, 1, 8, 1425 },
  { 467, 92, 1, 8, 1425 },
  { 633, 92, 1, 8, 1425 },
  { 791, 92, 1, 8, 1425 },
  { 1354, 92, 1, 8, 1425 },
  { 1484, 92, 1, 8, 1425 },
  { 1614, 92, 1, 8, 1425 },
  { 1744, 92, 1, 8, 1425 },
  { 1866, 92, 1, 8, 1425 },
  { 88, 92, 1, 8, 1425 },
  { 301, 92, 1, 8, 1425 },
  { 514, 92, 1, 8, 1425 },
  { 680, 92, 1, 8, 1425 },
  { 838, 92, 1, 8, 1425 },
  { 1401, 92, 1, 8, 1425 },
  { 1531, 92, 1, 8, 1425 },
  { 1661, 92, 1, 8, 1425 },
  { 1791, 92, 1, 8, 1425 },
  { 1929, 92, 1, 8, 1425 },
  { 148, 92, 1, 8, 1425 },
  { 361, 92, 1, 8, 1425 },
  { 1245, 118, 1, 0, 1921 },
  { 869, 118, 1, 0, 1921 },
  { 947, 118, 1, 0, 1921 },
  { 997, 118, 1, 0, 1921 },
  { 1035, 118, 1, 0, 1921 },
  { 875, 130, 1, 12, 656 },
  { 882, 93, 157, 9, 1377 },
  { 953, 93, 157, 9, 1377 },
  { 1003, 93, 157, 9, 1377 },
  { 1041, 93, 157, 9, 1377 },
  { 1073, 93, 157, 9, 1377 },
  { 1105, 93, 157, 9, 1377 },
  { 1137, 93, 157, 9, 1377 },
  { 1169, 93, 157, 9, 1377 },
  { 1201, 93, 157, 9, 1377 },
  { 1227, 93, 157, 9, 1377 },
  { 848, 93, 157, 9, 1377 },
  { 926, 93, 157, 9, 1377 },
  { 983, 93, 157, 9, 1377 },
  { 1021, 93, 157, 9, 1377 },
  { 1059, 93, 157, 9, 1377 },
  { 1091, 93, 157, 9, 1377 },
  { 1123, 93, 157, 9, 1377 },
  { 1155, 93, 157, 9, 1377 },
  { 1187, 93, 157, 9, 1377 },
  { 1213, 93, 157, 9, 1377 },
  { 855, 93, 157, 9, 1377 },
  { 933, 93, 157, 9, 1377 },
  { 990, 93, 157, 9, 1377 },
  { 1028, 93, 157, 9, 1377 },
  { 1066, 93, 157, 9, 1377 },
  { 1098, 93, 157, 9, 1377 },
  { 1130, 93, 157, 9, 1377 },
  { 1162, 93, 157, 9, 1377 },
  { 1194, 93, 157, 9, 1377 },
  { 1220, 93, 157, 9, 1377 },
  { 862, 93, 157, 9, 1377 },
  { 940, 93, 157, 9, 1377 },
  { 1870, 1, 116, 1, 1120 },
  { 888, 138, 236, 0, 1344 },
  { 895, 150, 1, 0, 2241 },
  { 959, 150, 1, 0, 2241 },
  { 901, 150, 232, 0, 1312 },
  { 908, 152, 1, 0, 2273 },
  { 965, 152, 1, 0, 2273 },
  { 1009, 152, 1, 0, 2273 },
  { 1047, 152, 1, 0, 2273 },
  { 1079, 152, 1, 0, 2273 },
  { 1111, 152, 1, 0, 2273 },
  { 1143, 152, 1, 0, 2273 },
  { 1175, 152, 1, 0, 2273 },
  { 914, 154, 1, 0, 2273 },
  { 971, 154, 1, 0, 2273 },
  { 1015, 154, 1, 0, 2273 },
  { 1053, 154, 1, 0, 2273 },
  { 1085, 154, 1, 0, 2273 },
  { 1117, 154, 1, 0, 2273 },
  { 1149, 154, 1, 0, 2273 },
  { 1181, 154, 1, 0, 2273 },
  { 1207, 154, 1, 0, 2273 },
  { 1233, 154, 1, 0, 2273 },
  { 920, 154, 1, 0, 2273 },
  { 977, 154, 1, 0, 2273 },
};

extern const MCPhysReg MipsRegUnitRoots[][2] = {
  { Mips::AT },
  { Mips::DSPCCond },
  { Mips::DSPCarry },
  { Mips::DSPEFI },
  { Mips::DSPOutFlag16_19 },
  { Mips::DSPOutFlag20 },
  { Mips::DSPOutFlag21 },
  { Mips::DSPOutFlag22 },
  { Mips::DSPOutFlag23 },
  { Mips::DSPPos },
  { Mips::DSPSCount },
  { Mips::FP },
  { Mips::GP },
  { Mips::MSAAccess },
  { Mips::MSACSR },
  { Mips::MSAIR },
  { Mips::MSAMap },
  { Mips::MSAModify },
  { Mips::MSARequest },
  { Mips::MSASave },
  { Mips::MSAUnmap },
  { Mips::PC },
  { Mips::RA },
  { Mips::SP },
  { Mips::ZERO },
  { Mips::A0 },
  { Mips::A1 },
  { Mips::A2 },
  { Mips::A3 },
  { Mips::LO0 },
  { Mips::HI0 },
  { Mips::LO1 },
  { Mips::HI1 },
  { Mips::LO2 },
  { Mips::HI2 },
  { Mips::LO3 },
  { Mips::HI3 },
  { Mips::COP20 },
  { Mips::COP21 },
  { Mips::COP22 },
  { Mips::COP23 },
  { Mips::COP24 },
  { Mips::COP25 },
  { Mips::COP26 },
  { Mips::COP27 },
  { Mips::COP28 },
  { Mips::COP29 },
  { Mips::COP30 },
  { Mips::COP31 },
  { Mips::COP32 },
  { Mips::COP33 },
  { Mips::COP34 },
  { Mips::COP35 },
  { Mips::COP36 },
  { Mips::COP37 },
  { Mips::COP38 },
  { Mips::COP39 },
  { Mips::COP210 },
  { Mips::COP211 },
  { Mips::COP212 },
  { Mips::COP213 },
  { Mips::COP214 },
  { Mips::COP215 },
  { Mips::COP216 },
  { Mips::COP217 },
  { Mips::COP218 },
  { Mips::COP219 },
  { Mips::COP220 },
  { Mips::COP221 },
  { Mips::COP222 },
  { Mips::COP223 },
  { Mips::COP224 },
  { Mips::COP225 },
  { Mips::COP226 },
  { Mips::COP227 },
  { Mips::COP228 },
  { Mips::COP229 },
  { Mips::COP230 },
  { Mips::COP231 },
  { Mips::COP310 },
  { Mips::COP311 },
  { Mips::COP312 },
  { Mips::COP313 },
  { Mips::COP314 },
  { Mips::COP315 },
  { Mips::COP316 },
  { Mips::COP317 },
  { Mips::COP318 },
  { Mips::COP319 },
  { Mips::COP320 },
  { Mips::COP321 },
  { Mips::COP322 },
  { Mips::COP323 },
  { Mips::COP324 },
  { Mips::COP325 },
  { Mips::COP326 },
  { Mips::COP327 },
  { Mips::COP328 },
  { Mips::COP329 },
  { Mips::COP330 },
  { Mips::COP331 },
  { Mips::F0 },
  { Mips::F1 },
  { Mips::F2 },
  { Mips::F3 },
  { Mips::F4 },
  { Mips::F5 },
  { Mips::F6 },
  { Mips::F7 },
  { Mips::F8 },
  { Mips::F9 },
  { Mips::F10 },
  { Mips::F11 },
  { Mips::F12 },
  { Mips::F13 },
  { Mips::F14 },
  { Mips::F15 },
  { Mips::F16 },
  { Mips::F17 },
  { Mips::F18 },
  { Mips::F19 },
  { Mips::F20 },
  { Mips::F21 },
  { Mips::F22 },
  { Mips::F23 },
  { Mips::F24 },
  { Mips::F25 },
  { Mips::F26 },
  { Mips::F27 },
  { Mips::F28 },
  { Mips::F29 },
  { Mips::F30 },
  { Mips::F31 },
  { Mips::FCC0 },
  { Mips::FCC1 },
  { Mips::FCC2 },
  { Mips::FCC3 },
  { Mips::FCC4 },
  { Mips::FCC5 },
  { Mips::FCC6 },
  { Mips::FCC7 },
  { Mips::FCR0 },
  { Mips::FCR1 },
  { Mips::FCR2 },
  { Mips::FCR3 },
  { Mips::FCR4 },
  { Mips::FCR5 },
  { Mips::FCR6 },
  { Mips::FCR7 },
  { Mips::FCR8 },
  { Mips::FCR9 },
  { Mips::FCR10 },
  { Mips::FCR11 },
  { Mips::FCR12 },
  { Mips::FCR13 },
  { Mips::FCR14 },
  { Mips::FCR15 },
  { Mips::FCR16 },
  { Mips::FCR17 },
  { Mips::FCR18 },
  { Mips::FCR19 },
  { Mips::FCR20 },
  { Mips::FCR21 },
  { Mips::FCR22 },
  { Mips::FCR23 },
  { Mips::FCR24 },
  { Mips::FCR25 },
  { Mips::FCR26 },
  { Mips::FCR27 },
  { Mips::FCR28 },
  { Mips::FCR29 },
  { Mips::FCR30 },
  { Mips::FCR31 },
  { Mips::F_HI0 },
  { Mips::F_HI1 },
  { Mips::F_HI2 },
  { Mips::F_HI3 },
  { Mips::F_HI4 },
  { Mips::F_HI5 },
  { Mips::F_HI6 },
  { Mips::F_HI7 },
  { Mips::F_HI8 },
  { Mips::F_HI9 },
  { Mips::F_HI10 },
  { Mips::F_HI11 },
  { Mips::F_HI12 },
  { Mips::F_HI13 },
  { Mips::F_HI14 },
  { Mips::F_HI15 },
  { Mips::F_HI16 },
  { Mips::F_HI17 },
  { Mips::F_HI18 },
  { Mips::F_HI19 },
  { Mips::F_HI20 },
  { Mips::F_HI21 },
  { Mips::F_HI22 },
  { Mips::F_HI23 },
  { Mips::F_HI24 },
  { Mips::F_HI25 },
  { Mips::F_HI26 },
  { Mips::F_HI27 },
  { Mips::F_HI28 },
  { Mips::F_HI29 },
  { Mips::F_HI30 },
  { Mips::F_HI31 },
  { Mips::HWR0 },
  { Mips::HWR1 },
  { Mips::HWR2 },
  { Mips::HWR3 },
  { Mips::HWR4 },
  { Mips::HWR5 },
  { Mips::HWR6 },
  { Mips::HWR7 },
  { Mips::HWR8 },
  { Mips::HWR9 },
  { Mips::HWR10 },
  { Mips::HWR11 },
  { Mips::HWR12 },
  { Mips::HWR13 },
  { Mips::HWR14 },
  { Mips::HWR15 },
  { Mips::HWR16 },
  { Mips::HWR17 },
  { Mips::HWR18 },
  { Mips::HWR19 },
  { Mips::HWR20 },
  { Mips::HWR21 },
  { Mips::HWR22 },
  { Mips::HWR23 },
  { Mips::HWR24 },
  { Mips::HWR25 },
  { Mips::HWR26 },
  { Mips::HWR27 },
  { Mips::HWR28 },
  { Mips::HWR29 },
  { Mips::HWR30 },
  { Mips::HWR31 },
  { Mips::K0 },
  { Mips::K1 },
  { Mips::MPL0 },
  { Mips::MPL1 },
  { Mips::MPL2 },
  { Mips::P0 },
  { Mips::P1 },
  { Mips::P2 },
  { Mips::S0 },
  { Mips::S1 },
  { Mips::S2 },
  { Mips::S3 },
  { Mips::S4 },
  { Mips::S5 },
  { Mips::S6 },
  { Mips::S7 },
  { Mips::T0 },
  { Mips::T1 },
  { Mips::T2 },
  { Mips::T3 },
  { Mips::T4 },
  { Mips::T5 },
  { Mips::T6 },
  { Mips::T7 },
  { Mips::T8 },
  { Mips::T9 },
  { Mips::V0 },
  { Mips::V1 },
};

namespace {     // Register classes...
  // OddSP Register Class...
  const MCPhysReg OddSP[] = {
    Mips::F1, Mips::F3, Mips::F5, Mips::F7, Mips::F9, Mips::F11, Mips::F13, Mips::F15, Mips::F17, Mips::F19, Mips::F21, Mips::F23, Mips::F25, Mips::F27, Mips::F29, Mips::F31, Mips::F_HI1, Mips::F_HI3, Mips::F_HI5, Mips::F_HI7, Mips::F_HI9, Mips::F_HI11, Mips::F_HI13, Mips::F_HI15, Mips::F_HI17, Mips::F_HI19, Mips::F_HI21, Mips::F_HI23, Mips::F_HI25, Mips::F_HI27, Mips::F_HI29, Mips::F_HI31, Mips::D1, Mips::D3, Mips::D5, Mips::D7, Mips::D9, Mips::D11, Mips::D13, Mips::D15, Mips::D1_64, Mips::D3_64, Mips::D5_64, Mips::D7_64, Mips::D9_64, Mips::D11_64, Mips::D13_64, Mips::D15_64, Mips::D17_64, Mips::D19_64, Mips::D21_64, Mips::D23_64, Mips::D25_64, Mips::D27_64, Mips::D29_64, Mips::D31_64, 
  };

  // OddSP Bit set.
  const uint8_t OddSPBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x50, 0x55, 0x55, 0x55, 0x05, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xaa, 0xaa, 0xaa, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x55, 0x55, 0x55, 0x01, 
  };

  // CCR Register Class...
  const MCPhysReg CCR[] = {
    Mips::FCR0, Mips::FCR1, Mips::FCR2, Mips::FCR3, Mips::FCR4, Mips::FCR5, Mips::FCR6, Mips::FCR7, Mips::FCR8, Mips::FCR9, Mips::FCR10, Mips::FCR11, Mips::FCR12, Mips::FCR13, Mips::FCR14, Mips::FCR15, Mips::FCR16, Mips::FCR17, Mips::FCR18, Mips::FCR19, Mips::FCR20, Mips::FCR21, Mips::FCR22, Mips::FCR23, Mips::FCR24, Mips::FCR25, Mips::FCR26, Mips::FCR27, Mips::FCR28, Mips::FCR29, Mips::FCR30, Mips::FCR31, 
  };

  // CCR Bit set.
  const uint8_t CCRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // COP2 Register Class...
  const MCPhysReg COP2[] = {
    Mips::COP20, Mips::COP21, Mips::COP22, Mips::COP23, Mips::COP24, Mips::COP25, Mips::COP26, Mips::COP27, Mips::COP28, Mips::COP29, Mips::COP210, Mips::COP211, Mips::COP212, Mips::COP213, Mips::COP214, Mips::COP215, Mips::COP216, Mips::COP217, Mips::COP218, Mips::COP219, Mips::COP220, Mips::COP221, Mips::COP222, Mips::COP223, Mips::COP224, Mips::COP225, Mips::COP226, Mips::COP227, Mips::COP228, Mips::COP229, Mips::COP230, Mips::COP231, 
  };

  // COP2 Bit set.
  const uint8_t COP2Bits[] = {
    0x00, 0x00, 0x00, 0x80, 0xff, 0x01, 0xf8, 0xff, 0xff, 0x01, 
  };

  // COP3 Register Class...
  const MCPhysReg COP3[] = {
    Mips::COP30, Mips::COP31, Mips::COP32, Mips::COP33, Mips::COP34, Mips::COP35, Mips::COP36, Mips::COP37, Mips::COP38, Mips::COP39, Mips::COP310, Mips::COP311, Mips::COP312, Mips::COP313, Mips::COP314, Mips::COP315, Mips::COP316, Mips::COP317, Mips::COP318, Mips::COP319, Mips::COP320, Mips::COP321, Mips::COP322, Mips::COP323, Mips::COP324, Mips::COP325, Mips::COP326, Mips::COP327, Mips::COP328, Mips::COP329, Mips::COP330, Mips::COP331, 
  };

  // COP3 Bit set.
  const uint8_t COP3Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xfe, 0xff, 0x7f, 
  };

  // DSPR Register Class...
  const MCPhysReg DSPR[] = {
    Mips::ZERO, Mips::AT, Mips::V0, Mips::V1, Mips::A0, Mips::A1, Mips::A2, Mips::A3, Mips::T0, Mips::T1, Mips::T2, Mips::T3, Mips::T4, Mips::T5, Mips::T6, Mips::T7, Mips::S0, Mips::S1, Mips::S2, Mips::S3, Mips::S4, Mips::S5, Mips::S6, Mips::S7, Mips::T8, Mips::T9, Mips::K0, Mips::K1, Mips::GP, Mips::SP, Mips::FP, Mips::RA, 
  };

  // DSPR Bit set.
  const uint8_t DSPRBits[] = {
    0x02, 0x03, 0xf8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xc0, 0xbf, 0xff, 0x07, 
  };

  // FGR32 Register Class...
  const MCPhysReg FGR32[] = {
    Mips::F0, Mips::F1, Mips::F2, Mips::F3, Mips::F4, Mips::F5, Mips::F6, Mips::F7, Mips::F8, Mips::F9, Mips::F10, Mips::F11, Mips::F12, Mips::F13, Mips::F14, Mips::F15, Mips::F16, Mips::F17, Mips::F18, Mips::F19, Mips::F20, Mips::F21, Mips::F22, Mips::F23, Mips::F24, Mips::F25, Mips::F26, Mips::F27, Mips::F28, Mips::F29, Mips::F30, Mips::F31, 
  };

  // FGR32 Bit set.
  const uint8_t FGR32Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // FGRCC Register Class...
  const MCPhysReg FGRCC[] = {
    Mips::F0, Mips::F1, Mips::F2, Mips::F3, Mips::F4, Mips::F5, Mips::F6, Mips::F7, Mips::F8, Mips::F9, Mips::F10, Mips::F11, Mips::F12, Mips::F13, Mips::F14, Mips::F15, Mips::F16, Mips::F17, Mips::F18, Mips::F19, Mips::F20, Mips::F21, Mips::F22, Mips::F23, Mips::F24, Mips::F25, Mips::F26, Mips::F27, Mips::F28, Mips::F29, Mips::F30, Mips::F31, 
  };

  // FGRCC Bit set.
  const uint8_t FGRCCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // FGRH32 Register Class...
  const MCPhysReg FGRH32[] = {
    Mips::F_HI0, Mips::F_HI1, Mips::F_HI2, Mips::F_HI3, Mips::F_HI4, Mips::F_HI5, Mips::F_HI6, Mips::F_HI7, Mips::F_HI8, Mips::F_HI9, Mips::F_HI10, Mips::F_HI11, Mips::F_HI12, Mips::F_HI13, Mips::F_HI14, Mips::F_HI15, Mips::F_HI16, Mips::F_HI17, Mips::F_HI18, Mips::F_HI19, Mips::F_HI20, Mips::F_HI21, Mips::F_HI22, Mips::F_HI23, Mips::F_HI24, Mips::F_HI25, Mips::F_HI26, Mips::F_HI27, Mips::F_HI28, Mips::F_HI29, Mips::F_HI30, Mips::F_HI31, 
  };

  // FGRH32 Bit set.
  const uint8_t FGRH32Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x0f, 
  };

  // GPR32 Register Class...
  const MCPhysReg GPR32[] = {
    Mips::ZERO, Mips::AT, Mips::V0, Mips::V1, Mips::A0, Mips::A1, Mips::A2, Mips::A3, Mips::T0, Mips::T1, Mips::T2, Mips::T3, Mips::T4, Mips::T5, Mips::T6, Mips::T7, Mips::S0, Mips::S1, Mips::S2, Mips::S3, Mips::S4, Mips::S5, Mips::S6, Mips::S7, Mips::T8, Mips::T9, Mips::K0, Mips::K1, Mips::GP, Mips::SP, Mips::FP, Mips::RA, 
  };

  // GPR32 Bit set.
  const uint8_t GPR32Bits[] = {
    0x02, 0x03, 0xf8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xc0, 0xbf, 0xff, 0x07, 
  };

  // HWRegs Register Class...
  const MCPhysReg HWRegs[] = {
    Mips::HWR0, Mips::HWR1, Mips::HWR2, Mips::HWR3, Mips::HWR4, Mips::HWR5, Mips::HWR6, Mips::HWR7, Mips::HWR8, Mips::HWR9, Mips::HWR10, Mips::HWR11, Mips::HWR12, Mips::HWR13, Mips::HWR14, Mips::HWR15, Mips::HWR16, Mips::HWR17, Mips::HWR18, Mips::HWR19, Mips::HWR20, Mips::HWR21, Mips::HWR22, Mips::HWR23, Mips::HWR24, Mips::HWR25, Mips::HWR26, Mips::HWR27, Mips::HWR28, Mips::HWR29, Mips::HWR30, Mips::HWR31, 
  };

  // HWRegs Bit set.
  const uint8_t HWRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x01, 
  };

  // OddSP_with_sub_hi Register Class...
  const MCPhysReg OddSP_with_sub_hi[] = {
    Mips::D1, Mips::D3, Mips::D5, Mips::D7, Mips::D9, Mips::D11, Mips::D13, Mips::D15, Mips::D1_64, Mips::D3_64, Mips::D5_64, Mips::D7_64, Mips::D9_64, Mips::D11_64, Mips::D13_64, Mips::D15_64, Mips::D17_64, Mips::D19_64, Mips::D21_64, Mips::D23_64, Mips::D25_64, Mips::D27_64, Mips::D29_64, Mips::D31_64, 
  };

  // OddSP_with_sub_hi Bit set.
  const uint8_t OddSP_with_sub_hiBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x55, 0x55, 0x55, 0x01, 
  };

  // FGR32_and_OddSP Register Class...
  const MCPhysReg FGR32_and_OddSP[] = {
    Mips::F1, Mips::F3, Mips::F5, Mips::F7, Mips::F9, Mips::F11, Mips::F13, Mips::F15, Mips::F17, Mips::F19, Mips::F21, Mips::F23, Mips::F25, Mips::F27, Mips::F29, Mips::F31, 
  };

  // FGR32_and_OddSP Bit set.
  const uint8_t FGR32_and_OddSPBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x55, 0x55, 0x55, 0x05, 
  };

  // FGRH32_and_OddSP Register Class...
  const MCPhysReg FGRH32_and_OddSP[] = {
    Mips::F_HI1, Mips::F_HI3, Mips::F_HI5, Mips::F_HI7, Mips::F_HI9, Mips::F_HI11, Mips::F_HI13, Mips::F_HI15, Mips::F_HI17, Mips::F_HI19, Mips::F_HI21, Mips::F_HI23, Mips::F_HI25, Mips::F_HI27, Mips::F_HI29, Mips::F_HI31, 
  };

  // FGRH32_and_OddSP Bit set.
  const uint8_t FGRH32_and_OddSPBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xaa, 0xaa, 0xaa, 0x0a, 
  };

  // OddSP_with_sub_hi_with_sub_hi_in_FGRH32 Register Class...
  const MCPhysReg OddSP_with_sub_hi_with_sub_hi_in_FGRH32[] = {
    Mips::D1_64, Mips::D3_64, Mips::D5_64, Mips::D7_64, Mips::D9_64, Mips::D11_64, Mips::D13_64, Mips::D15_64, Mips::D17_64, Mips::D19_64, Mips::D21_64, Mips::D23_64, Mips::D25_64, Mips::D27_64, Mips::D29_64, Mips::D31_64, 
  };

  // OddSP_with_sub_hi_with_sub_hi_in_FGRH32 Bit set.
  const uint8_t OddSP_with_sub_hi_with_sub_hi_in_FGRH32Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x55, 0x55, 0x55, 0x01, 
  };

  // CPU16RegsPlusSP Register Class...
  const MCPhysReg CPU16RegsPlusSP[] = {
    Mips::V0, Mips::V1, Mips::A0, Mips::A1, Mips::A2, Mips::A3, Mips::S0, Mips::S1, Mips::SP, 
  };

  // CPU16RegsPlusSP Bit set.
  const uint8_t CPU16RegsPlusSPBits[] = {
    0x00, 0x00, 0xd0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x06, 
  };

  // CPU16Regs Register Class...
  const MCPhysReg CPU16Regs[] = {
    Mips::V0, Mips::V1, Mips::A0, Mips::A1, Mips::A2, Mips::A3, Mips::S0, Mips::S1, 
  };

  // CPU16Regs Bit set.
  const uint8_t CPU16RegsBits[] = {
    0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x06, 
  };

  // FCC Register Class...
  const MCPhysReg FCC[] = {
    Mips::FCC0, Mips::FCC1, Mips::FCC2, Mips::FCC3, Mips::FCC4, Mips::FCC5, Mips::FCC6, Mips::FCC7, 
  };

  // FCC Bit set.
  const uint8_t FCCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x07, 
  };

  // GPRMM16 Register Class...
  const MCPhysReg GPRMM16[] = {
    Mips::V0, Mips::V1, Mips::A0, Mips::A1, Mips::A2, Mips::A3, Mips::S0, Mips::S1, 
  };

  // GPRMM16 Bit set.
  const uint8_t GPRMM16Bits[] = {
    0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x06, 
  };

  // MSACtrl Register Class...
  const MCPhysReg MSACtrl[] = {
    Mips::MSAIR, Mips::MSACSR, Mips::MSAAccess, Mips::MSASave, Mips::MSAModify, Mips::MSARequest, Mips::MSAMap, Mips::MSAUnmap, 
  };

  // MSACtrl Bit set.
  const uint8_t MSACtrlBits[] = {
    0x00, 0xfc, 0x03, 
  };

  // OddSP_with_sub_hi_with_sub_hi_in_FGR32 Register Class...
  const MCPhysReg OddSP_with_sub_hi_with_sub_hi_in_FGR32[] = {
    Mips::D1, Mips::D3, Mips::D5, Mips::D7, Mips::D9, Mips::D11, Mips::D13, Mips::D15, 
  };

  // OddSP_with_sub_hi_with_sub_hi_in_FGR32 Bit set.
  const uint8_t OddSP_with_sub_hi_with_sub_hi_in_FGR32Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 
  };

  // HI32DSP Register Class...
  const MCPhysReg HI32DSP[] = {
    Mips::HI0, Mips::HI1, Mips::HI2, Mips::HI3, 
  };

  // HI32DSP Bit set.
  const uint8_t HI32DSPBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 
  };

  // LO32DSP Register Class...
  const MCPhysReg LO32DSP[] = {
    Mips::LO0, Mips::LO1, Mips::LO2, Mips::LO3, 
  };

  // LO32DSP Bit set.
  const uint8_t LO32DSPBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 
  };

  // CPURAReg Register Class...
  const MCPhysReg CPURAReg[] = {
    Mips::RA, 
  };

  // CPURAReg Bit set.
  const uint8_t CPURARegBits[] = {
    0x00, 0x00, 0x08, 
  };

  // CPUSPReg Register Class...
  const MCPhysReg CPUSPReg[] = {
    Mips::SP, 
  };

  // CPUSPReg Bit set.
  const uint8_t CPUSPRegBits[] = {
    0x00, 0x00, 0x10, 
  };

  // DSPCC Register Class...
  const MCPhysReg DSPCC[] = {
    Mips::DSPCCond, 
  };

  // DSPCC Bit set.
  const uint8_t DSPCCBits[] = {
    0x04, 
  };

  // HI32 Register Class...
  const MCPhysReg HI32[] = {
    Mips::HI0, 
  };

  // HI32 Bit set.
  const uint8_t HI32Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 
  };

  // LO32 Register Class...
  const MCPhysReg LO32[] = {
    Mips::LO0, 
  };

  // LO32 Bit set.
  const uint8_t LO32Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
  };

  // FGR64 Register Class...
  const MCPhysReg FGR64[] = {
    Mips::D0_64, Mips::D1_64, Mips::D2_64, Mips::D3_64, Mips::D4_64, Mips::D5_64, Mips::D6_64, Mips::D7_64, Mips::D8_64, Mips::D9_64, Mips::D10_64, Mips::D11_64, Mips::D12_64, Mips::D13_64, Mips::D14_64, Mips::D15_64, Mips::D16_64, Mips::D17_64, Mips::D18_64, Mips::D19_64, Mips::D20_64, Mips::D21_64, Mips::D22_64, Mips::D23_64, Mips::D24_64, Mips::D25_64, Mips::D26_64, Mips::D27_64, Mips::D28_64, Mips::D29_64, Mips::D30_64, Mips::D31_64, 
  };

  // FGR64 Bit set.
  const uint8_t FGR64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x01, 
  };

  // GPR64 Register Class...
  const MCPhysReg GPR64[] = {
    Mips::ZERO_64, Mips::AT_64, Mips::V0_64, Mips::V1_64, Mips::A0_64, Mips::A1_64, Mips::A2_64, Mips::A3_64, Mips::T0_64, Mips::T1_64, Mips::T2_64, Mips::T3_64, Mips::T4_64, Mips::T5_64, Mips::T6_64, Mips::T7_64, Mips::S0_64, Mips::S1_64, Mips::S2_64, Mips::S3_64, Mips::S4_64, Mips::S5_64, Mips::S6_64, Mips::S7_64, Mips::T8_64, Mips::T9_64, Mips::K0_64, Mips::K1_64, Mips::GP_64, Mips::SP_64, Mips::FP_64, Mips::RA_64, 
  };

  // GPR64 Bit set.
  const uint8_t GPR64Bits[] = {
    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0xd8, 0xff, 0xff, 0x03, 
  };

  // AFGR64 Register Class...
  const MCPhysReg AFGR64[] = {
    Mips::D0, Mips::D1, Mips::D2, Mips::D3, Mips::D4, Mips::D5, Mips::D6, Mips::D7, Mips::D8, Mips::D9, Mips::D10, Mips::D11, Mips::D12, Mips::D13, Mips::D14, Mips::D15, 
  };

  // AFGR64 Bit set.
  const uint8_t AFGR64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x7f, 
  };

  // FGR64_and_OddSP Register Class...
  const MCPhysReg FGR64_and_OddSP[] = {
    Mips::D1_64, Mips::D3_64, Mips::D5_64, Mips::D7_64, Mips::D9_64, Mips::D11_64, Mips::D13_64, Mips::D15_64, Mips::D17_64, Mips::D19_64, Mips::D21_64, Mips::D23_64, Mips::D25_64, Mips::D27_64, Mips::D29_64, Mips::D31_64, 
  };

  // FGR64_and_OddSP Bit set.
  const uint8_t FGR64_and_OddSPBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x55, 0x55, 0x55, 0x01, 
  };

  // GPR64_with_sub_32_in_CPU16RegsPlusSP Register Class...
  const MCPhysReg GPR64_with_sub_32_in_CPU16RegsPlusSP[] = {
    Mips::V0_64, Mips::V1_64, Mips::A0_64, Mips::A1_64, Mips::A2_64, Mips::A3_64, Mips::S0_64, Mips::S1_64, Mips::SP_64, 
  };

  // GPR64_with_sub_32_in_CPU16RegsPlusSP Bit set.
  const uint8_t GPR64_with_sub_32_in_CPU16RegsPlusSPBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x03, 
  };

  // AFGR64_and_OddSP Register Class...
  const MCPhysReg AFGR64_and_OddSP[] = {
    Mips::D1, Mips::D3, Mips::D5, Mips::D7, Mips::D9, Mips::D11, Mips::D13, Mips::D15, 
  };

  // AFGR64_and_OddSP Bit set.
  const uint8_t AFGR64_and_OddSPBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 
  };

  // GPR64_with_sub_32_in_CPU16Regs Register Class...
  const MCPhysReg GPR64_with_sub_32_in_CPU16Regs[] = {
    Mips::V0_64, Mips::V1_64, Mips::A0_64, Mips::A1_64, Mips::A2_64, Mips::A3_64, Mips::S0_64, Mips::S1_64, 
  };

  // GPR64_with_sub_32_in_CPU16Regs Bit set.
  const uint8_t GPR64_with_sub_32_in_CPU16RegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x03, 
  };

  // ACC64DSP Register Class...
  const MCPhysReg ACC64DSP[] = {
    Mips::AC0, Mips::AC1, Mips::AC2, Mips::AC3, 
  };

  // ACC64DSP Bit set.
  const uint8_t ACC64DSPBits[] = {
    0x00, 0x00, 0x00, 0x3c, 
  };

  // OCTEON_MPL Register Class...
  const MCPhysReg OCTEON_MPL[] = {
    Mips::MPL0, Mips::MPL1, Mips::MPL2, 
  };

  // OCTEON_MPL Bit set.
  const uint8_t OCTEON_MPLBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 
  };

  // OCTEON_P Register Class...
  const MCPhysReg OCTEON_P[] = {
    Mips::P0, Mips::P1, Mips::P2, 
  };

  // OCTEON_P Bit set.
  const uint8_t OCTEON_PBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 
  };

  // ACC64 Register Class...
  const MCPhysReg ACC64[] = {
    Mips::AC0, 
  };

  // ACC64 Bit set.
  const uint8_t ACC64Bits[] = {
    0x00, 0x00, 0x00, 0x04, 
  };

  // GPR64_with_sub_32_in_CPURAReg Register Class...
  const MCPhysReg GPR64_with_sub_32_in_CPURAReg[] = {
    Mips::RA_64, 
  };

  // GPR64_with_sub_32_in_CPURAReg Bit set.
  const uint8_t GPR64_with_sub_32_in_CPURARegBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 
  };

  // GPR64_with_sub_32_in_CPUSPReg Register Class...
  const MCPhysReg GPR64_with_sub_32_in_CPUSPReg[] = {
    Mips::SP_64, 
  };

  // GPR64_with_sub_32_in_CPUSPReg Bit set.
  const uint8_t GPR64_with_sub_32_in_CPUSPRegBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 
  };

  // HI64 Register Class...
  const MCPhysReg HI64[] = {
    Mips::HI0_64, 
  };

  // HI64 Bit set.
  const uint8_t HI64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
  };

  // LO64 Register Class...
  const MCPhysReg LO64[] = {
    Mips::LO0_64, 
  };

  // LO64 Bit set.
  const uint8_t LO64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 
  };

  // MSA128B Register Class...
  const MCPhysReg MSA128B[] = {
    Mips::W0, Mips::W1, Mips::W2, Mips::W3, Mips::W4, Mips::W5, Mips::W6, Mips::W7, Mips::W8, Mips::W9, Mips::W10, Mips::W11, Mips::W12, Mips::W13, Mips::W14, Mips::W15, Mips::W16, Mips::W17, Mips::W18, Mips::W19, Mips::W20, Mips::W21, Mips::W22, Mips::W23, Mips::W24, Mips::W25, Mips::W26, Mips::W27, Mips::W28, Mips::W29, Mips::W30, Mips::W31, 
  };

  // MSA128B Bit set.
  const uint8_t MSA128BBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // MSA128D Register Class...
  const MCPhysReg MSA128D[] = {
    Mips::W0, Mips::W1, Mips::W2, Mips::W3, Mips::W4, Mips::W5, Mips::W6, Mips::W7, Mips::W8, Mips::W9, Mips::W10, Mips::W11, Mips::W12, Mips::W13, Mips::W14, Mips::W15, Mips::W16, Mips::W17, Mips::W18, Mips::W19, Mips::W20, Mips::W21, Mips::W22, Mips::W23, Mips::W24, Mips::W25, Mips::W26, Mips::W27, Mips::W28, Mips::W29, Mips::W30, Mips::W31, 
  };

  // MSA128D Bit set.
  const uint8_t MSA128DBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // MSA128H Register Class...
  const MCPhysReg MSA128H[] = {
    Mips::W0, Mips::W1, Mips::W2, Mips::W3, Mips::W4, Mips::W5, Mips::W6, Mips::W7, Mips::W8, Mips::W9, Mips::W10, Mips::W11, Mips::W12, Mips::W13, Mips::W14, Mips::W15, Mips::W16, Mips::W17, Mips::W18, Mips::W19, Mips::W20, Mips::W21, Mips::W22, Mips::W23, Mips::W24, Mips::W25, Mips::W26, Mips::W27, Mips::W28, Mips::W29, Mips::W30, Mips::W31, 
  };

  // MSA128H Bit set.
  const uint8_t MSA128HBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // MSA128W Register Class...
  const MCPhysReg MSA128W[] = {
    Mips::W0, Mips::W1, Mips::W2, Mips::W3, Mips::W4, Mips::W5, Mips::W6, Mips::W7, Mips::W8, Mips::W9, Mips::W10, Mips::W11, Mips::W12, Mips::W13, Mips::W14, Mips::W15, Mips::W16, Mips::W17, Mips::W18, Mips::W19, Mips::W20, Mips::W21, Mips::W22, Mips::W23, Mips::W24, Mips::W25, Mips::W26, Mips::W27, Mips::W28, Mips::W29, Mips::W30, Mips::W31, 
  };

  // MSA128W Bit set.
  const uint8_t MSA128WBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // MSA128B_with_sub_64_in_OddSP Register Class...
  const MCPhysReg MSA128B_with_sub_64_in_OddSP[] = {
    Mips::W1, Mips::W3, Mips::W5, Mips::W7, Mips::W9, Mips::W11, Mips::W13, Mips::W15, Mips::W17, Mips::W19, Mips::W21, Mips::W23, Mips::W25, Mips::W27, Mips::W29, Mips::W31, 
  };

  // MSA128B_with_sub_64_in_OddSP Bit set.
  const uint8_t MSA128B_with_sub_64_in_OddSPBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x55, 0x55, 0x55, 0x05, 
  };

  // ACC128 Register Class...
  const MCPhysReg ACC128[] = {
    Mips::AC0_64, 
  };

  // ACC128 Bit set.
  const uint8_t ACC128Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  };

}

extern const MCRegisterClass MipsMCRegisterClasses[] = {
  { "OddSP", OddSP, OddSPBits, 56, sizeof(OddSPBits), Mips::OddSPRegClassID, 4, 4, 1, 0 },
  { "CCR", CCR, CCRBits, 32, sizeof(CCRBits), Mips::CCRRegClassID, 4, 4, 1, 0 },
  { "COP2", COP2, COP2Bits, 32, sizeof(COP2Bits), Mips::COP2RegClassID, 4, 4, 1, 0 },
  { "COP3", COP3, COP3Bits, 32, sizeof(COP3Bits), Mips::COP3RegClassID, 4, 4, 1, 0 },
  { "DSPR", DSPR, DSPRBits, 32, sizeof(DSPRBits), Mips::DSPRRegClassID, 4, 4, 1, 1 },
  { "FGR32", FGR32, FGR32Bits, 32, sizeof(FGR32Bits), Mips::FGR32RegClassID, 4, 4, 1, 1 },
  { "FGRCC", FGRCC, FGRCCBits, 32, sizeof(FGRCCBits), Mips::FGRCCRegClassID, 4, 4, 1, 1 },
  { "FGRH32", FGRH32, FGRH32Bits, 32, sizeof(FGRH32Bits), Mips::FGRH32RegClassID, 4, 4, 1, 0 },
  { "GPR32", GPR32, GPR32Bits, 32, sizeof(GPR32Bits), Mips::GPR32RegClassID, 4, 4, 1, 1 },
  { "HWRegs", HWRegs, HWRegsBits, 32, sizeof(HWRegsBits), Mips::HWRegsRegClassID, 4, 4, 1, 0 },
  { "OddSP_with_sub_hi", OddSP_with_sub_hi, OddSP_with_sub_hiBits, 24, sizeof(OddSP_with_sub_hiBits), Mips::OddSP_with_sub_hiRegClassID, 4, 4, 1, 0 },
  { "FGR32_and_OddSP", FGR32_and_OddSP, FGR32_and_OddSPBits, 16, sizeof(FGR32_and_OddSPBits), Mips::FGR32_and_OddSPRegClassID, 4, 4, 1, 1 },
  { "FGRH32_and_OddSP", FGRH32_and_OddSP, FGRH32_and_OddSPBits, 16, sizeof(FGRH32_and_OddSPBits), Mips::FGRH32_and_OddSPRegClassID, 4, 4, 1, 0 },
  { "OddSP_with_sub_hi_with_sub_hi_in_FGRH32", OddSP_with_sub_hi_with_sub_hi_in_FGRH32, OddSP_with_sub_hi_with_sub_hi_in_FGRH32Bits, 16, sizeof(OddSP_with_sub_hi_with_sub_hi_in_FGRH32Bits), Mips::OddSP_with_sub_hi_with_sub_hi_in_FGRH32RegClassID, 4, 4, 1, 0 },
  { "CPU16RegsPlusSP", CPU16RegsPlusSP, CPU16RegsPlusSPBits, 9, sizeof(CPU16RegsPlusSPBits), Mips::CPU16RegsPlusSPRegClassID, 4, 4, 1, 1 },
  { "CPU16Regs", CPU16Regs, CPU16RegsBits, 8, sizeof(CPU16RegsBits), Mips::CPU16RegsRegClassID, 4, 4, 1, 1 },
  { "FCC", FCC, FCCBits, 8, sizeof(FCCBits), Mips::FCCRegClassID, 4, 4, 1, 0 },
  { "GPRMM16", GPRMM16, GPRMM16Bits, 8, sizeof(GPRMM16Bits), Mips::GPRMM16RegClassID, 4, 4, 1, 1 },
  { "MSACtrl", MSACtrl, MSACtrlBits, 8, sizeof(MSACtrlBits), Mips::MSACtrlRegClassID, 4, 4, 1, 1 },
  { "OddSP_with_sub_hi_with_sub_hi_in_FGR32", OddSP_with_sub_hi_with_sub_hi_in_FGR32, OddSP_with_sub_hi_with_sub_hi_in_FGR32Bits, 8, sizeof(OddSP_with_sub_hi_with_sub_hi_in_FGR32Bits), Mips::OddSP_with_sub_hi_with_sub_hi_in_FGR32RegClassID, 4, 4, 1, 0 },
  { "HI32DSP", HI32DSP, HI32DSPBits, 4, sizeof(HI32DSPBits), Mips::HI32DSPRegClassID, 4, 4, 1, 1 },
  { "LO32DSP", LO32DSP, LO32DSPBits, 4, sizeof(LO32DSPBits), Mips::LO32DSPRegClassID, 4, 4, 1, 1 },
  { "CPURAReg", CPURAReg, CPURARegBits, 1, sizeof(CPURARegBits), Mips::CPURARegRegClassID, 4, 4, 1, 0 },
  { "CPUSPReg", CPUSPReg, CPUSPRegBits, 1, sizeof(CPUSPRegBits), Mips::CPUSPRegRegClassID, 4, 4, 1, 0 },
  { "DSPCC", DSPCC, DSPCCBits, 1, sizeof(DSPCCBits), Mips::DSPCCRegClassID, 4, 4, 1, 1 },
  { "HI32", HI32, HI32Bits, 1, sizeof(HI32Bits), Mips::HI32RegClassID, 4, 4, 1, 1 },
  { "LO32", LO32, LO32Bits, 1, sizeof(LO32Bits), Mips::LO32RegClassID, 4, 4, 1, 1 },
  { "FGR64", FGR64, FGR64Bits, 32, sizeof(FGR64Bits), Mips::FGR64RegClassID, 8, 8, 1, 1 },
  { "GPR64", GPR64, GPR64Bits, 32, sizeof(GPR64Bits), Mips::GPR64RegClassID, 8, 8, 1, 1 },
  { "AFGR64", AFGR64, AFGR64Bits, 16, sizeof(AFGR64Bits), Mips::AFGR64RegClassID, 8, 8, 1, 1 },
  { "FGR64_and_OddSP", FGR64_and_OddSP, FGR64_and_OddSPBits, 16, sizeof(FGR64_and_OddSPBits), Mips::FGR64_and_OddSPRegClassID, 8, 8, 1, 1 },
  { "GPR64_with_sub_32_in_CPU16RegsPlusSP", GPR64_with_sub_32_in_CPU16RegsPlusSP, GPR64_with_sub_32_in_CPU16RegsPlusSPBits, 9, sizeof(GPR64_with_sub_32_in_CPU16RegsPlusSPBits), Mips::GPR64_with_sub_32_in_CPU16RegsPlusSPRegClassID, 8, 8, 1, 1 },
  { "AFGR64_and_OddSP", AFGR64_and_OddSP, AFGR64_and_OddSPBits, 8, sizeof(AFGR64_and_OddSPBits), Mips::AFGR64_and_OddSPRegClassID, 8, 8, 1, 1 },
  { "GPR64_with_sub_32_in_CPU16Regs", GPR64_with_sub_32_in_CPU16Regs, GPR64_with_sub_32_in_CPU16RegsBits, 8, sizeof(GPR64_with_sub_32_in_CPU16RegsBits), Mips::GPR64_with_sub_32_in_CPU16RegsRegClassID, 8, 8, 1, 1 },
  { "ACC64DSP", ACC64DSP, ACC64DSPBits, 4, sizeof(ACC64DSPBits), Mips::ACC64DSPRegClassID, 8, 8, 1, 1 },
  { "OCTEON_MPL", OCTEON_MPL, OCTEON_MPLBits, 3, sizeof(OCTEON_MPLBits), Mips::OCTEON_MPLRegClassID, 8, 8, 1, 0 },
  { "OCTEON_P", OCTEON_P, OCTEON_PBits, 3, sizeof(OCTEON_PBits), Mips::OCTEON_PRegClassID, 8, 8, 1, 0 },
  { "ACC64", ACC64, ACC64Bits, 1, sizeof(ACC64Bits), Mips::ACC64RegClassID, 8, 8, 1, 1 },
  { "GPR64_with_sub_32_in_CPURAReg", GPR64_with_sub_32_in_CPURAReg, GPR64_with_sub_32_in_CPURARegBits, 1, sizeof(GPR64_with_sub_32_in_CPURARegBits), Mips::GPR64_with_sub_32_in_CPURARegRegClassID, 8, 8, 1, 1 },
  { "GPR64_with_sub_32_in_CPUSPReg", GPR64_with_sub_32_in_CPUSPReg, GPR64_with_sub_32_in_CPUSPRegBits, 1, sizeof(GPR64_with_sub_32_in_CPUSPRegBits), Mips::GPR64_with_sub_32_in_CPUSPRegRegClassID, 8, 8, 1, 1 },
  { "HI64", HI64, HI64Bits, 1, sizeof(HI64Bits), Mips::HI64RegClassID, 8, 8, 1, 1 },
  { "LO64", LO64, LO64Bits, 1, sizeof(LO64Bits), Mips::LO64RegClassID, 8, 8, 1, 1 },
  { "MSA128B", MSA128B, MSA128BBits, 32, sizeof(MSA128BBits), Mips::MSA128BRegClassID, 16, 16, 1, 1 },
  { "MSA128D", MSA128D, MSA128DBits, 32, sizeof(MSA128DBits), Mips::MSA128DRegClassID, 16, 16, 1, 1 },
  { "MSA128H", MSA128H, MSA128HBits, 32, sizeof(MSA128HBits), Mips::MSA128HRegClassID, 16, 16, 1, 1 },
  { "MSA128W", MSA128W, MSA128WBits, 32, sizeof(MSA128WBits), Mips::MSA128WRegClassID, 16, 16, 1, 1 },
  { "MSA128B_with_sub_64_in_OddSP", MSA128B_with_sub_64_in_OddSP, MSA128B_with_sub_64_in_OddSPBits, 16, sizeof(MSA128B_with_sub_64_in_OddSPBits), Mips::MSA128B_with_sub_64_in_OddSPRegClassID, 16, 16, 1, 1 },
  { "ACC128", ACC128, ACC128Bits, 1, sizeof(ACC128Bits), Mips::ACC128RegClassID, 16, 16, 1, 1 },
};

// Mips Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair MipsDwarfFlavour0Dwarf2L[] = {
  { 0U, Mips::ZERO_64 },
  { 1U, Mips::AT_64 },
  { 2U, Mips::V0_64 },
  { 3U, Mips::V1_64 },
  { 4U, Mips::A0_64 },
  { 5U, Mips::A1_64 },
  { 6U, Mips::A2_64 },
  { 7U, Mips::A3_64 },
  { 8U, Mips::T0_64 },
  { 9U, Mips::T1_64 },
  { 10U, Mips::T2_64 },
  { 11U, Mips::T3_64 },
  { 12U, Mips::T4_64 },
  { 13U, Mips::T5_64 },
  { 14U, Mips::T6_64 },
  { 15U, Mips::T7_64 },
  { 16U, Mips::S0_64 },
  { 17U, Mips::S1_64 },
  { 18U, Mips::S2_64 },
  { 19U, Mips::S3_64 },
  { 20U, Mips::S4_64 },
  { 21U, Mips::S5_64 },
  { 22U, Mips::S6_64 },
  { 23U, Mips::S7_64 },
  { 24U, Mips::T8_64 },
  { 25U, Mips::T9_64 },
  { 26U, Mips::K0_64 },
  { 27U, Mips::K1_64 },
  { 28U, Mips::GP_64 },
  { 29U, Mips::SP_64 },
  { 30U, Mips::FP_64 },
  { 31U, Mips::RA_64 },
  { 32U, Mips::D0_64 },
  { 33U, Mips::D1_64 },
  { 34U, Mips::D2_64 },
  { 35U, Mips::D3_64 },
  { 36U, Mips::D4_64 },
  { 37U, Mips::D5_64 },
  { 38U, Mips::D6_64 },
  { 39U, Mips::D7_64 },
  { 40U, Mips::D8_64 },
  { 41U, Mips::D9_64 },
  { 42U, Mips::D10_64 },
  { 43U, Mips::D11_64 },
  { 44U, Mips::D12_64 },
  { 45U, Mips::D13_64 },
  { 46U, Mips::D14_64 },
  { 47U, Mips::D15_64 },
  { 48U, Mips::D16_64 },
  { 49U, Mips::D17_64 },
  { 50U, Mips::D18_64 },
  { 51U, Mips::D19_64 },
  { 52U, Mips::D20_64 },
  { 53U, Mips::D21_64 },
  { 54U, Mips::D22_64 },
  { 55U, Mips::D23_64 },
  { 56U, Mips::D24_64 },
  { 57U, Mips::D25_64 },
  { 58U, Mips::D26_64 },
  { 59U, Mips::D27_64 },
  { 60U, Mips::D28_64 },
  { 61U, Mips::D29_64 },
  { 62U, Mips::D30_64 },
  { 63U, Mips::D31_64 },
  { 64U, Mips::HI0 },
  { 65U, Mips::LO0 },
  { 176U, Mips::HI1 },
  { 177U, Mips::LO1 },
  { 178U, Mips::HI2 },
  { 179U, Mips::LO2 },
  { 180U, Mips::HI3 },
  { 181U, Mips::LO3 },
};
extern const unsigned MipsDwarfFlavour0Dwarf2LSize = sizeof(MipsDwarfFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair MipsEHFlavour0Dwarf2L[] = {
  { 0U, Mips::ZERO_64 },
  { 1U, Mips::AT_64 },
  { 2U, Mips::V0_64 },
  { 3U, Mips::V1_64 },
  { 4U, Mips::A0_64 },
  { 5U, Mips::A1_64 },
  { 6U, Mips::A2_64 },
  { 7U, Mips::A3_64 },
  { 8U, Mips::T0_64 },
  { 9U, Mips::T1_64 },
  { 10U, Mips::T2_64 },
  { 11U, Mips::T3_64 },
  { 12U, Mips::T4_64 },
  { 13U, Mips::T5_64 },
  { 14U, Mips::T6_64 },
  { 15U, Mips::T7_64 },
  { 16U, Mips::S0_64 },
  { 17U, Mips::S1_64 },
  { 18U, Mips::S2_64 },
  { 19U, Mips::S3_64 },
  { 20U, Mips::S4_64 },
  { 21U, Mips::S5_64 },
  { 22U, Mips::S6_64 },
  { 23U, Mips::S7_64 },
  { 24U, Mips::T8_64 },
  { 25U, Mips::T9_64 },
  { 26U, Mips::K0_64 },
  { 27U, Mips::K1_64 },
  { 28U, Mips::GP_64 },
  { 29U, Mips::SP_64 },
  { 30U, Mips::FP_64 },
  { 31U, Mips::RA_64 },
  { 32U, Mips::D0_64 },
  { 33U, Mips::D1_64 },
  { 34U, Mips::D2_64 },
  { 35U, Mips::D3_64 },
  { 36U, Mips::D4_64 },
  { 37U, Mips::D5_64 },
  { 38U, Mips::D6_64 },
  { 39U, Mips::D7_64 },
  { 40U, Mips::D8_64 },
  { 41U, Mips::D9_64 },
  { 42U, Mips::D10_64 },
  { 43U, Mips::D11_64 },
  { 44U, Mips::D12_64 },
  { 45U, Mips::D13_64 },
  { 46U, Mips::D14_64 },
  { 47U, Mips::D15_64 },
  { 48U, Mips::D16_64 },
  { 49U, Mips::D17_64 },
  { 50U, Mips::D18_64 },
  { 51U, Mips::D19_64 },
  { 52U, Mips::D20_64 },
  { 53U, Mips::D21_64 },
  { 54U, Mips::D22_64 },
  { 55U, Mips::D23_64 },
  { 56U, Mips::D24_64 },
  { 57U, Mips::D25_64 },
  { 58U, Mips::D26_64 },
  { 59U, Mips::D27_64 },
  { 60U, Mips::D28_64 },
  { 61U, Mips::D29_64 },
  { 62U, Mips::D30_64 },
  { 63U, Mips::D31_64 },
  { 64U, Mips::HI0 },
  { 65U, Mips::LO0 },
  { 176U, Mips::HI1 },
  { 177U, Mips::LO1 },
  { 178U, Mips::HI2 },
  { 179U, Mips::LO2 },
  { 180U, Mips::HI3 },
  { 181U, Mips::LO3 },
};
extern const unsigned MipsEHFlavour0Dwarf2LSize = sizeof(MipsEHFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair MipsDwarfFlavour0L2Dwarf[] = {
  { Mips::AT, 1U },
  { Mips::FP, 30U },
  { Mips::GP, 28U },
  { Mips::RA, 31U },
  { Mips::SP, 29U },
  { Mips::ZERO, 0U },
  { Mips::A0, 4U },
  { Mips::A1, 5U },
  { Mips::A2, 6U },
  { Mips::A3, 7U },
  { Mips::AT_64, 1U },
  { Mips::F0, 32U },
  { Mips::F1, 33U },
  { Mips::F2, 34U },
  { Mips::F3, 35U },
  { Mips::F4, 36U },
  { Mips::F5, 37U },
  { Mips::F6, 38U },
  { Mips::F7, 39U },
  { Mips::F8, 40U },
  { Mips::F9, 41U },
  { Mips::F10, 42U },
  { Mips::F11, 43U },
  { Mips::F12, 44U },
  { Mips::F13, 45U },
  { Mips::F14, 46U },
  { Mips::F15, 47U },
  { Mips::F16, 48U },
  { Mips::F17, 49U },
  { Mips::F18, 50U },
  { Mips::F19, 51U },
  { Mips::F20, 52U },
  { Mips::F21, 53U },
  { Mips::F22, 54U },
  { Mips::F23, 55U },
  { Mips::F24, 56U },
  { Mips::F25, 57U },
  { Mips::F26, 58U },
  { Mips::F27, 59U },
  { Mips::F28, 60U },
  { Mips::F29, 61U },
  { Mips::F30, 62U },
  { Mips::F31, 63U },
  { Mips::FP_64, 30U },
  { Mips::F_HI0, 32U },
  { Mips::F_HI1, 33U },
  { Mips::F_HI2, 34U },
  { Mips::F_HI3, 35U },
  { Mips::F_HI4, 36U },
  { Mips::F_HI5, 37U },
  { Mips::F_HI6, 38U },
  { Mips::F_HI7, 39U },
  { Mips::F_HI8, 40U },
  { Mips::F_HI9, 41U },
  { Mips::F_HI10, 42U },
  { Mips::F_HI11, 43U },
  { Mips::F_HI12, 44U },
  { Mips::F_HI13, 45U },
  { Mips::F_HI14, 46U },
  { Mips::F_HI15, 47U },
  { Mips::F_HI16, 48U },
  { Mips::F_HI17, 49U },
  { Mips::F_HI18, 50U },
  { Mips::F_HI19, 51U },
  { Mips::F_HI20, 52U },
  { Mips::F_HI21, 53U },
  { Mips::F_HI22, 54U },
  { Mips::F_HI23, 55U },
  { Mips::F_HI24, 56U },
  { Mips::F_HI25, 57U },
  { Mips::F_HI26, 58U },
  { Mips::F_HI27, 59U },
  { Mips::F_HI28, 60U },
  { Mips::F_HI29, 61U },
  { Mips::F_HI30, 62U },
  { Mips::F_HI31, 63U },
  { Mips::GP_64, 28U },
  { Mips::HI0, 64U },
  { Mips::HI1, 176U },
  { Mips::HI2, 178U },
  { Mips::HI3, 180U },
  { Mips::K0, 26U },
  { Mips::K1, 27U },
  { Mips::LO0, 65U },
  { Mips::LO1, 177U },
  { Mips::LO2, 179U },
  { Mips::LO3, 181U },
  { Mips::RA_64, 31U },
  { Mips::S0, 16U },
  { Mips::S1, 17U },
  { Mips::S2, 18U },
  { Mips::S3, 19U },
  { Mips::S4, 20U },
  { Mips::S5, 21U },
  { Mips::S6, 22U },
  { Mips::S7, 23U },
  { Mips::SP_64, 29U },
  { Mips::T0, 8U },
  { Mips::T1, 9U },
  { Mips::T2, 10U },
  { Mips::T3, 11U },
  { Mips::T4, 12U },
  { Mips::T5, 13U },
  { Mips::T6, 14U },
  { Mips::T7, 15U },
  { Mips::T8, 24U },
  { Mips::T9, 25U },
  { Mips::V0, 2U },
  { Mips::V1, 3U },
  { Mips::W0, 32U },
  { Mips::W1, 33U },
  { Mips::W2, 34U },
  { Mips::W3, 35U },
  { Mips::W4, 36U },
  { Mips::W5, 37U },
  { Mips::W6, 38U },
  { Mips::W7, 39U },
  { Mips::W8, 40U },
  { Mips::W9, 41U },
  { Mips::W10, 42U },
  { Mips::W11, 43U },
  { Mips::W12, 44U },
  { Mips::W13, 45U },
  { Mips::W14, 46U },
  { Mips::W15, 47U },
  { Mips::W16, 48U },
  { Mips::W17, 49U },
  { Mips::W18, 50U },
  { Mips::W19, 51U },
  { Mips::W20, 52U },
  { Mips::W21, 53U },
  { Mips::W22, 54U },
  { Mips::W23, 55U },
  { Mips::W24, 56U },
  { Mips::W25, 57U },
  { Mips::W26, 58U },
  { Mips::W27, 59U },
  { Mips::W28, 60U },
  { Mips::W29, 61U },
  { Mips::W30, 62U },
  { Mips::W31, 63U },
  { Mips::ZERO_64, 0U },
  { Mips::A0_64, 4U },
  { Mips::A1_64, 5U },
  { Mips::A2_64, 6U },
  { Mips::A3_64, 7U },
  { Mips::D0_64, 32U },
  { Mips::D1_64, 33U },
  { Mips::D2_64, 34U },
  { Mips::D3_64, 35U },
  { Mips::D4_64, 36U },
  { Mips::D5_64, 37U },
  { Mips::D6_64, 38U },
  { Mips::D7_64, 39U },
  { Mips::D8_64, 40U },
  { Mips::D9_64, 41U },
  { Mips::D10_64, 42U },
  { Mips::D11_64, 43U },
  { Mips::D12_64, 44U },
  { Mips::D13_64, 45U },
  { Mips::D14_64, 46U },
  { Mips::D15_64, 47U },
  { Mips::D16_64, 48U },
  { Mips::D17_64, 49U },
  { Mips::D18_64, 50U },
  { Mips::D19_64, 51U },
  { Mips::D20_64, 52U },
  { Mips::D21_64, 53U },
  { Mips::D22_64, 54U },
  { Mips::D23_64, 55U },
  { Mips::D24_64, 56U },
  { Mips::D25_64, 57U },
  { Mips::D26_64, 58U },
  { Mips::D27_64, 59U },
  { Mips::D28_64, 60U },
  { Mips::D29_64, 61U },
  { Mips::D30_64, 62U },
  { Mips::D31_64, 63U },
  { Mips::K0_64, 26U },
  { Mips::K1_64, 27U },
  { Mips::S0_64, 16U },
  { Mips::S1_64, 17U },
  { Mips::S2_64, 18U },
  { Mips::S3_64, 19U },
  { Mips::S4_64, 20U },
  { Mips::S5_64, 21U },
  { Mips::S6_64, 22U },
  { Mips::S7_64, 23U },
  { Mips::T0_64, 8U },
  { Mips::T1_64, 9U },
  { Mips::T2_64, 10U },
  { Mips::T3_64, 11U },
  { Mips::T4_64, 12U },
  { Mips::T5_64, 13U },
  { Mips::T6_64, 14U },
  { Mips::T7_64, 15U },
  { Mips::T8_64, 24U },
  { Mips::T9_64, 25U },
  { Mips::V0_64, 2U },
  { Mips::V1_64, 3U },
};
extern const unsigned MipsDwarfFlavour0L2DwarfSize = sizeof(MipsDwarfFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair MipsEHFlavour0L2Dwarf[] = {
  { Mips::AT, 1U },
  { Mips::FP, 30U },
  { Mips::GP, 28U },
  { Mips::RA, 31U },
  { Mips::SP, 29U },
  { Mips::ZERO, 0U },
  { Mips::A0, 4U },
  { Mips::A1, 5U },
  { Mips::A2, 6U },
  { Mips::A3, 7U },
  { Mips::AT_64, 1U },
  { Mips::F0, 32U },
  { Mips::F1, 33U },
  { Mips::F2, 34U },
  { Mips::F3, 35U },
  { Mips::F4, 36U },
  { Mips::F5, 37U },
  { Mips::F6, 38U },
  { Mips::F7, 39U },
  { Mips::F8, 40U },
  { Mips::F9, 41U },
  { Mips::F10, 42U },
  { Mips::F11, 43U },
  { Mips::F12, 44U },
  { Mips::F13, 45U },
  { Mips::F14, 46U },
  { Mips::F15, 47U },
  { Mips::F16, 48U },
  { Mips::F17, 49U },
  { Mips::F18, 50U },
  { Mips::F19, 51U },
  { Mips::F20, 52U },
  { Mips::F21, 53U },
  { Mips::F22, 54U },
  { Mips::F23, 55U },
  { Mips::F24, 56U },
  { Mips::F25, 57U },
  { Mips::F26, 58U },
  { Mips::F27, 59U },
  { Mips::F28, 60U },
  { Mips::F29, 61U },
  { Mips::F30, 62U },
  { Mips::F31, 63U },
  { Mips::FP_64, 30U },
  { Mips::F_HI0, 32U },
  { Mips::F_HI1, 33U },
  { Mips::F_HI2, 34U },
  { Mips::F_HI3, 35U },
  { Mips::F_HI4, 36U },
  { Mips::F_HI5, 37U },
  { Mips::F_HI6, 38U },
  { Mips::F_HI7, 39U },
  { Mips::F_HI8, 40U },
  { Mips::F_HI9, 41U },
  { Mips::F_HI10, 42U },
  { Mips::F_HI11, 43U },
  { Mips::F_HI12, 44U },
  { Mips::F_HI13, 45U },
  { Mips::F_HI14, 46U },
  { Mips::F_HI15, 47U },
  { Mips::F_HI16, 48U },
  { Mips::F_HI17, 49U },
  { Mips::F_HI18, 50U },
  { Mips::F_HI19, 51U },
  { Mips::F_HI20, 52U },
  { Mips::F_HI21, 53U },
  { Mips::F_HI22, 54U },
  { Mips::F_HI23, 55U },
  { Mips::F_HI24, 56U },
  { Mips::F_HI25, 57U },
  { Mips::F_HI26, 58U },
  { Mips::F_HI27, 59U },
  { Mips::F_HI28, 60U },
  { Mips::F_HI29, 61U },
  { Mips::F_HI30, 62U },
  { Mips::F_HI31, 63U },
  { Mips::GP_64, 28U },
  { Mips::HI0, 64U },
  { Mips::HI1, 176U },
  { Mips::HI2, 178U },
  { Mips::HI3, 180U },
  { Mips::K0, 26U },
  { Mips::K1, 27U },
  { Mips::LO0, 65U },
  { Mips::LO1, 177U },
  { Mips::LO2, 179U },
  { Mips::LO3, 181U },
  { Mips::RA_64, 31U },
  { Mips::S0, 16U },
  { Mips::S1, 17U },
  { Mips::S2, 18U },
  { Mips::S3, 19U },
  { Mips::S4, 20U },
  { Mips::S5, 21U },
  { Mips::S6, 22U },
  { Mips::S7, 23U },
  { Mips::SP_64, 29U },
  { Mips::T0, 8U },
  { Mips::T1, 9U },
  { Mips::T2, 10U },
  { Mips::T3, 11U },
  { Mips::T4, 12U },
  { Mips::T5, 13U },
  { Mips::T6, 14U },
  { Mips::T7, 15U },
  { Mips::T8, 24U },
  { Mips::T9, 25U },
  { Mips::V0, 2U },
  { Mips::V1, 3U },
  { Mips::W0, 32U },
  { Mips::W1, 33U },
  { Mips::W2, 34U },
  { Mips::W3, 35U },
  { Mips::W4, 36U },
  { Mips::W5, 37U },
  { Mips::W6, 38U },
  { Mips::W7, 39U },
  { Mips::W8, 40U },
  { Mips::W9, 41U },
  { Mips::W10, 42U },
  { Mips::W11, 43U },
  { Mips::W12, 44U },
  { Mips::W13, 45U },
  { Mips::W14, 46U },
  { Mips::W15, 47U },
  { Mips::W16, 48U },
  { Mips::W17, 49U },
  { Mips::W18, 50U },
  { Mips::W19, 51U },
  { Mips::W20, 52U },
  { Mips::W21, 53U },
  { Mips::W22, 54U },
  { Mips::W23, 55U },
  { Mips::W24, 56U },
  { Mips::W25, 57U },
  { Mips::W26, 58U },
  { Mips::W27, 59U },
  { Mips::W28, 60U },
  { Mips::W29, 61U },
  { Mips::W30, 62U },
  { Mips::W31, 63U },
  { Mips::ZERO_64, 0U },
  { Mips::A0_64, 4U },
  { Mips::A1_64, 5U },
  { Mips::A2_64, 6U },
  { Mips::A3_64, 7U },
  { Mips::D0_64, 32U },
  { Mips::D1_64, 33U },
  { Mips::D2_64, 34U },
  { Mips::D3_64, 35U },
  { Mips::D4_64, 36U },
  { Mips::D5_64, 37U },
  { Mips::D6_64, 38U },
  { Mips::D7_64, 39U },
  { Mips::D8_64, 40U },
  { Mips::D9_64, 41U },
  { Mips::D10_64, 42U },
  { Mips::D11_64, 43U },
  { Mips::D12_64, 44U },
  { Mips::D13_64, 45U },
  { Mips::D14_64, 46U },
  { Mips::D15_64, 47U },
  { Mips::D16_64, 48U },
  { Mips::D17_64, 49U },
  { Mips::D18_64, 50U },
  { Mips::D19_64, 51U },
  { Mips::D20_64, 52U },
  { Mips::D21_64, 53U },
  { Mips::D22_64, 54U },
  { Mips::D23_64, 55U },
  { Mips::D24_64, 56U },
  { Mips::D25_64, 57U },
  { Mips::D26_64, 58U },
  { Mips::D27_64, 59U },
  { Mips::D28_64, 60U },
  { Mips::D29_64, 61U },
  { Mips::D30_64, 62U },
  { Mips::D31_64, 63U },
  { Mips::K0_64, 26U },
  { Mips::K1_64, 27U },
  { Mips::S0_64, 16U },
  { Mips::S1_64, 17U },
  { Mips::S2_64, 18U },
  { Mips::S3_64, 19U },
  { Mips::S4_64, 20U },
  { Mips::S5_64, 21U },
  { Mips::S6_64, 22U },
  { Mips::S7_64, 23U },
  { Mips::T0_64, 8U },
  { Mips::T1_64, 9U },
  { Mips::T2_64, 10U },
  { Mips::T3_64, 11U },
  { Mips::T4_64, 12U },
  { Mips::T5_64, 13U },
  { Mips::T6_64, 14U },
  { Mips::T7_64, 15U },
  { Mips::T8_64, 24U },
  { Mips::T9_64, 25U },
  { Mips::V0_64, 2U },
  { Mips::V1_64, 3U },
};
extern const unsigned MipsEHFlavour0L2DwarfSize = sizeof(MipsEHFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const uint16_t MipsRegEncodingTable[] = {
  0,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  30,
  28,
  2,
  1,
  0,
  6,
  4,
  5,
  3,
  7,
  0,
  31,
  29,
  0,
  4,
  5,
  6,
  7,
  0,
  1,
  2,
  3,
  1,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  2,
  4,
  6,
  8,
  10,
  12,
  14,
  16,
  18,
  20,
  22,
  24,
  26,
  28,
  30,
  0,
  0,
  0,
  0,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  30,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  28,
  0,
  1,
  2,
  3,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  26,
  27,
  0,
  1,
  2,
  3,
  0,
  1,
  2,
  0,
  1,
  2,
  31,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  29,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  24,
  25,
  2,
  3,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  4,
  5,
  6,
  7,
  0,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  0,
  26,
  27,
  0,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  24,
  25,
  2,
  3,
};
static inline void InitMipsMCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0, unsigned PC = 0) {
  RI->InitMCRegisterInfo(MipsRegDesc, 386, RA, PC, MipsMCRegisterClasses, 48, MipsRegUnitRoots, 265, MipsRegDiffLists, MipsRegStrings, MipsSubRegIdxLists, 12,
MipsSubRegIdxRanges,   MipsRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(MipsDwarfFlavour0Dwarf2L, MipsDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(MipsEHFlavour0Dwarf2L, MipsEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(MipsDwarfFlavour0L2Dwarf, MipsDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(MipsEHFlavour0L2Dwarf, MipsEHFlavour0L2DwarfSize, true);
    break;
  }
}

} // End llvm namespace 
#endif // GET_REGINFO_MC_DESC

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Register Information Header Fragment                                        *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER
#include "llvm/Target/TargetRegisterInfo.h"

namespace llvm {

struct MipsGenRegisterInfo : public TargetRegisterInfo {
  explicit MipsGenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0, unsigned PC = 0);
  bool needsStackRealignment(const MachineFunction &) const override
     { return false; }
  unsigned composeSubRegIndicesImpl(unsigned, unsigned) const override;
  const TargetRegisterClass *getSubClassWithSubReg(const TargetRegisterClass*, unsigned) const override;
  const RegClassWeight &getRegClassWeight(const TargetRegisterClass *RC) const override;
  unsigned getRegUnitWeight(unsigned RegUnit) const override;
  unsigned getNumRegPressureSets() const override;
  const char *getRegPressureSetName(unsigned Idx) const override;
  unsigned getRegPressureSetLimit(unsigned Idx) const override;
  const int *getRegClassPressureSets(const TargetRegisterClass *RC) const override;
  const int *getRegUnitPressureSets(unsigned RegUnit) const override;
};

namespace Mips { // Register classes
  extern const TargetRegisterClass OddSPRegClass;
  extern const TargetRegisterClass CCRRegClass;
  extern const TargetRegisterClass COP2RegClass;
  extern const TargetRegisterClass COP3RegClass;
  extern const TargetRegisterClass DSPRRegClass;
  extern const TargetRegisterClass FGR32RegClass;
  extern const TargetRegisterClass FGRCCRegClass;
  extern const TargetRegisterClass FGRH32RegClass;
  extern const TargetRegisterClass GPR32RegClass;
  extern const TargetRegisterClass HWRegsRegClass;
  extern const TargetRegisterClass OddSP_with_sub_hiRegClass;
  extern const TargetRegisterClass FGR32_and_OddSPRegClass;
  extern const TargetRegisterClass FGRH32_and_OddSPRegClass;
  extern const TargetRegisterClass OddSP_with_sub_hi_with_sub_hi_in_FGRH32RegClass;
  extern const TargetRegisterClass CPU16RegsPlusSPRegClass;
  extern const TargetRegisterClass CPU16RegsRegClass;
  extern const TargetRegisterClass FCCRegClass;
  extern const TargetRegisterClass GPRMM16RegClass;
  extern const TargetRegisterClass MSACtrlRegClass;
  extern const TargetRegisterClass OddSP_with_sub_hi_with_sub_hi_in_FGR32RegClass;
  extern const TargetRegisterClass HI32DSPRegClass;
  extern const TargetRegisterClass LO32DSPRegClass;
  extern const TargetRegisterClass CPURARegRegClass;
  extern const TargetRegisterClass CPUSPRegRegClass;
  extern const TargetRegisterClass DSPCCRegClass;
  extern const TargetRegisterClass HI32RegClass;
  extern const TargetRegisterClass LO32RegClass;
  extern const TargetRegisterClass FGR64RegClass;
  extern const TargetRegisterClass GPR64RegClass;
  extern const TargetRegisterClass AFGR64RegClass;
  extern const TargetRegisterClass FGR64_and_OddSPRegClass;
  extern const TargetRegisterClass GPR64_with_sub_32_in_CPU16RegsPlusSPRegClass;
  extern const TargetRegisterClass AFGR64_and_OddSPRegClass;
  extern const TargetRegisterClass GPR64_with_sub_32_in_CPU16RegsRegClass;
  extern const TargetRegisterClass ACC64DSPRegClass;
  extern const TargetRegisterClass OCTEON_MPLRegClass;
  extern const TargetRegisterClass OCTEON_PRegClass;
  extern const TargetRegisterClass ACC64RegClass;
  extern const TargetRegisterClass GPR64_with_sub_32_in_CPURARegRegClass;
  extern const TargetRegisterClass GPR64_with_sub_32_in_CPUSPRegRegClass;
  extern const TargetRegisterClass HI64RegClass;
  extern const TargetRegisterClass LO64RegClass;
  extern const TargetRegisterClass MSA128BRegClass;
  extern const TargetRegisterClass MSA128DRegClass;
  extern const TargetRegisterClass MSA128HRegClass;
  extern const TargetRegisterClass MSA128WRegClass;
  extern const TargetRegisterClass MSA128B_with_sub_64_in_OddSPRegClass;
  extern const TargetRegisterClass ACC128RegClass;
} // end of namespace Mips

} // End llvm namespace 
#endif // GET_REGINFO_HEADER

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Register and Register Classes Information                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC
namespace llvm {

extern const MCRegisterClass MipsMCRegisterClasses[];

static const MVT::SimpleValueType VTLists[] = {
  /* 0 */ MVT::i32, MVT::Other,
  /* 2 */ MVT::i64, MVT::Other,
  /* 4 */ MVT::f32, MVT::Other,
  /* 6 */ MVT::f64, MVT::Other,
  /* 8 */ MVT::v16i8, MVT::Other,
  /* 10 */ MVT::v4i8, MVT::v2i16, MVT::Other,
  /* 13 */ MVT::v8i16, MVT::v8f16, MVT::Other,
  /* 16 */ MVT::v4i32, MVT::v4f32, MVT::Other,
  /* 19 */ MVT::v2i64, MVT::v2f64, MVT::Other,
  /* 22 */ MVT::Untyped, MVT::Other,
};

static const char *const SubRegIndexNameTable[] = { "sub_32", "sub_64", "sub_dsp16_19", "sub_dsp20", "sub_dsp21", "sub_dsp22", "sub_dsp23", "sub_hi", "sub_lo", "sub_hi_then_sub_32", "sub_32_sub_hi_then_sub_32" };


static const unsigned SubRegIndexLaneMaskTable[] = {
  ~0u,
  0x00000001, // sub_32
  0x00000041, // sub_64
  0x00000002, // sub_dsp16_19
  0x00000004, // sub_dsp20
  0x00000008, // sub_dsp21
  0x00000010, // sub_dsp22
  0x00000020, // sub_dsp23
  0x00000040, // sub_hi
  0x00000001, // sub_lo
  0x00000040, // sub_hi_then_sub_32
  0x00000041, // sub_32_sub_hi_then_sub_32
 };



static const TargetRegisterClass *const NullRegClasses[] = { nullptr };

static const uint32_t OddSPSubClassMask[] = {
  0x40083c01, 0x00000001, 
  0x00000000, 0x00004000, // sub_64
  0x60082400, 0x00004001, // sub_hi
  0x40002000, 0x00004000, // sub_lo
};

static const uint32_t CCRSubClassMask[] = {
  0x00000002, 0x00000000, 
};

static const uint32_t COP2SubClassMask[] = {
  0x00000004, 0x00000000, 
};

static const uint32_t COP3SubClassMask[] = {
  0x00000008, 0x00000000, 
};

static const uint32_t DSPRSubClassMask[] = {
  0x00c2c110, 0x00000000, 
  0x90000000, 0x000000c2, // sub_32
};

static const uint32_t FGR32SubClassMask[] = {
  0x00000860, 0x00000000, 
  0x20080000, 0x00000001, // sub_hi
  0x68082400, 0x00007c01, // sub_lo
};

static const uint32_t FGRCCSubClassMask[] = {
  0x00000860, 0x00000000, 
  0x20080000, 0x00000001, // sub_hi
  0x68082400, 0x00007c01, // sub_lo
};

static const uint32_t FGRH32SubClassMask[] = {
  0x00001080, 0x00000000, 
  0x48002000, 0x00007c00, // sub_hi
};

static const uint32_t GPR32SubClassMask[] = {
  0x00c2c100, 0x00000000, 
  0x90000000, 0x000000c2, // sub_32
};

static const uint32_t HWRegsSubClassMask[] = {
  0x00000200, 0x00000000, 
};

static const uint32_t OddSP_with_sub_hiSubClassMask[] = {
  0x40082400, 0x00000001, 
  0x00000000, 0x00004000, // sub_64
};

static const uint32_t FGR32_and_OddSPSubClassMask[] = {
  0x00000800, 0x00000000, 
  0x20080000, 0x00000001, // sub_hi
  0x40002000, 0x00004000, // sub_lo
};

static const uint32_t FGRH32_and_OddSPSubClassMask[] = {
  0x00001000, 0x00000000, 
  0x40002000, 0x00004000, // sub_hi
};

static const uint32_t OddSP_with_sub_hi_with_sub_hi_in_FGRH32SubClassMask[] = {
  0x40002000, 0x00000000, 
  0x00000000, 0x00004000, // sub_64
};

static const uint32_t CPU16RegsPlusSPSubClassMask[] = {
  0x0082c000, 0x00000000, 
  0x80000000, 0x00000082, // sub_32
};

static const uint32_t CPU16RegsSubClassMask[] = {
  0x00028000, 0x00000000, 
  0x00000000, 0x00000002, // sub_32
};

static const uint32_t FCCSubClassMask[] = {
  0x00010000, 0x00000000, 
};

static const uint32_t GPRMM16SubClassMask[] = {
  0x00020000, 0x00000000, 
  0x00000000, 0x00000002, // sub_32
};

static const uint32_t MSACtrlSubClassMask[] = {
  0x00040000, 0x00000000, 
};

static const uint32_t OddSP_with_sub_hi_with_sub_hi_in_FGR32SubClassMask[] = {
  0x00080000, 0x00000001, 
};

static const uint32_t HI32DSPSubClassMask[] = {
  0x02100000, 0x00000000, 
  0x00000000, 0x00000100, // sub_32
  0x00000000, 0x00000024, // sub_hi
  0x00000000, 0x00008000, // sub_hi_then_sub_32
};

static const uint32_t LO32DSPSubClassMask[] = {
  0x04200000, 0x00000000, 
  0x00000000, 0x00008200, // sub_32
  0x00000000, 0x00000024, // sub_lo
};

static const uint32_t CPURARegSubClassMask[] = {
  0x00400000, 0x00000000, 
  0x00000000, 0x00000040, // sub_32
};

static const uint32_t CPUSPRegSubClassMask[] = {
  0x00800000, 0x00000000, 
  0x00000000, 0x00000080, // sub_32
};

static const uint32_t DSPCCSubClassMask[] = {
  0x01000000, 0x00000000, 
};

static const uint32_t HI32SubClassMask[] = {
  0x02000000, 0x00000000, 
  0x00000000, 0x00000100, // sub_32
  0x00000000, 0x00000020, // sub_hi
  0x00000000, 0x00008000, // sub_hi_then_sub_32
};

static const uint32_t LO32SubClassMask[] = {
  0x04000000, 0x00000000, 
  0x00000000, 0x00008200, // sub_32
  0x00000000, 0x00000020, // sub_lo
};

static const uint32_t FGR64SubClassMask[] = {
  0x48000000, 0x00000000, 
  0x00000000, 0x00007c00, // sub_64
};

static const uint32_t GPR64SubClassMask[] = {
  0x90000000, 0x000000c2, 
};

static const uint32_t AFGR64SubClassMask[] = {
  0x20000000, 0x00000001, 
};

static const uint32_t FGR64_and_OddSPSubClassMask[] = {
  0x40000000, 0x00000000, 
  0x00000000, 0x00004000, // sub_64
};

static const uint32_t GPR64_with_sub_32_in_CPU16RegsPlusSPSubClassMask[] = {
  0x80000000, 0x00000082, 
};

static const uint32_t AFGR64_and_OddSPSubClassMask[] = {
  0x00000000, 0x00000001, 
};

static const uint32_t GPR64_with_sub_32_in_CPU16RegsSubClassMask[] = {
  0x00000000, 0x00000002, 
};

static const uint32_t ACC64DSPSubClassMask[] = {
  0x00000000, 0x00000024, 
  0x00000000, 0x00008000, // sub_32_sub_hi_then_sub_32
};

static const uint32_t OCTEON_MPLSubClassMask[] = {
  0x00000000, 0x00000008, 
};

static const uint32_t OCTEON_PSubClassMask[] = {
  0x00000000, 0x00000010, 
};

static const uint32_t ACC64SubClassMask[] = {
  0x00000000, 0x00000020, 
  0x00000000, 0x00008000, // sub_32_sub_hi_then_sub_32
};

static const uint32_t GPR64_with_sub_32_in_CPURARegSubClassMask[] = {
  0x00000000, 0x00000040, 
};

static const uint32_t GPR64_with_sub_32_in_CPUSPRegSubClassMask[] = {
  0x00000000, 0x00000080, 
};

static const uint32_t HI64SubClassMask[] = {
  0x00000000, 0x00000100, 
  0x00000000, 0x00008000, // sub_hi
};

static const uint32_t LO64SubClassMask[] = {
  0x00000000, 0x00000200, 
  0x00000000, 0x00008000, // sub_lo
};

static const uint32_t MSA128BSubClassMask[] = {
  0x00000000, 0x00007c00, 
};

static const uint32_t MSA128DSubClassMask[] = {
  0x00000000, 0x00007c00, 
};

static const uint32_t MSA128HSubClassMask[] = {
  0x00000000, 0x00007c00, 
};

static const uint32_t MSA128WSubClassMask[] = {
  0x00000000, 0x00007c00, 
};

static const uint32_t MSA128B_with_sub_64_in_OddSPSubClassMask[] = {
  0x00000000, 0x00004000, 
};

static const uint32_t ACC128SubClassMask[] = {
  0x00000000, 0x00008000, 
};

static const uint16_t SuperRegIdxSeqs[] = {
  /* 0 */ 1, 0,
  /* 2 */ 2, 0,
  /* 4 */ 8, 0,
  /* 6 */ 1, 9, 0,
  /* 9 */ 2, 8, 9, 0,
  /* 13 */ 1, 8, 10, 0,
  /* 17 */ 11, 0,
};

static const TargetRegisterClass *const FGR32Superclasses[] = {
  &Mips::FGRCCRegClass,
  nullptr
};

static const TargetRegisterClass *const FGRCCSuperclasses[] = {
  &Mips::FGR32RegClass,
  nullptr
};

static const TargetRegisterClass *const GPR32Superclasses[] = {
  &Mips::DSPRRegClass,
  nullptr
};

static const TargetRegisterClass *const OddSP_with_sub_hiSuperclasses[] = {
  &Mips::OddSPRegClass,
  nullptr
};

static const TargetRegisterClass *const FGR32_and_OddSPSuperclasses[] = {
  &Mips::OddSPRegClass,
  &Mips::FGR32RegClass,
  &Mips::FGRCCRegClass,
  nullptr
};

static const TargetRegisterClass *const FGRH32_and_OddSPSuperclasses[] = {
  &Mips::OddSPRegClass,
  &Mips::FGRH32RegClass,
  nullptr
};

static const TargetRegisterClass *const OddSP_with_sub_hi_with_sub_hi_in_FGRH32Superclasses[] = {
  &Mips::OddSPRegClass,
  &Mips::OddSP_with_sub_hiRegClass,
  nullptr
};

static const TargetRegisterClass *const CPU16RegsPlusSPSuperclasses[] = {
  &Mips::DSPRRegClass,
  &Mips::GPR32RegClass,
  nullptr
};

static const TargetRegisterClass *const CPU16RegsSuperclasses[] = {
  &Mips::DSPRRegClass,
  &Mips::GPR32RegClass,
  &Mips::CPU16RegsPlusSPRegClass,
  nullptr
};

static const TargetRegisterClass *const GPRMM16Superclasses[] = {
  &Mips::DSPRRegClass,
  &Mips::GPR32RegClass,
  &Mips::CPU16RegsPlusSPRegClass,
  &Mips::CPU16RegsRegClass,
  nullptr
};

static const TargetRegisterClass *const OddSP_with_sub_hi_with_sub_hi_in_FGR32Superclasses[] = {
  &Mips::OddSPRegClass,
  &Mips::OddSP_with_sub_hiRegClass,
  nullptr
};

static const TargetRegisterClass *const CPURARegSuperclasses[] = {
  &Mips::DSPRRegClass,
  &Mips::GPR32RegClass,
  nullptr
};

static const TargetRegisterClass *const CPUSPRegSuperclasses[] = {
  &Mips::DSPRRegClass,
  &Mips::GPR32RegClass,
  &Mips::CPU16RegsPlusSPRegClass,
  nullptr
};

static const TargetRegisterClass *const HI32Superclasses[] = {
  &Mips::HI32DSPRegClass,
  nullptr
};

static const TargetRegisterClass *const LO32Superclasses[] = {
  &Mips::LO32DSPRegClass,
  nullptr
};

static const TargetRegisterClass *const FGR64_and_OddSPSuperclasses[] = {
  &Mips::OddSPRegClass,
  &Mips::OddSP_with_sub_hiRegClass,
  &Mips::OddSP_with_sub_hi_with_sub_hi_in_FGRH32RegClass,
  &Mips::FGR64RegClass,
  nullptr
};

static const TargetRegisterClass *const GPR64_with_sub_32_in_CPU16RegsPlusSPSuperclasses[] = {
  &Mips::GPR64RegClass,
  nullptr
};

static const TargetRegisterClass *const AFGR64_and_OddSPSuperclasses[] = {
  &Mips::OddSPRegClass,
  &Mips::OddSP_with_sub_hiRegClass,
  &Mips::OddSP_with_sub_hi_with_sub_hi_in_FGR32RegClass,
  &Mips::AFGR64RegClass,
  nullptr
};

static const TargetRegisterClass *const GPR64_with_sub_32_in_CPU16RegsSuperclasses[] = {
  &Mips::GPR64RegClass,
  &Mips::GPR64_with_sub_32_in_CPU16RegsPlusSPRegClass,
  nullptr
};

static const TargetRegisterClass *const ACC64Superclasses[] = {
  &Mips::ACC64DSPRegClass,
  nullptr
};

static const TargetRegisterClass *const GPR64_with_sub_32_in_CPURARegSuperclasses[] = {
  &Mips::GPR64RegClass,
  nullptr
};

static const TargetRegisterClass *const GPR64_with_sub_32_in_CPUSPRegSuperclasses[] = {
  &Mips::GPR64RegClass,
  &Mips::GPR64_with_sub_32_in_CPU16RegsPlusSPRegClass,
  nullptr
};

static const TargetRegisterClass *const MSA128BSuperclasses[] = {
  &Mips::MSA128DRegClass,
  &Mips::MSA128HRegClass,
  &Mips::MSA128WRegClass,
  nullptr
};

static const TargetRegisterClass *const MSA128DSuperclasses[] = {
  &Mips::MSA128BRegClass,
  &Mips::MSA128HRegClass,
  &Mips::MSA128WRegClass,
  nullptr
};

static const TargetRegisterClass *const MSA128HSuperclasses[] = {
  &Mips::MSA128BRegClass,
  &Mips::MSA128DRegClass,
  &Mips::MSA128WRegClass,
  nullptr
};

static const TargetRegisterClass *const MSA128WSuperclasses[] = {
  &Mips::MSA128BRegClass,
  &Mips::MSA128DRegClass,
  &Mips::MSA128HRegClass,
  nullptr
};

static const TargetRegisterClass *const MSA128B_with_sub_64_in_OddSPSuperclasses[] = {
  &Mips::MSA128BRegClass,
  &Mips::MSA128DRegClass,
  &Mips::MSA128HRegClass,
  &Mips::MSA128WRegClass,
  nullptr
};

namespace Mips {   // Register class instances
  extern const TargetRegisterClass OddSPRegClass = {
    &MipsMCRegisterClasses[OddSPRegClassID],
    VTLists + 4,
    OddSPSubClassMask,
    SuperRegIdxSeqs + 9,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass CCRRegClass = {
    &MipsMCRegisterClasses[CCRRegClassID],
    VTLists + 0,
    CCRSubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass COP2RegClass = {
    &MipsMCRegisterClasses[COP2RegClassID],
    VTLists + 0,
    COP2SubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass COP3RegClass = {
    &MipsMCRegisterClasses[COP3RegClassID],
    VTLists + 0,
    COP3SubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass DSPRRegClass = {
    &MipsMCRegisterClasses[DSPRRegClassID],
    VTLists + 10,
    DSPRSubClassMask,
    SuperRegIdxSeqs + 0,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass FGR32RegClass = {
    &MipsMCRegisterClasses[FGR32RegClassID],
    VTLists + 4,
    FGR32SubClassMask,
    SuperRegIdxSeqs + 10,
    FGR32Superclasses,
    nullptr
  };

  extern const TargetRegisterClass FGRCCRegClass = {
    &MipsMCRegisterClasses[FGRCCRegClassID],
    VTLists + 0,
    FGRCCSubClassMask,
    SuperRegIdxSeqs + 10,
    FGRCCSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass FGRH32RegClass = {
    &MipsMCRegisterClasses[FGRH32RegClassID],
    VTLists + 4,
    FGRH32SubClassMask,
    SuperRegIdxSeqs + 4,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass GPR32RegClass = {
    &MipsMCRegisterClasses[GPR32RegClassID],
    VTLists + 0,
    GPR32SubClassMask,
    SuperRegIdxSeqs + 0,
    GPR32Superclasses,
    nullptr
  };

  extern const TargetRegisterClass HWRegsRegClass = {
    &MipsMCRegisterClasses[HWRegsRegClassID],
    VTLists + 0,
    HWRegsSubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass OddSP_with_sub_hiRegClass = {
    &MipsMCRegisterClasses[OddSP_with_sub_hiRegClassID],
    VTLists + 4,
    OddSP_with_sub_hiSubClassMask,
    SuperRegIdxSeqs + 2,
    OddSP_with_sub_hiSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass FGR32_and_OddSPRegClass = {
    &MipsMCRegisterClasses[FGR32_and_OddSPRegClassID],
    VTLists + 0,
    FGR32_and_OddSPSubClassMask,
    SuperRegIdxSeqs + 10,
    FGR32_and_OddSPSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass FGRH32_and_OddSPRegClass = {
    &MipsMCRegisterClasses[FGRH32_and_OddSPRegClassID],
    VTLists + 4,
    FGRH32_and_OddSPSubClassMask,
    SuperRegIdxSeqs + 4,
    FGRH32_and_OddSPSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass OddSP_with_sub_hi_with_sub_hi_in_FGRH32RegClass = {
    &MipsMCRegisterClasses[OddSP_with_sub_hi_with_sub_hi_in_FGRH32RegClassID],
    VTLists + 4,
    OddSP_with_sub_hi_with_sub_hi_in_FGRH32SubClassMask,
    SuperRegIdxSeqs + 2,
    OddSP_with_sub_hi_with_sub_hi_in_FGRH32Superclasses,
    nullptr
  };

  extern const TargetRegisterClass CPU16RegsPlusSPRegClass = {
    &MipsMCRegisterClasses[CPU16RegsPlusSPRegClassID],
    VTLists + 0,
    CPU16RegsPlusSPSubClassMask,
    SuperRegIdxSeqs + 0,
    CPU16RegsPlusSPSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass CPU16RegsRegClass = {
    &MipsMCRegisterClasses[CPU16RegsRegClassID],
    VTLists + 0,
    CPU16RegsSubClassMask,
    SuperRegIdxSeqs + 0,
    CPU16RegsSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass FCCRegClass = {
    &MipsMCRegisterClasses[FCCRegClassID],
    VTLists + 0,
    FCCSubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass GPRMM16RegClass = {
    &MipsMCRegisterClasses[GPRMM16RegClassID],
    VTLists + 0,
    GPRMM16SubClassMask,
    SuperRegIdxSeqs + 0,
    GPRMM16Superclasses,
    nullptr
  };

  extern const TargetRegisterClass MSACtrlRegClass = {
    &MipsMCRegisterClasses[MSACtrlRegClassID],
    VTLists + 0,
    MSACtrlSubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass OddSP_with_sub_hi_with_sub_hi_in_FGR32RegClass = {
    &MipsMCRegisterClasses[OddSP_with_sub_hi_with_sub_hi_in_FGR32RegClassID],
    VTLists + 4,
    OddSP_with_sub_hi_with_sub_hi_in_FGR32SubClassMask,
    SuperRegIdxSeqs + 1,
    OddSP_with_sub_hi_with_sub_hi_in_FGR32Superclasses,
    nullptr
  };

  extern const TargetRegisterClass HI32DSPRegClass = {
    &MipsMCRegisterClasses[HI32DSPRegClassID],
    VTLists + 0,
    HI32DSPSubClassMask,
    SuperRegIdxSeqs + 13,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass LO32DSPRegClass = {
    &MipsMCRegisterClasses[LO32DSPRegClassID],
    VTLists + 0,
    LO32DSPSubClassMask,
    SuperRegIdxSeqs + 6,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass CPURARegRegClass = {
    &MipsMCRegisterClasses[CPURARegRegClassID],
    VTLists + 0,
    CPURARegSubClassMask,
    SuperRegIdxSeqs + 0,
    CPURARegSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass CPUSPRegRegClass = {
    &MipsMCRegisterClasses[CPUSPRegRegClassID],
    VTLists + 0,
    CPUSPRegSubClassMask,
    SuperRegIdxSeqs + 0,
    CPUSPRegSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass DSPCCRegClass = {
    &MipsMCRegisterClasses[DSPCCRegClassID],
    VTLists + 10,
    DSPCCSubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass HI32RegClass = {
    &MipsMCRegisterClasses[HI32RegClassID],
    VTLists + 0,
    HI32SubClassMask,
    SuperRegIdxSeqs + 13,
    HI32Superclasses,
    nullptr
  };

  extern const TargetRegisterClass LO32RegClass = {
    &MipsMCRegisterClasses[LO32RegClassID],
    VTLists + 0,
    LO32SubClassMask,
    SuperRegIdxSeqs + 6,
    LO32Superclasses,
    nullptr
  };

  extern const TargetRegisterClass FGR64RegClass = {
    &MipsMCRegisterClasses[FGR64RegClassID],
    VTLists + 6,
    FGR64SubClassMask,
    SuperRegIdxSeqs + 2,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass GPR64RegClass = {
    &MipsMCRegisterClasses[GPR64RegClassID],
    VTLists + 2,
    GPR64SubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass AFGR64RegClass = {
    &MipsMCRegisterClasses[AFGR64RegClassID],
    VTLists + 6,
    AFGR64SubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass FGR64_and_OddSPRegClass = {
    &MipsMCRegisterClasses[FGR64_and_OddSPRegClassID],
    VTLists + 6,
    FGR64_and_OddSPSubClassMask,
    SuperRegIdxSeqs + 2,
    FGR64_and_OddSPSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass GPR64_with_sub_32_in_CPU16RegsPlusSPRegClass = {
    &MipsMCRegisterClasses[GPR64_with_sub_32_in_CPU16RegsPlusSPRegClassID],
    VTLists + 2,
    GPR64_with_sub_32_in_CPU16RegsPlusSPSubClassMask,
    SuperRegIdxSeqs + 1,
    GPR64_with_sub_32_in_CPU16RegsPlusSPSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass AFGR64_and_OddSPRegClass = {
    &MipsMCRegisterClasses[AFGR64_and_OddSPRegClassID],
    VTLists + 6,
    AFGR64_and_OddSPSubClassMask,
    SuperRegIdxSeqs + 1,
    AFGR64_and_OddSPSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass GPR64_with_sub_32_in_CPU16RegsRegClass = {
    &MipsMCRegisterClasses[GPR64_with_sub_32_in_CPU16RegsRegClassID],
    VTLists + 2,
    GPR64_with_sub_32_in_CPU16RegsSubClassMask,
    SuperRegIdxSeqs + 1,
    GPR64_with_sub_32_in_CPU16RegsSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass ACC64DSPRegClass = {
    &MipsMCRegisterClasses[ACC64DSPRegClassID],
    VTLists + 22,
    ACC64DSPSubClassMask,
    SuperRegIdxSeqs + 17,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass OCTEON_MPLRegClass = {
    &MipsMCRegisterClasses[OCTEON_MPLRegClassID],
    VTLists + 2,
    OCTEON_MPLSubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass OCTEON_PRegClass = {
    &MipsMCRegisterClasses[OCTEON_PRegClassID],
    VTLists + 2,
    OCTEON_PSubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass ACC64RegClass = {
    &MipsMCRegisterClasses[ACC64RegClassID],
    VTLists + 22,
    ACC64SubClassMask,
    SuperRegIdxSeqs + 17,
    ACC64Superclasses,
    nullptr
  };

  extern const TargetRegisterClass GPR64_with_sub_32_in_CPURARegRegClass = {
    &MipsMCRegisterClasses[GPR64_with_sub_32_in_CPURARegRegClassID],
    VTLists + 2,
    GPR64_with_sub_32_in_CPURARegSubClassMask,
    SuperRegIdxSeqs + 1,
    GPR64_with_sub_32_in_CPURARegSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass GPR64_with_sub_32_in_CPUSPRegRegClass = {
    &MipsMCRegisterClasses[GPR64_with_sub_32_in_CPUSPRegRegClassID],
    VTLists + 2,
    GPR64_with_sub_32_in_CPUSPRegSubClassMask,
    SuperRegIdxSeqs + 1,
    GPR64_with_sub_32_in_CPUSPRegSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass HI64RegClass = {
    &MipsMCRegisterClasses[HI64RegClassID],
    VTLists + 2,
    HI64SubClassMask,
    SuperRegIdxSeqs + 4,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass LO64RegClass = {
    &MipsMCRegisterClasses[LO64RegClassID],
    VTLists + 2,
    LO64SubClassMask,
    SuperRegIdxSeqs + 7,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass MSA128BRegClass = {
    &MipsMCRegisterClasses[MSA128BRegClassID],
    VTLists + 8,
    MSA128BSubClassMask,
    SuperRegIdxSeqs + 1,
    MSA128BSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass MSA128DRegClass = {
    &MipsMCRegisterClasses[MSA128DRegClassID],
    VTLists + 19,
    MSA128DSubClassMask,
    SuperRegIdxSeqs + 1,
    MSA128DSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass MSA128HRegClass = {
    &MipsMCRegisterClasses[MSA128HRegClassID],
    VTLists + 13,
    MSA128HSubClassMask,
    SuperRegIdxSeqs + 1,
    MSA128HSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass MSA128WRegClass = {
    &MipsMCRegisterClasses[MSA128WRegClassID],
    VTLists + 16,
    MSA128WSubClassMask,
    SuperRegIdxSeqs + 1,
    MSA128WSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass MSA128B_with_sub_64_in_OddSPRegClass = {
    &MipsMCRegisterClasses[MSA128B_with_sub_64_in_OddSPRegClassID],
    VTLists + 16,
    MSA128B_with_sub_64_in_OddSPSubClassMask,
    SuperRegIdxSeqs + 1,
    MSA128B_with_sub_64_in_OddSPSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass ACC128RegClass = {
    &MipsMCRegisterClasses[ACC128RegClassID],
    VTLists + 22,
    ACC128SubClassMask,
    SuperRegIdxSeqs + 1,
    NullRegClasses,
    nullptr
  };

}

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &Mips::OddSPRegClass,
    &Mips::CCRRegClass,
    &Mips::COP2RegClass,
    &Mips::COP3RegClass,
    &Mips::DSPRRegClass,
    &Mips::FGR32RegClass,
    &Mips::FGRCCRegClass,
    &Mips::FGRH32RegClass,
    &Mips::GPR32RegClass,
    &Mips::HWRegsRegClass,
    &Mips::OddSP_with_sub_hiRegClass,
    &Mips::FGR32_and_OddSPRegClass,
    &Mips::FGRH32_and_OddSPRegClass,
    &Mips::OddSP_with_sub_hi_with_sub_hi_in_FGRH32RegClass,
    &Mips::CPU16RegsPlusSPRegClass,
    &Mips::CPU16RegsRegClass,
    &Mips::FCCRegClass,
    &Mips::GPRMM16RegClass,
    &Mips::MSACtrlRegClass,
    &Mips::OddSP_with_sub_hi_with_sub_hi_in_FGR32RegClass,
    &Mips::HI32DSPRegClass,
    &Mips::LO32DSPRegClass,
    &Mips::CPURARegRegClass,
    &Mips::CPUSPRegRegClass,
    &Mips::DSPCCRegClass,
    &Mips::HI32RegClass,
    &Mips::LO32RegClass,
    &Mips::FGR64RegClass,
    &Mips::GPR64RegClass,
    &Mips::AFGR64RegClass,
    &Mips::FGR64_and_OddSPRegClass,
    &Mips::GPR64_with_sub_32_in_CPU16RegsPlusSPRegClass,
    &Mips::AFGR64_and_OddSPRegClass,
    &Mips::GPR64_with_sub_32_in_CPU16RegsRegClass,
    &Mips::ACC64DSPRegClass,
    &Mips::OCTEON_MPLRegClass,
    &Mips::OCTEON_PRegClass,
    &Mips::ACC64RegClass,
    &Mips::GPR64_with_sub_32_in_CPURARegRegClass,
    &Mips::GPR64_with_sub_32_in_CPUSPRegRegClass,
    &Mips::HI64RegClass,
    &Mips::LO64RegClass,
    &Mips::MSA128BRegClass,
    &Mips::MSA128DRegClass,
    &Mips::MSA128HRegClass,
    &Mips::MSA128WRegClass,
    &Mips::MSA128B_with_sub_64_in_OddSPRegClass,
    &Mips::ACC128RegClass,
  };
}

static const TargetRegisterInfoDesc MipsRegInfoDesc[] = { // Extra Descriptors
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
};
unsigned MipsGenRegisterInfo::composeSubRegIndicesImpl(unsigned IdxA, unsigned IdxB) const {
  static const uint8_t RowMap[11] = {
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 
  };
  static const uint8_t Rows[2][11] = {
    { 10, 0, 0, 0, 0, 0, 0, 8, 9, 0, 0, },
    { 1, 0, 0, 0, 0, 0, 0, 10, 1, 0, 0, },
  };

  --IdxA; assert(IdxA < 11);
  --IdxB; assert(IdxB < 11);
  return Rows[RowMap[IdxA]][IdxB];
}

const TargetRegisterClass *MipsGenRegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {
  static const uint8_t Table[48][11] = {
    {	// OddSP
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      11,	// sub_hi -> OddSP_with_sub_hi
      11,	// sub_lo -> OddSP_with_sub_hi
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// CCR
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// COP2
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// COP3
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// DSPR
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// FGR32
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// FGRCC
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// FGRH32
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// GPR32
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// HWRegs
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// OddSP_with_sub_hi
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      11,	// sub_hi -> OddSP_with_sub_hi
      11,	// sub_lo -> OddSP_with_sub_hi
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// FGR32_and_OddSP
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// FGRH32_and_OddSP
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// OddSP_with_sub_hi_with_sub_hi_in_FGRH32
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      14,	// sub_hi -> OddSP_with_sub_hi_with_sub_hi_in_FGRH32
      14,	// sub_lo -> OddSP_with_sub_hi_with_sub_hi_in_FGRH32
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// CPU16RegsPlusSP
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// CPU16Regs
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// FCC
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// GPRMM16
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// MSACtrl
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// OddSP_with_sub_hi_with_sub_hi_in_FGR32
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      20,	// sub_hi -> OddSP_with_sub_hi_with_sub_hi_in_FGR32
      20,	// sub_lo -> OddSP_with_sub_hi_with_sub_hi_in_FGR32
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// HI32DSP
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// LO32DSP
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// CPURAReg
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// CPUSPReg
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// DSPCC
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// HI32
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// LO32
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// FGR64
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      28,	// sub_hi -> FGR64
      28,	// sub_lo -> FGR64
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// GPR64
      29,	// sub_32 -> GPR64
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// AFGR64
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      30,	// sub_hi -> AFGR64
      30,	// sub_lo -> AFGR64
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// FGR64_and_OddSP
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      31,	// sub_hi -> FGR64_and_OddSP
      31,	// sub_lo -> FGR64_and_OddSP
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// GPR64_with_sub_32_in_CPU16RegsPlusSP
      32,	// sub_32 -> GPR64_with_sub_32_in_CPU16RegsPlusSP
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// AFGR64_and_OddSP
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      33,	// sub_hi -> AFGR64_and_OddSP
      33,	// sub_lo -> AFGR64_and_OddSP
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// GPR64_with_sub_32_in_CPU16Regs
      34,	// sub_32 -> GPR64_with_sub_32_in_CPU16Regs
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// ACC64DSP
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      35,	// sub_hi -> ACC64DSP
      35,	// sub_lo -> ACC64DSP
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// OCTEON_MPL
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// OCTEON_P
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// ACC64
      0,	// sub_32
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      38,	// sub_hi -> ACC64
      38,	// sub_lo -> ACC64
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// GPR64_with_sub_32_in_CPURAReg
      39,	// sub_32 -> GPR64_with_sub_32_in_CPURAReg
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// GPR64_with_sub_32_in_CPUSPReg
      40,	// sub_32 -> GPR64_with_sub_32_in_CPUSPReg
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// HI64
      41,	// sub_32 -> HI64
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// LO64
      42,	// sub_32 -> LO64
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      0,	// sub_hi
      0,	// sub_lo
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// MSA128B
      0,	// sub_32
      43,	// sub_64 -> MSA128B
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      43,	// sub_hi -> MSA128B
      43,	// sub_lo -> MSA128B
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// MSA128D
      0,	// sub_32
      44,	// sub_64 -> MSA128D
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      44,	// sub_hi -> MSA128D
      44,	// sub_lo -> MSA128D
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// MSA128H
      0,	// sub_32
      45,	// sub_64 -> MSA128H
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      45,	// sub_hi -> MSA128H
      45,	// sub_lo -> MSA128H
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// MSA128W
      0,	// sub_32
      46,	// sub_64 -> MSA128W
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      46,	// sub_hi -> MSA128W
      46,	// sub_lo -> MSA128W
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// MSA128B_with_sub_64_in_OddSP
      0,	// sub_32
      47,	// sub_64 -> MSA128B_with_sub_64_in_OddSP
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      47,	// sub_hi -> MSA128B_with_sub_64_in_OddSP
      47,	// sub_lo -> MSA128B_with_sub_64_in_OddSP
      0,	// sub_hi_then_sub_32
      0,	// sub_32_sub_hi_then_sub_32
    },
    {	// ACC128
      48,	// sub_32 -> ACC128
      0,	// sub_64
      0,	// sub_dsp16_19
      0,	// sub_dsp20
      0,	// sub_dsp21
      0,	// sub_dsp22
      0,	// sub_dsp23
      48,	// sub_hi -> ACC128
      48,	// sub_lo -> ACC128
      48,	// sub_hi_then_sub_32 -> ACC128
      48,	// sub_32_sub_hi_then_sub_32 -> ACC128
    },
  };
  assert(RC && "Missing regclass");
  if (!Idx) return RC;
  --Idx;
  assert(Idx < 11 && "Bad subreg");
  unsigned TV = Table[RC->getID()][Idx];
  return TV ? getRegClass(TV - 1) : nullptr;
}

/// Get the weight in units of pressure for this register class.
const RegClassWeight &MipsGenRegisterInfo::
getRegClassWeight(const TargetRegisterClass *RC) const {
  static const RegClassWeight RCWeightTable[] = {
    {2, 40},  	// OddSP
    {0, 0},  	// CCR
    {0, 0},  	// COP2
    {0, 0},  	// COP3
    {1, 32},  	// DSPR
    {1, 32},  	// FGR32
    {1, 32},  	// FGRCC
    {1, 32},  	// FGRH32
    {1, 32},  	// GPR32
    {0, 0},  	// HWRegs
    {2, 40},  	// OddSP_with_sub_hi
    {1, 16},  	// FGR32_and_OddSP
    {1, 16},  	// FGRH32_and_OddSP
    {2, 32},  	// OddSP_with_sub_hi_with_sub_hi_in_FGRH32
    {1, 9},  	// CPU16RegsPlusSP
    {1, 8},  	// CPU16Regs
    {0, 0},  	// FCC
    {1, 8},  	// GPRMM16
    {1, 8},  	// MSACtrl
    {2, 16},  	// OddSP_with_sub_hi_with_sub_hi_in_FGR32
    {1, 4},  	// HI32DSP
    {1, 4},  	// LO32DSP
    {1, 1},  	// CPURAReg
    {1, 1},  	// CPUSPReg
    {1, 1},  	// DSPCC
    {1, 1},  	// HI32
    {1, 1},  	// LO32
    {2, 64},  	// FGR64
    {1, 32},  	// GPR64
    {2, 32},  	// AFGR64
    {2, 32},  	// FGR64_and_OddSP
    {1, 9},  	// GPR64_with_sub_32_in_CPU16RegsPlusSP
    {2, 16},  	// AFGR64_and_OddSP
    {1, 8},  	// GPR64_with_sub_32_in_CPU16Regs
    {2, 8},  	// ACC64DSP
    {0, 0},  	// OCTEON_MPL
    {0, 0},  	// OCTEON_P
    {2, 2},  	// ACC64
    {1, 1},  	// GPR64_with_sub_32_in_CPURAReg
    {1, 1},  	// GPR64_with_sub_32_in_CPUSPReg
    {1, 1},  	// HI64
    {1, 1},  	// LO64
    {2, 64},  	// MSA128B
    {2, 64},  	// MSA128D
    {2, 64},  	// MSA128H
    {2, 64},  	// MSA128W
    {2, 32},  	// MSA128B_with_sub_64_in_OddSP
    {2, 2},  	// ACC128
    {0, 0} };
  return RCWeightTable[RC->getID()];
}

/// Get the weight in units of pressure for this register unit.
unsigned MipsGenRegisterInfo::
getRegUnitWeight(unsigned RegUnit) const {
  assert(RegUnit < 265 && "invalid register unit");
  // All register units have unit weight.
  return 1;
}


// Get the number of dimensions of register pressure.
unsigned MipsGenRegisterInfo::getNumRegPressureSets() const {
  return 18;
}

// Get the name of this register unit pressure set.
const char *MipsGenRegisterInfo::
getRegPressureSetName(unsigned Idx) const {
  static const char *PressureNameTable[] = {
    "DSPCC",
    "GPR64_with_sub_32_in_CPURAReg",
    "GPR64_with_sub_32_in_CPUSPReg",
    "ACC64",
    "HI32DSP+ACC64",
    "LO32DSP+ACC64",
    "MSACtrl",
    "ACC64DSP",
    "CPU16RegsPlusSP",
    "FGR32_and_OddSP",
    "AFGR64_and_OddSP",
    "FGR32_and_OddSP+AFGR64_and_OddSP",
    "DSPR",
    "FGR32",
    "FGR64_and_OddSP",
    "FGR64_and_OddSP+AFGR64_and_OddSP",
    "FGR32+FGR64_and_OddSP",
    "FGR64",
    nullptr };
  return PressureNameTable[Idx];
}

// Get the register unit pressure limit for this dimension.
// This limit must be adjusted dynamically for reserved registers.
unsigned MipsGenRegisterInfo::
getRegPressureSetLimit(unsigned Idx) const {
  static const unsigned PressureLimitTable[] = {
    1,  	// 0: DSPCC
    1,  	// 1: GPR64_with_sub_32_in_CPURAReg
    1,  	// 2: GPR64_with_sub_32_in_CPUSPReg
    2,  	// 3: ACC64
    5,  	// 4: HI32DSP+ACC64
    5,  	// 5: LO32DSP+ACC64
    8,  	// 6: MSACtrl
    8,  	// 7: ACC64DSP
    9,  	// 8: CPU16RegsPlusSP
    16,  	// 9: FGR32_and_OddSP
    16,  	// 10: AFGR64_and_OddSP
    24,  	// 11: FGR32_and_OddSP+AFGR64_and_OddSP
    32,  	// 12: DSPR
    32,  	// 13: FGR32
    32,  	// 14: FGR64_and_OddSP
    40,  	// 15: FGR64_and_OddSP+AFGR64_and_OddSP
    48,  	// 16: FGR32+FGR64_and_OddSP
    64,  	// 17: FGR64
    0 };
  return PressureLimitTable[Idx];
}

/// Table of pressure sets per register class or unit.
static const int RCSetsTable[] = {
    -1,  	// #0 OddSP
    -1,  	// #1 CCR
    -1,  	// #2 COP2
    -1,  	// #3 COP3
    12,  -1,  	// #4 DSPR
    13,  16,  17,  -1,  	// #6 FGR32
    13,  16,  17,  -1,  	// #10 FGRCC
    -1,  	// #14 FGRH32
    12,  -1,  	// #15 GPR32
    -1,  	// #17 HWRegs
    -1,  	// #18 OddSP_with_sub_hi
    9,  11,  13,  14,  15,  16,  17,  -1,  	// #19 FGR32_and_OddSP
    -1,  	// #27 FGRH32_and_OddSP
    -1,  	// #28 OddSP_with_sub_hi_with_sub_hi_in_FGRH32
    8,  12,  -1,  	// #29 CPU16RegsPlusSP
    8,  12,  -1,  	// #32 CPU16Regs
    -1,  	// #35 FCC
    8,  12,  -1,  	// #36 GPRMM16
    6,  -1,  	// #39 MSACtrl
    -1,  	// #41 OddSP_with_sub_hi_with_sub_hi_in_FGR32
    4,  7,  -1,  	// #42 HI32DSP
    5,  7,  -1,  	// #45 LO32DSP
    -1,  	// #48 CPURAReg
    -1,  	// #49 CPUSPReg
    0,  -1,  	// #50 DSPCC
    3,  4,  5,  7,  -1,  	// #52 HI32
    3,  4,  5,  7,  -1,  	// #57 LO32
    17,  -1,  	// #62 FGR64
    12,  -1,  	// #64 GPR64
    13,  16,  17,  -1,  	// #66 AFGR64
    14,  15,  16,  17,  -1,  	// #70 FGR64_and_OddSP
    8,  12,  -1,  	// #75 GPR64_with_sub_32_in_CPU16RegsPlusSP
    10,  11,  13,  15,  16,  17,  -1,  	// #78 AFGR64_and_OddSP
    8,  12,  -1,  	// #85 GPR64_with_sub_32_in_CPU16Regs
    7,  -1,  	// #88 ACC64DSP
    -1,  	// #90 OCTEON_MPL
    -1,  	// #91 OCTEON_P
    3,  4,  5,  7,  -1,  	// #92 ACC64
    1,  12,  -1,  	// #97 GPR64_with_sub_32_in_CPURAReg
    2,  8,  12,  -1,  	// #100 GPR64_with_sub_32_in_CPUSPReg
    3,  4,  5,  7,  -1,  	// #104 HI64
    3,  4,  5,  7,  -1,  	// #109 LO64
    17,  -1,  	// #114 MSA128B
    17,  -1,  	// #116 MSA128D
    17,  -1,  	// #118 MSA128H
    17,  -1,  	// #120 MSA128W
    14,  15,  16,  17,  -1,  	// #122 MSA128B_with_sub_64_in_OddSP
    3,  4,  5,  7,  -1,  	// #127 ACC128
    9,  10,  11,  13,  14,  15,  16,  17,  -1,  	// #132 inferred~GPR64_with_sub_32_in_CPURAReg~GPR64_with_sub_32_in_CPUSPReg~MSACtrl~ACC64DSP~CPU16RegsPlusSP~FGR32~FGR64_and_OddSP~FGR64
    -1 };

/// Get the dimensions of register pressure impacted by this register class.
/// Returns a -1 terminated array of pressure set IDs
const int* MipsGenRegisterInfo::
getRegClassPressureSets(const TargetRegisterClass *RC) const {
  static const unsigned RCSetStartTable[] = {
    0,1,2,3,4,6,10,14,15,17,18,19,27,28,29,32,35,36,39,41,42,45,48,49,50,52,57,62,64,66,70,75,78,85,88,90,91,92,97,100,104,109,114,116,118,120,122,127,0 };
  unsigned SetListStart = RCSetStartTable[RC->getID()];
  return &RCSetsTable[SetListStart];
}

/// Get the dimensions of register pressure impacted by this register unit.
/// Returns a -1 terminated array of pressure set IDs
const int* MipsGenRegisterInfo::
getRegUnitPressureSets(unsigned RegUnit) const {
  assert(RegUnit < 265 && "invalid register unit");
  static const unsigned RUSetStartTable[] = {
    4,50,0,0,0,0,0,0,0,0,0,4,4,39,39,39,39,39,39,39,39,0,97,100,4,29,29,29,29,52,52,45,42,45,42,45,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,19,78,132,6,19,78,132,6,19,78,132,6,19,78,132,6,19,78,132,6,19,78,132,6,19,78,132,6,19,78,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,70,62,70,62,70,62,70,62,70,62,70,62,70,62,70,62,70,62,70,62,70,62,70,62,70,62,70,62,70,62,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,29,29,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,29,29,0 };
  unsigned SetListStart = RUSetStartTable[RegUnit];
  return &RCSetsTable[SetListStart];
}

extern const MCRegisterDesc MipsRegDesc[];
extern const MCPhysReg MipsRegDiffLists[];
extern const char MipsRegStrings[];
extern const MCPhysReg MipsRegUnitRoots[][2];
extern const uint16_t MipsSubRegIdxLists[];
extern const MCRegisterInfo::SubRegCoveredBits MipsSubRegIdxRanges[];
extern const uint16_t MipsRegEncodingTable[];
// Mips Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair MipsDwarfFlavour0Dwarf2L[];
extern const unsigned MipsDwarfFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair MipsEHFlavour0Dwarf2L[];
extern const unsigned MipsEHFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair MipsDwarfFlavour0L2Dwarf[];
extern const unsigned MipsDwarfFlavour0L2DwarfSize;

extern const MCRegisterInfo::DwarfLLVMRegPair MipsEHFlavour0L2Dwarf[];
extern const unsigned MipsEHFlavour0L2DwarfSize;

MipsGenRegisterInfo::
MipsGenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour, unsigned PC)
  : TargetRegisterInfo(MipsRegInfoDesc, RegisterClasses, RegisterClasses+48,
             SubRegIndexNameTable, SubRegIndexLaneMaskTable, 0xffffff80) {
  InitMCRegisterInfo(MipsRegDesc, 386, RA, PC,
                     MipsMCRegisterClasses, 48,
                     MipsRegUnitRoots,
                     265,
                     MipsRegDiffLists,
                     MipsRegStrings,
                     MipsSubRegIdxLists,
                     12,
                     MipsSubRegIdxRanges,
                     MipsRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(MipsDwarfFlavour0Dwarf2L, MipsDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(MipsEHFlavour0Dwarf2L, MipsEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(MipsDwarfFlavour0L2Dwarf, MipsDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(MipsEHFlavour0L2Dwarf, MipsEHFlavour0L2DwarfSize, true);
    break;
  }
}

static const MCPhysReg CSR_Mips16RetHelper_SaveList[] = { Mips::V0, Mips::V1, Mips::FP, Mips::A3, Mips::A2, Mips::A1, Mips::A0, Mips::S7, Mips::S6, Mips::S5, Mips::S4, Mips::S3, Mips::S2, Mips::S1, Mips::S0, Mips::D15, Mips::D14, Mips::D13, Mips::D12, Mips::D11, Mips::D10, 0 };
static const uint32_t CSR_Mips16RetHelper_RegMask[] = { 0x03c00100, 0x00000000, 0x00000000, 0x00007e00, 0x0007ff80, 0x00000000, 0x00000000, 0x00000000, 0x003fc000, 0x00000006, 0x00000000, 0x00000000, 0x00000000, };
static const MCPhysReg CSR_N32_SaveList[] = { Mips::D20_64, Mips::D22_64, Mips::D24_64, Mips::D26_64, Mips::D28_64, Mips::D30_64, Mips::RA_64, Mips::FP_64, Mips::GP_64, Mips::S7_64, Mips::S6_64, Mips::S5_64, Mips::S4_64, Mips::S3_64, Mips::S2_64, Mips::S1_64, Mips::S0_64, 0 };
static const uint32_t CSR_N32_RegMask[] = { 0x00080300, 0x00000000, 0x00000000, 0x00000000, 0x0002aa80, 0x08000000, 0x15550000, 0x00000000, 0x003fe000, 0x00000000, 0xa0000000, 0x003fc0aa, 0x00000000, };
static const MCPhysReg CSR_N64_SaveList[] = { Mips::D31_64, Mips::D30_64, Mips::D29_64, Mips::D28_64, Mips::D27_64, Mips::D26_64, Mips::D25_64, Mips::D24_64, Mips::RA_64, Mips::FP_64, Mips::GP_64, Mips::S7_64, Mips::S6_64, Mips::S5_64, Mips::S4_64, Mips::S3_64, Mips::S2_64, Mips::S1_64, Mips::S0_64, 0 };
static const uint32_t CSR_N64_RegMask[] = { 0x00080300, 0x00000000, 0x00000000, 0x00007800, 0x0007f800, 0x08000000, 0x1ff00000, 0x00000000, 0x003fe000, 0x00000000, 0x00000000, 0x003fc1fe, 0x00000000, };
static const MCPhysReg CSR_O32_SaveList[] = { Mips::D15, Mips::D14, Mips::D13, Mips::D12, Mips::D11, Mips::D10, Mips::RA, Mips::FP, Mips::S7, Mips::S6, Mips::S5, Mips::S4, Mips::S3, Mips::S2, Mips::S1, Mips::S0, 0 };
static const uint32_t CSR_O32_RegMask[] = { 0x00080100, 0x00000000, 0x00000000, 0x00007e00, 0x0007ff80, 0x00000000, 0x00000000, 0x00000000, 0x003fc000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, };
static const MCPhysReg CSR_O32_FP64_SaveList[] = { Mips::D30_64, Mips::D28_64, Mips::D26_64, Mips::D24_64, Mips::D22_64, Mips::D20_64, Mips::RA, Mips::FP, Mips::S7, Mips::S6, Mips::S5, Mips::S4, Mips::S3, Mips::S2, Mips::S1, Mips::S0, 0 };
static const uint32_t CSR_O32_FP64_RegMask[] = { 0x00080100, 0x00000000, 0x00000000, 0x00000000, 0x0002aa80, 0x00000000, 0x05550000, 0x00000000, 0x003fc000, 0x00000000, 0xa0000000, 0x000000aa, 0x00000000, };
static const MCPhysReg CSR_O32_FPXX_SaveList[] = { Mips::D15, Mips::D14, Mips::D13, Mips::D12, Mips::D11, Mips::D10, Mips::RA, Mips::FP, Mips::S7, Mips::S6, Mips::S5, Mips::S4, Mips::S3, Mips::S2, Mips::S1, Mips::S0, 0 };
static const uint32_t CSR_O32_FPXX_RegMask[] = { 0x00080100, 0x00000000, 0x00000000, 0x00007e00, 0x0007ff80, 0x00000000, 0x00000000, 0x00000000, 0x003fc000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, };
static const MCPhysReg CSR_SingleFloatOnly_SaveList[] = { Mips::F31, Mips::F30, Mips::F29, Mips::F28, Mips::F27, Mips::F26, Mips::F25, Mips::F24, Mips::F23, Mips::F22, Mips::F21, Mips::F20, Mips::RA, Mips::FP, Mips::S7, Mips::S6, Mips::S5, Mips::S4, Mips::S3, Mips::S2, Mips::S1, Mips::S0, 0 };
static const uint32_t CSR_SingleFloatOnly_RegMask[] = { 0x00080100, 0x00000000, 0x00000000, 0x00007e00, 0x0007ff80, 0x00000000, 0x00000000, 0x00000000, 0x003fc000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, };


} // End llvm namespace 
#endif // GET_REGINFO_TARGET_DESC

