/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void MipsInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    9138U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    9131U,	// BUNDLE
    9148U,	// LIFETIME_START
    9118U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    21502U,	// ABSQ_S_PH
    17885U,	// ABSQ_S_QB
    24592U,	// ABSQ_S_W
    33574556U,	// ADD
    18154U,	// ADDIUPC
    22303U,	// ADDIUR1SP_MM
    33571068U,	// ADDIUR2_MM
    2261277U,	// ADDIUS5_MM
    284507U,	// ADDIUSP_MM
    33575739U,	// ADDQH_PH
    33575856U,	// ADDQH_R_PH
    33578699U,	// ADDQH_R_W
    33578302U,	// ADDQH_W
    33575813U,	// ADDQ_PH
    33575912U,	// ADDQ_S_PH
    33579004U,	// ADDQ_S_W
    33572619U,	// ADDSC
    33571294U,	// ADDS_A_B
    33572744U,	// ADDS_A_D
    33574684U,	// ADDS_A_H
    33578010U,	// ADDS_A_W
    33571762U,	// ADDS_S_B
    33573833U,	// ADDS_S_D
    33575241U,	// ADDS_S_H
    33579054U,	// ADDS_S_W
    33571977U,	// ADDS_U_B
    33574300U,	// ADDS_U_D
    33575519U,	// ADDS_U_H
    33579472U,	// ADDS_U_W
    33571174U,	// ADDU16_MM
    33572185U,	// ADDUH_QB
    33572293U,	// ADDUH_R_QB
    33576011U,	// ADDU_PH
    33572398U,	// ADDU_QB
    33575956U,	// ADDU_S_PH
    33572339U,	// ADDU_S_QB
    570442455U,	// ADDVI_B
    570444176U,	// ADDVI_D
    570445812U,	// ADDVI_H
    570449347U,	// ADDVI_W
    33572055U,	// ADDV_B
    33574400U,	// ADDV_D
    33575597U,	// ADDV_H
    33579572U,	// ADDV_W
    33572658U,	// ADDWC
    33571276U,	// ADD_A_B
    33572725U,	// ADD_A_D
    33574666U,	// ADD_A_H
    33577991U,	// ADD_A_W
    33574556U,	// ADD_MM
    33576224U,	// ADDi
    33576224U,	// ADDi_MM
    33577753U,	// ADDiu
    33577753U,	// ADDiu_MM
    33577707U,	// ADDu
    33577707U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    33576645U,	// ALIGN
    18146U,	// ALUIPC
    33574578U,	// AND
    442662U,	// AND16_MM
    33574578U,	// AND64
    570442314U,	// ANDI_B
    33574578U,	// AND_MM
    33577835U,	// AND_V
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    1107318054U,	// ANDi
    1107318054U,	// ANDi64
    1107318054U,	// ANDi_MM
    1107316416U,	// APPEND
    33571656U,	// ASUB_S_B
    33573663U,	// ASUB_S_D
    33575073U,	// ASUB_S_H
    33578834U,	// ASUB_S_W
    33571871U,	// ASUB_U_B
    33574130U,	// ASUB_U_D
    33575361U,	// ASUB_U_H
    33579302U,	// ASUB_U_W
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    33576334U,	// AUI
    18139U,	// AUIPC
    33571742U,	// AVER_S_B
    33573813U,	// AVER_S_D
    33575211U,	// AVER_S_H
    33579034U,	// AVER_S_W
    33571957U,	// AVER_U_B
    33574280U,	// AVER_U_D
    33575499U,	// AVER_U_H
    33579452U,	// AVER_U_W
    33571684U,	// AVE_S_B
    33573745U,	// AVE_S_D
    33575143U,	// AVE_S_H
    33578916U,	// AVE_S_W
    33571899U,	// AVE_U_B
    33574212U,	// AVE_U_D
    33575431U,	// AVE_U_H
    33579384U,	// AVE_U_W
    23321U,	// AddiuRxImmX16
    547609U,	// AddiuRxPcImmX16
    71326489U,	// AddiuRxRxImm16
    4217625U,	// AddiuRxRxImmX16
    6314777U,	// AddiuRxRyOffMemX16
    680725U,	// AddiuSpImm16
    287509U,	// AddiuSpImmX16
    33577707U,	// AdduRxRyRz16
    4214450U,	// AndRxRxRy16
    0U,	// B
    33577706U,	// BADDu
    284084U,	// BAL
    280210U,	// BALC
    1107318468U,	// BALIGN
    0U,	// BAL_BR
    280189U,	// BC
    25475U,	// BC1EQZ
    20211U,	// BC1F
    22053U,	// BC1FL
    20211U,	// BC1F_MM
    25459U,	// BC1NEZ
    23215U,	// BC1T
    22161U,	// BC1TL
    23215U,	// BC1T_MM
    25483U,	// BC2EQZ
    25467U,	// BC2NEZ
    570442383U,	// BCLRI_B
    570444120U,	// BCLRI_D
    570445756U,	// BCLRI_H
    570449291U,	// BCLRI_W
    33571623U,	// BCLR_B
    33573587U,	// BCLR_D
    33575040U,	// BCLR_H
    33578750U,	// BCLR_W
    33576810U,	// BEQ
    33576810U,	// BEQ64
    33572608U,	// BEQC
    33576581U,	// BEQL
    18106U,	// BEQZALC
    18254U,	// BEQZC
    18254U,	// BEQZC_MM
    33576810U,	// BEQ_MM
    33572481U,	// BGEC
    33572632U,	// BGEUC
    25242U,	// BGEZ
    25242U,	// BGEZ64
    21950U,	// BGEZAL
    18079U,	// BGEZALC
    22125U,	// BGEZALL
    23190U,	// BGEZALS_MM
    21950U,	// BGEZAL_MM
    18233U,	// BGEZC
    22184U,	// BGEZL
    25242U,	// BGEZ_MM
    25302U,	// BGTZ
    25302U,	// BGTZ64
    18115U,	// BGTZALC
    18261U,	// BGTZC
    22198U,	// BGTZL
    25302U,	// BGTZ_MM
    1648378484U,	// BINSLI_B
    1648380221U,	// BINSLI_D
    1648381857U,	// BINSLI_H
    1648385392U,	// BINSLI_W
    2185249543U,	// BINSL_B
    2185251333U,	// BINSL_D
    2185252883U,	// BINSL_H
    2185256462U,	// BINSL_W
    1648378545U,	// BINSRI_B
    1648380266U,	// BINSRI_D
    1648381902U,	// BINSRI_H
    1648385437U,	// BINSRI_W
    2185249591U,	// BINSR_B
    2185251589U,	// BINSR_D
    2185253008U,	// BINSR_H
    2185256752U,	// BINSR_W
    23475U,	// BITREV
    22260U,	// BITSWAP
    25248U,	// BLEZ
    25248U,	// BLEZ64
    18088U,	// BLEZALC
    18240U,	// BLEZC
    22191U,	// BLEZL
    25248U,	// BLEZ_MM
    33572626U,	// BLTC
    33572639U,	// BLTUC
    25308U,	// BLTZ
    25308U,	// BLTZ64
    21958U,	// BLTZAL
    18124U,	// BLTZALC
    22134U,	// BLTZALL
    23199U,	// BLTZALS_MM
    21958U,	// BLTZAL_MM
    18268U,	// BLTZC
    22205U,	// BLTZL
    25308U,	// BLTZ_MM
    1648378600U,	// BMNZI_B
    2185255844U,	// BMNZ_V
    1648378592U,	// BMZI_B
    2185255830U,	// BMZ_V
    33574622U,	// BNE
    33574622U,	// BNE64
    33572487U,	// BNEC
    570442322U,	// BNEGI_B
    570444068U,	// BNEGI_D
    570445704U,	// BNEGI_H
    570449239U,	// BNEGI_W
    33571378U,	// BNEG_B
    33573132U,	// BNEG_D
    33574768U,	// BNEG_H
    33578222U,	// BNEG_W
    33576479U,	// BNEL
    18097U,	// BNEZALC
    18247U,	// BNEZC
    18247U,	// BNEZC_MM
    33574622U,	// BNE_MM
    33572646U,	// BNVC
    17663U,	// BNZ_B
    20093U,	// BNZ_D
    21205U,	// BNZ_H
    23453U,	// BNZ_V
    25205U,	// BNZ_W
    33572652U,	// BOVC
    278695U,	// BPOSGE32
    0U,	// BPOSGE32_PSEUDO
    21915U,	// BREAK
    21915U,	// BREAK_MM
    1648378459U,	// BSELI_B
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    2185255802U,	// BSEL_V
    0U,	// BSEL_W_PSEUDO
    570442437U,	// BSETI_B
    570444158U,	// BSETI_D
    570445794U,	// BSETI_H
    570449329U,	// BSETI_W
    33571839U,	// BSET_B
    33573949U,	// BSET_D
    33575329U,	// BSET_H
    33579208U,	// BSET_W
    17657U,	// BZ_B
    20077U,	// BZ_D
    21199U,	// BZ_H
    23440U,	// BZ_V
    25199U,	// BZ_W
    100688577U,	// BeqzRxImm16
    25281U,	// BeqzRxImmX16
    672210U,	// Bimm16
    278994U,	// BimmX16
    100688550U,	// BnezRxImm16
    25254U,	// BnezRxImmX16
    9110U,	// Break16
    811727U,	// Bteqz16
    134240020U,	// BteqzT8CmpX16
    134239587U,	// BteqzT8CmpiX16
    134240955U,	// BteqzT8SltX16
    134239617U,	// BteqzT8SltiX16
    134241063U,	// BteqzT8SltiuX16
    134241099U,	// BteqzT8SltuX16
    287439U,	// BteqzX16
    811700U,	// Btnez16
    167794452U,	// BtnezT8CmpX16
    167794019U,	// BtnezT8CmpiX16
    167795387U,	// BtnezT8SltX16
    167794049U,	// BtnezT8SltiX16
    167795495U,	// BtnezT8SltiuX16
    167795531U,	// BtnezT8SltuX16
    287412U,	// BtnezX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    69335U,	// CACHE
    69335U,	// CACHE_R6
    18863U,	// CEIL_L_D64
    22797U,	// CEIL_L_S
    20039U,	// CEIL_W_D32
    20039U,	// CEIL_W_D64
    20039U,	// CEIL_W_MM
    23119U,	// CEIL_W_S
    23119U,	// CEIL_W_S_MM
    33571454U,	// CEQI_B
    33573191U,	// CEQI_D
    33574827U,	// CEQI_H
    33578362U,	// CEQI_W
    33571608U,	// CEQ_B
    33573494U,	// CEQ_D
    33575018U,	// CEQ_H
    33578638U,	// CEQ_W
    16437U,	// CFC1
    16437U,	// CFC1_MM
    16828U,	// CFCMSA
    1107321677U,	// CINS
    1107321633U,	// CINS32
    19499U,	// CLASS_D
    22971U,	// CLASS_S
    33571693U,	// CLEI_S_B
    33573754U,	// CLEI_S_D
    33575152U,	// CLEI_S_H
    33578925U,	// CLEI_S_W
    570442820U,	// CLEI_U_B
    570445133U,	// CLEI_U_D
    570446352U,	// CLEI_U_H
    570450305U,	// CLEI_U_W
    33571675U,	// CLE_S_B
    33573736U,	// CLE_S_D
    33575134U,	// CLE_S_H
    33578907U,	// CLE_S_W
    33571890U,	// CLE_U_B
    33574203U,	// CLE_U_D
    33575422U,	// CLE_U_H
    33579375U,	// CLE_U_W
    22235U,	// CLO
    22235U,	// CLO_MM
    22235U,	// CLO_R6
    33571713U,	// CLTI_S_B
    33573774U,	// CLTI_S_D
    33575172U,	// CLTI_S_H
    33578945U,	// CLTI_S_W
    570442840U,	// CLTI_U_B
    570445153U,	// CLTI_U_D
    570446372U,	// CLTI_U_H
    570450325U,	// CLTI_U_W
    33571781U,	// CLT_S_B
    33573852U,	// CLT_S_D
    33575260U,	// CLT_S_H
    33579073U,	// CLT_S_W
    33572008U,	// CLT_U_B
    33574331U,	// CLT_U_D
    33575550U,	// CLT_U_H
    33579503U,	// CLT_U_W
    25276U,	// CLZ
    25276U,	// CLZ_MM
    25276U,	// CLZ_R6
    33572231U,	// CMPGDU_EQ_QB
    33572136U,	// CMPGDU_LE_QB
    33572350U,	// CMPGDU_LT_QB
    33572245U,	// CMPGU_EQ_QB
    33572150U,	// CMPGU_LE_QB
    33572364U,	// CMPGU_LT_QB
    17826U,	// CMPU_EQ_QB
    17731U,	// CMPU_LE_QB
    17945U,	// CMPU_LT_QB
    33573483U,	// CMP_EQ_D
    21390U,	// CMP_EQ_PH
    33577334U,	// CMP_EQ_S
    33573053U,	// CMP_F_D
    33577145U,	// CMP_F_S
    33572897U,	// CMP_LE_D
    21286U,	// CMP_LE_PH
    33577066U,	// CMP_LE_S
    33573974U,	// CMP_LT_D
    21559U,	// CMP_LT_PH
    33577429U,	// CMP_LT_S
    33573071U,	// CMP_SAF_D
    33577155U,	// CMP_SAF_S
    33573510U,	// CMP_SEQ_D
    33577353U,	// CMP_SEQ_S
    33572934U,	// CMP_SLE_D
    33577095U,	// CMP_SLE_S
    33574001U,	// CMP_SLT_D
    33577448U,	// CMP_SLT_S
    33573558U,	// CMP_SUEQ_D
    33577384U,	// CMP_SUEQ_S
    33572982U,	// CMP_SULE_D
    33577126U,	// CMP_SULE_S
    33574049U,	// CMP_SULT_D
    33577479U,	// CMP_SULT_S
    33573440U,	// CMP_SUN_D
    33577307U,	// CMP_SUN_S
    33573538U,	// CMP_UEQ_D
    33577373U,	// CMP_UEQ_S
    33572962U,	// CMP_ULE_D
    33577115U,	// CMP_ULE_S
    33574029U,	// CMP_ULT_D
    33577468U,	// CMP_ULT_S
    33573422U,	// CMP_UN_D
    33577297U,	// CMP_UN_S
    9196U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    738214892U,	// COPY_S_B
    738216985U,	// COPY_S_D
    738218382U,	// COPY_S_H
    738222217U,	// COPY_S_W
    738215107U,	// COPY_U_B
    738217452U,	// COPY_U_D
    738218649U,	// COPY_U_H
    738222624U,	// COPY_U_W
    950352U,	// CTC1
    950352U,	// CTC1_MM
    16836U,	// CTCMSA
    22599U,	// CVT_D32_S
    23638U,	// CVT_D32_W
    23638U,	// CVT_D32_W_MM
    21922U,	// CVT_D64_L
    22599U,	// CVT_D64_S
    23638U,	// CVT_D64_W
    22599U,	// CVT_D_S_MM
    18884U,	// CVT_L_D64
    18884U,	// CVT_L_D64_MM
    22818U,	// CVT_L_S
    22818U,	// CVT_L_S_MM
    19222U,	// CVT_S_D32
    19222U,	// CVT_S_D32_MM
    19222U,	// CVT_S_D64
    21931U,	// CVT_S_L
    24393U,	// CVT_S_W
    24393U,	// CVT_S_W_MM
    20060U,	// CVT_W_D32
    20060U,	// CVT_W_D64
    20060U,	// CVT_W_MM
    23140U,	// CVT_W_S
    23140U,	// CVT_W_S_MM
    19043U,	// C_EQ_D32
    19043U,	// C_EQ_D64
    22894U,	// C_EQ_S
    18614U,	// C_F_D32
    18614U,	// C_F_D64
    22706U,	// C_F_S
    18457U,	// C_LE_D32
    18457U,	// C_LE_D64
    22626U,	// C_LE_S
    19534U,	// C_LT_D32
    19534U,	// C_LT_D64
    22989U,	// C_LT_S
    18448U,	// C_NGE_D32
    18448U,	// C_NGE_D64
    22617U,	// C_NGE_S
    18483U,	// C_NGLE_D32
    18483U,	// C_NGLE_D64
    22644U,	// C_NGLE_S
    18900U,	// C_NGL_D32
    18900U,	// C_NGL_D64
    22834U,	// C_NGL_S
    19525U,	// C_NGT_D32
    19525U,	// C_NGT_D64
    22980U,	// C_NGT_S
    18493U,	// C_OLE_D32
    18493U,	// C_OLE_D64
    22654U,	// C_OLE_S
    19560U,	// C_OLT_D32
    19560U,	// C_OLT_D64
    23007U,	// C_OLT_S
    19069U,	// C_SEQ_D32
    19069U,	// C_SEQ_D64
    22912U,	// C_SEQ_S
    18684U,	// C_SF_D32
    18684U,	// C_SF_D64
    22752U,	// C_SF_S
    19097U,	// C_UEQ_D32
    19097U,	// C_UEQ_D64
    22932U,	// C_UEQ_S
    18521U,	// C_ULE_D32
    18521U,	// C_ULE_D64
    22674U,	// C_ULE_S
    19588U,	// C_ULT_D32
    19588U,	// C_ULT_D64
    23027U,	// C_ULT_S
    18982U,	// C_UN_D32
    18982U,	// C_UN_D64
    22857U,	// C_UN_S
    22292U,	// CmpRxRy16
    234902883U,	// CmpiRxImm16
    21859U,	// CmpiRxImmX16
    287543U,	// Constant32
    33574555U,	// DADD
    33576223U,	// DADDi
    33577752U,	// DADDiu
    33577713U,	// DADDu
    2266430U,	// DAHI
    33576652U,	// DALIGN
    2266491U,	// DATI
    33576333U,	// DAUI
    22259U,	// DBITSWAP
    22234U,	// DCLO
    22234U,	// DCLO_R6
    25275U,	// DCLZ
    25275U,	// DCLZ_R6
    33577915U,	// DDIV
    33577823U,	// DDIVU
    9222U,	// DERET
    9222U,	// DERET_MM
    1107321695U,	// DEXT
    1107321670U,	// DEXTM
    1107321708U,	// DEXTU
    283938U,	// DI
    1107321683U,	// DINS
    1107321663U,	// DINSM
    1107321701U,	// DINSU
    33577916U,	// DIV
    33577824U,	// DIVU
    33571802U,	// DIV_S_B
    33573895U,	// DIV_S_D
    33575281U,	// DIV_S_H
    33579116U,	// DIV_S_W
    33572017U,	// DIV_U_B
    33574362U,	// DIV_U_D
    33575559U,	// DIV_U_H
    33579534U,	// DIV_U_W
    283938U,	// DI_MM
    33571254U,	// DLSA
    33571254U,	// DLSA_R6
    1107312649U,	// DMFC0
    16443U,	// DMFC1
    1107312854U,	// DMFC2
    33574600U,	// DMOD
    33577727U,	// DMODU
    1107312656U,	// DMTC0
    950358U,	// DMTC1
    1107312861U,	// DMTC2
    33576217U,	// DMUH
    33577745U,	// DMUHU
    33576600U,	// DMUL
    23237U,	// DMULT
    23383U,	// DMULTu
    33577789U,	// DMULU
    33576600U,	// DMUL_R6
    33573803U,	// DOTP_S_D
    33575201U,	// DOTP_S_H
    33578984U,	// DOTP_S_W
    33574270U,	// DOTP_U_D
    33575489U,	// DOTP_U_H
    33579442U,	// DOTP_U_W
    2185251668U,	// DPADD_S_D
    2185253066U,	// DPADD_S_H
    2185256839U,	// DPADD_S_W
    2185252135U,	// DPADD_U_D
    2185253354U,	// DPADD_U_H
    2185257307U,	// DPADD_U_W
    33576070U,	// DPAQX_SA_W_PH
    33576153U,	// DPAQX_S_W_PH
    33578444U,	// DPAQ_SA_L_W
    33576112U,	// DPAQ_S_W_PH
    33576398U,	// DPAU_H_QBL
    33576825U,	// DPAU_H_QBR
    33576191U,	// DPAX_W_PH
    33576060U,	// DPA_W_PH
    22297U,	// DPOP
    33576085U,	// DPSQX_SA_W_PH
    33576167U,	// DPSQX_S_W_PH
    33578457U,	// DPSQ_SA_L_W
    33576140U,	// DPSQ_S_W_PH
    2185251635U,	// DPSUB_S_D
    2185253045U,	// DPSUB_S_H
    2185256806U,	// DPSUB_S_W
    2185252102U,	// DPSUB_U_D
    2185253333U,	// DPSUB_U_H
    2185257274U,	// DPSUB_U_W
    33576410U,	// DPSU_H_QBL
    33576837U,	// DPSU_H_QBR
    33576202U,	// DPSX_W_PH
    33576181U,	// DPS_W_PH
    1107318806U,	// DROTR
    1107312833U,	// DROTR32
    33577959U,	// DROTRV
    21212U,	// DSBH
    25352U,	// DSDIV
    20135U,	// DSHD
    1107318399U,	// DSLL
    1107312817U,	// DSLL32
    268457599U,	// DSLL64_32
    33577921U,	// DSLLV
    1107313072U,	// DSRA
    1107312799U,	// DSRA32
    33577900U,	// DSRAV
    1107318411U,	// DSRL
    1107312825U,	// DSRL32
    33577928U,	// DSRLV
    33572465U,	// DSUB
    33577692U,	// DSUBu
    25338U,	// DUDIV
    25353U,	// DivRxRy16
    25339U,	// DivuRxRy16
    9180U,	// EHB
    283950U,	// EI
    283950U,	// EI_MM
    9223U,	// ERET
    9223U,	// ERET_MM
    1107321696U,	// EXT
    1107318628U,	// EXTP
    1107318532U,	// EXTPDP
    33577943U,	// EXTPDPV
    33577952U,	// EXTPV
    33579177U,	// EXTRV_RS_W
    33578731U,	// EXTRV_R_W
    33575290U,	// EXTRV_S_H
    33579614U,	// EXTRV_W
    1107320990U,	// EXTR_RS_W
    1107320534U,	// EXTR_R_W
    1107317045U,	// EXTR_S_H
    1107320633U,	// EXTR_W
    1107321689U,	// EXTS
    1107321641U,	// EXTS32
    1107321696U,	// EXT_MM
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    19491U,	// FABS_D32
    19491U,	// FABS_D64
    19491U,	// FABS_MM
    22964U,	// FABS_S
    22964U,	// FABS_S_MM
    0U,	// FABS_W
    33572829U,	// FADD_D
    33572830U,	// FADD_D32
    33572830U,	// FADD_D64
    33572830U,	// FADD_MM
    33577042U,	// FADD_S
    33577042U,	// FADD_S_MM
    33578079U,	// FADD_W
    33573063U,	// FCAF_D
    33578198U,	// FCAF_W
    33573493U,	// FCEQ_D
    33578637U,	// FCEQ_W
    19498U,	// FCLASS_D
    24757U,	// FCLASS_W
    33572907U,	// FCLE_D
    33578121U,	// FCLE_W
    33573984U,	// FCLT_D
    33579216U,	// FCLT_W
    1139603U,	// FCMP_D32
    1139603U,	// FCMP_D32_MM
    1139603U,	// FCMP_D64
    1270675U,	// FCMP_S32
    1270675U,	// FCMP_S32_MM
    33573003U,	// FCNE_D
    33578155U,	// FCNE_W
    33573603U,	// FCOR_D
    33578766U,	// FCOR_W
    33573549U,	// FCUEQ_D
    33578653U,	// FCUEQ_W
    33572973U,	// FCULE_D
    33578137U,	// FCULE_W
    33574040U,	// FCULT_D
    33579232U,	// FCULT_W
    33573019U,	// FCUNE_D
    33578171U,	// FCUNE_W
    33573432U,	// FCUN_D
    33578543U,	// FCUN_W
    33574426U,	// FDIV_D
    33574427U,	// FDIV_D32
    33574427U,	// FDIV_D64
    33574427U,	// FDIV_MM
    33577515U,	// FDIV_S
    33577515U,	// FDIV_S_MM
    33579598U,	// FDIV_W
    33574948U,	// FEXDO_H
    33578559U,	// FEXDO_W
    33572716U,	// FEXP2_D
    0U,	// FEXP2_D_1_PSEUDO
    33577982U,	// FEXP2_W
    0U,	// FEXP2_W_1_PSEUDO
    18924U,	// FEXUPL_D
    24053U,	// FEXUPL_W
    19187U,	// FEXUPR_D
    24350U,	// FEXUPR_W
    19429U,	// FFINT_S_D
    24650U,	// FFINT_S_W
    19908U,	// FFINT_U_D
    25080U,	// FFINT_U_W
    18934U,	// FFQL_D
    24063U,	// FFQL_W
    19197U,	// FFQR_D
    24360U,	// FFQR_W
    17137U,	// FILL_B
    18909U,	// FILL_D
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    20477U,	// FILL_H
    24038U,	// FILL_W
    18275U,	// FLOG2_D
    23541U,	// FLOG2_W
    18873U,	// FLOOR_L_D64
    22807U,	// FLOOR_L_S
    20049U,	// FLOOR_W_D32
    20049U,	// FLOOR_W_D64
    20049U,	// FLOOR_W_MM
    23129U,	// FLOOR_W_S
    23129U,	// FLOOR_W_S_MM
    2185250789U,	// FMADD_D
    2185256039U,	// FMADD_W
    33572754U,	// FMAX_A_D
    33578020U,	// FMAX_A_W
    33574501U,	// FMAX_D
    33579623U,	// FMAX_W
    33572734U,	// FMIN_A_D
    33578000U,	// FMIN_A_W
    33573406U,	// FMIN_D
    33578535U,	// FMIN_W
    20010U,	// FMOV_D32
    20010U,	// FMOV_D32_MM
    20010U,	// FMOV_D64
    23090U,	// FMOV_S
    23090U,	// FMOV_S_MM
    2185250747U,	// FMSUB_D
    2185255997U,	// FMSUB_W
    33573390U,	// FMUL_D
    33573391U,	// FMUL_D32
    33573391U,	// FMUL_D64
    33573391U,	// FMUL_MM
    33577275U,	// FMUL_S
    33577275U,	// FMUL_S_MM
    33578519U,	// FMUL_W
    18701U,	// FNEG_D32
    18701U,	// FNEG_D64
    18701U,	// FNEG_MM
    22768U,	// FNEG_S
    22768U,	// FNEG_S_MM
    19035U,	// FRCP_D
    24136U,	// FRCP_W
    19646U,	// FRINT_D
    24826U,	// FRINT_W
    19674U,	// FRSQRT_D
    24854U,	// FRSQRT_W
    33573082U,	// FSAF_D
    33578206U,	// FSAF_W
    33573521U,	// FSEQ_D
    33578645U,	// FSEQ_W
    33572945U,	// FSLE_D
    33578129U,	// FSLE_W
    33574012U,	// FSLT_D
    33579224U,	// FSLT_W
    33573011U,	// FSNE_D
    33578163U,	// FSNE_W
    33573611U,	// FSOR_D
    33578774U,	// FSOR_W
    19665U,	// FSQRT_D
    19666U,	// FSQRT_D32
    19666U,	// FSQRT_D64
    19666U,	// FSQRT_MM
    23067U,	// FSQRT_S
    23067U,	// FSQRT_S_MM
    24845U,	// FSQRT_W
    33572787U,	// FSUB_D
    33572788U,	// FSUB_D32
    33572788U,	// FSUB_D64
    33572788U,	// FSUB_MM
    33577024U,	// FSUB_S
    33577024U,	// FSUB_S_MM
    33578037U,	// FSUB_W
    33573570U,	// FSUEQ_D
    33578662U,	// FSUEQ_W
    33572994U,	// FSULE_D
    33578146U,	// FSULE_W
    33574061U,	// FSULT_D
    33579241U,	// FSULT_W
    33573028U,	// FSUNE_D
    33578180U,	// FSUNE_W
    33573451U,	// FSUN_D
    33578551U,	// FSUN_W
    19440U,	// FTINT_S_D
    24661U,	// FTINT_S_W
    19919U,	// FTINT_U_D
    25091U,	// FTINT_U_W
    33575025U,	// FTQ_H
    33578671U,	// FTQ_W
    19262U,	// FTRUNC_S_D
    24433U,	// FTRUNC_S_W
    19729U,	// FTRUNC_U_D
    24901U,	// FTRUNC_U_W
    306206042U,	// GotPrologue16
    33573706U,	// HADD_S_D
    33575104U,	// HADD_S_H
    33578877U,	// HADD_S_W
    33574173U,	// HADD_U_D
    33575392U,	// HADD_U_H
    33579345U,	// HADD_U_W
    33573673U,	// HSUB_S_D
    33575083U,	// HSUB_S_H
    33578844U,	// HSUB_S_W
    33574140U,	// HSUB_U_D
    33575371U,	// HSUB_U_H
    33579312U,	// HSUB_U_W
    33572072U,	// ILVEV_B
    33574417U,	// ILVEV_D
    33575614U,	// ILVEV_H
    33579589U,	// ILVEV_W
    33571600U,	// ILVL_B
    33573398U,	// ILVL_D
    33574940U,	// ILVL_H
    33578527U,	// ILVL_W
    33571352U,	// ILVOD_B
    33572871U,	// ILVOD_D
    33574742U,	// ILVOD_H
    33578112U,	// ILVOD_W
    33571648U,	// ILVR_B
    33573646U,	// ILVR_D
    33575065U,	// ILVR_H
    33578817U,	// ILVR_W
    1107321678U,	// INS
    9716751U,	// INSERT_B
    0U,	// INSERT_B_VIDX_PSEUDO
    9718983U,	// INSERT_D
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    9720241U,	// INSERT_H
    0U,	// INSERT_H_VIDX_PSEUDO
    9724163U,	// INSERT_W
    0U,	// INSERT_W_VIDX_PSEUDO
    4217839U,	// INSV
    11813409U,	// INSVE_B
    11815085U,	// INSVE_D
    11816799U,	// INSVE_H
    11820237U,	// INSVE_W
    1107321678U,	// INS_MM
    284056U,	// J
    284089U,	// JAL
    22534U,	// JALR
    284678U,	// JALR16_MM
    22534U,	// JALR64
    0U,	// JALR64Pseudo
    0U,	// JALRPseudo
    278862U,	// JALRS16_MM
    23208U,	// JALRS_MM
    17682U,	// JALR_HB
    22534U,	// JALR_MM
    285328U,	// JALS_MM
    287369U,	// JALX
    284089U,	// JAL_MM
    18072U,	// JIALC
    18061U,	// JIC
    284674U,	// JR
    278849U,	// JR16_MM
    284674U,	// JR64
    284505U,	// JRADDIUSP
    280326U,	// JRC16_MM
    279819U,	// JR_HB
    279819U,	// JR_HB_R6
    284674U,	// JR_MM
    284056U,	// J_MM
    1463737U,	// Jal16
    1594809U,	// JalB16
    9172U,	// JrRa16
    9163U,	// JrcRa16
    287470U,	// JrcRx16
    278529U,	// JumpLinkReg16
    12600603U,	// LB
    12600603U,	// LB64
    339763855U,	// LBUX
    12600603U,	// LB_MM
    12606167U,	// LBu
    12606167U,	// LBu64
    12606167U,	// LBu_MM
    12603054U,	// LD
    12599337U,	// LDC1
    12599337U,	// LDC164
    12599337U,	// LDC1_MM
    12599498U,	// LDC2
    12599498U,	// LDC2_R6
    12599557U,	// LDC3
    16963U,	// LDI_B
    18717U,	// LDI_D
    20353U,	// LDI_H
    23888U,	// LDI_W
    12604949U,	// LDL
    18133U,	// LDPC
    12605376U,	// LDR
    339755113U,	// LDXC1
    339755113U,	// LDXC164
    12599817U,	// LD_B
    12601336U,	// LD_D
    12603207U,	// LD_H
    12606577U,	// LD_W
    6314777U,	// LEA_ADDiu
    6314776U,	// LEA_ADDiu64
    6314777U,	// LEA_ADDiu_MM
    12604141U,	// LH
    12604141U,	// LH64
    339763844U,	// LHX
    12604141U,	// LH_MM
    12606220U,	// LHu
    12606220U,	// LHu64
    12606220U,	// LHu_MM
    16685U,	// LI16_MM
    12605033U,	// LL
    12603053U,	// LLD
    12603053U,	// LLD_R6
    12605033U,	// LL_MM
    12605033U,	// LL_R6
    12599303U,	// LOAD_ACC128
    12599303U,	// LOAD_ACC64
    12599303U,	// LOAD_ACC64DSP
    12605226U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_LUi
    33571255U,	// LSA
    33571255U,	// LSA_R6
    339755127U,	// LUXC1
    339755127U,	// LUXC164
    339755127U,	// LUXC1_MM
    14701971U,	// LUi
    14701971U,	// LUi64
    14701971U,	// LUi_MM
    12608124U,	// LW
    12608124U,	// LW64
    12599389U,	// LWC1
    12599389U,	// LWC1_MM
    12599524U,	// LWC2
    12599524U,	// LWC2_R6
    12599569U,	// LWC3
    12605086U,	// LWL
    12605086U,	// LWL64
    12605086U,	// LWL_MM
    18170U,	// LWPC
    12605476U,	// LWR
    12605476U,	// LWR64
    12605476U,	// LWR_MM
    18163U,	// LWUPC
    12606310U,	// LWU_MM
    339763861U,	// LWX
    339755141U,	// LWXC1
    339755141U,	// LWXC1_MM
    12608124U,	// LW_MM
    12606310U,	// LWu
    12600603U,	// LbRxRyOffMemX16
    12606167U,	// LbuRxRyOffMemX16
    12604141U,	// LhRxRyOffMemX16
    12606220U,	// LhuRxRyOffMemX16
    234902874U,	// LiRxImm16
    21840U,	// LiRxImmAlignX16
    21850U,	// LiRxImmX16
    14696826U,	// LoadAddr32Imm
    12599674U,	// LoadAddr32Reg
    14701914U,	// LoadImm32Reg
    21854U,	// LoadImm64Reg
    1729148U,	// LwConstant32
    67134076U,	// LwRxPcTcp16
    25212U,	// LwRxPcTcpX16
    12608124U,	// LwRxRyOffMemX16
    373318268U,	// LwRxSpImmX16
    20129U,	// MADD
    2185251051U,	// MADDF_D
    2185255127U,	// MADDF_S
    2185252949U,	// MADDR_Q_H
    2185256568U,	// MADDR_Q_W
    23288U,	// MADDU
    33577720U,	// MADDU_DSP
    23288U,	// MADDU_MM
    2185250006U,	// MADDV_B
    2185252351U,	// MADDV_D
    2185253548U,	// MADDV_H
    2185257523U,	// MADDV_W
    33572838U,	// MADD_D32
    33572838U,	// MADD_D32_MM
    33572838U,	// MADD_D64
    33574561U,	// MADD_DSP
    20129U,	// MADD_MM
    2185252919U,	// MADD_Q_H
    2185256538U,	// MADD_Q_W
    33577041U,	// MADD_S
    33577041U,	// MADD_S_MM
    33576492U,	// MAQ_SA_W_PHL
    33576906U,	// MAQ_SA_W_PHR
    33576520U,	// MAQ_S_W_PHL
    33576934U,	// MAQ_S_W_PHR
    33572779U,	// MAXA_D
    33577014U,	// MAXA_S
    33571723U,	// MAXI_S_B
    33573784U,	// MAXI_S_D
    33575182U,	// MAXI_S_H
    33578955U,	// MAXI_S_W
    570442850U,	// MAXI_U_B
    570445163U,	// MAXI_U_D
    570446382U,	// MAXI_U_H
    570450335U,	// MAXI_U_W
    33571304U,	// MAX_A_B
    33572755U,	// MAX_A_D
    33574694U,	// MAX_A_H
    33578021U,	// MAX_A_W
    33574502U,	// MAX_D
    33577581U,	// MAX_S
    33571811U,	// MAX_S_B
    33573904U,	// MAX_S_D
    33575301U,	// MAX_S_H
    33579136U,	// MAX_S_W
    33572026U,	// MAX_U_B
    33574371U,	// MAX_U_D
    33575568U,	// MAX_U_H
    33579543U,	// MAX_U_W
    1107312650U,	// MFC0
    16444U,	// MFC1
    16444U,	// MFC1_MM
    1107312855U,	// MFC2
    16450U,	// MFHC1_D32
    16450U,	// MFHC1_D64
    16450U,	// MFHC1_MM
    283972U,	// MFHI
    283972U,	// MFHI16_MM
    283972U,	// MFHI64
    21828U,	// MFHI_DSP
    283972U,	// MFHI_MM
    284384U,	// MFLO
    284384U,	// MFLO16_MM
    284384U,	// MFLO64
    22240U,	// MFLO_DSP
    284384U,	// MFLO_MM
    33572764U,	// MINA_D
    33577006U,	// MINA_S
    33571703U,	// MINI_S_B
    33573764U,	// MINI_S_D
    33575162U,	// MINI_S_H
    33578935U,	// MINI_S_W
    570442830U,	// MINI_U_B
    570445143U,	// MINI_U_D
    570446362U,	// MINI_U_H
    570450315U,	// MINI_U_W
    33571285U,	// MIN_A_B
    33572735U,	// MIN_A_D
    33574675U,	// MIN_A_H
    33578001U,	// MIN_A_W
    33573407U,	// MIN_D
    33577282U,	// MIN_S
    33571733U,	// MIN_S_B
    33573794U,	// MIN_S_D
    33575192U,	// MIN_S_H
    33578975U,	// MIN_S_W
    33571948U,	// MIN_U_B
    33574261U,	// MIN_U_D
    33575480U,	// MIN_U_H
    33579433U,	// MIN_U_W
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    33574601U,	// MOD
    33572463U,	// MODSUB
    33577728U,	// MODU
    33571666U,	// MOD_S_B
    33573727U,	// MOD_S_D
    33575125U,	// MOD_S_H
    33578898U,	// MOD_S_W
    33571881U,	// MOD_U_B
    33574194U,	// MOD_U_D
    33575413U,	// MOD_U_H
    33579366U,	// MOD_U_W
    20205U,	// MOVE16_MM
    23410U,	// MOVE_V
    33573124U,	// MOVF_D32
    33573124U,	// MOVF_D32_MM
    33573124U,	// MOVF_D64
    33574655U,	// MOVF_I
    33574655U,	// MOVF_I64
    33574655U,	// MOVF_I_MM
    33577192U,	// MOVF_S
    33577192U,	// MOVF_S_MM
    33573459U,	// MOVN_I64_D64
    33576660U,	// MOVN_I64_I
    33576660U,	// MOVN_I64_I64
    33577318U,	// MOVN_I64_S
    33573459U,	// MOVN_I_D32
    33573459U,	// MOVN_I_D32_MM
    33573459U,	// MOVN_I_D64
    33576660U,	// MOVN_I_I
    33576660U,	// MOVN_I_I64
    33576660U,	// MOVN_I_MM
    33577318U,	// MOVN_I_S
    33577318U,	// MOVN_I_S_MM
    33574122U,	// MOVT_D32
    33574122U,	// MOVT_D32_MM
    33574122U,	// MOVT_D64
    33577681U,	// MOVT_I
    33577681U,	// MOVT_I64
    33577681U,	// MOVT_I_MM
    33577507U,	// MOVT_S
    33577507U,	// MOVT_S_MM
    33574542U,	// MOVZ_I64_D64
    33579746U,	// MOVZ_I64_I
    33579746U,	// MOVZ_I64_I64
    33577608U,	// MOVZ_I64_S
    33574542U,	// MOVZ_I_D32
    33574542U,	// MOVZ_I_D32_MM
    33574542U,	// MOVZ_I_D64
    33579746U,	// MOVZ_I_I
    33579746U,	// MOVZ_I_I64
    33579746U,	// MOVZ_I_MM
    33577608U,	// MOVZ_I_S
    33577608U,	// MOVZ_I_S_MM
    18039U,	// MSUB
    2185251042U,	// MSUBF_D
    2185255118U,	// MSUBF_S
    2185252938U,	// MSUBR_Q_H
    2185256557U,	// MSUBR_Q_W
    23267U,	// MSUBU
    33577699U,	// MSUBU_DSP
    23267U,	// MSUBU_MM
    2185249997U,	// MSUBV_B
    2185252342U,	// MSUBV_D
    2185253539U,	// MSUBV_H
    2185257514U,	// MSUBV_W
    33572796U,	// MSUB_D32
    33572796U,	// MSUB_D32_MM
    33572796U,	// MSUB_D64
    33572471U,	// MSUB_DSP
    18039U,	// MSUB_MM
    2185252909U,	// MSUB_Q_H
    2185256528U,	// MSUB_Q_W
    33577023U,	// MSUB_S
    33577023U,	// MSUB_S_MM
    1107312657U,	// MTC0
    950359U,	// MTC1
    950359U,	// MTC1_MM
    1107312862U,	// MTC2
    966729U,	// MTHC1_D32
    966729U,	// MTHC1_D64
    950345U,	// MTHC1_MM
    283978U,	// MTHI
    283978U,	// MTHI64
    955722U,	// MTHI_DSP
    283978U,	// MTHI_MM
    956172U,	// MTHLIP
    284397U,	// MTLO
    284397U,	// MTLO64
    956141U,	// MTLO_DSP
    284397U,	// MTLO_MM
    278557U,	// MTM0
    278675U,	// MTM1
    278768U,	// MTM2
    278563U,	// MTP0
    278681U,	// MTP1
    278774U,	// MTP2
    33576218U,	// MUH
    33577746U,	// MUHU
    33576601U,	// MUL
    33576533U,	// MULEQ_S_W_PHL
    33576947U,	// MULEQ_S_W_PHR
    33576422U,	// MULEU_S_PH_QBL
    33576849U,	// MULEU_S_PH_QBR
    33575979U,	// MULQ_RS_PH
    33579155U,	// MULQ_RS_W
    33575923U,	// MULQ_S_PH
    33579014U,	// MULQ_S_W
    33575008U,	// MULR_Q_H
    33578627U,	// MULR_Q_W
    33576125U,	// MULSAQ_S_W_PH
    33576100U,	// MULSA_W_PH
    23238U,	// MULT
    33577816U,	// MULTU_DSP
    33577670U,	// MULT_DSP
    23238U,	// MULT_MM
    23384U,	// MULTu
    23384U,	// MULTu_MM
    33577783U,	// MULU
    33572081U,	// MULV_B
    33574434U,	// MULV_D
    33575623U,	// MULV_H
    33579606U,	// MULV_W
    33576601U,	// MUL_MM
    33575796U,	// MUL_PH
    33574977U,	// MUL_Q_H
    33578596U,	// MUL_Q_W
    33576601U,	// MUL_R6
    33575891U,	// MUL_S_PH
    283972U,	// Mfhi16
    284384U,	// Mflo16
    20205U,	// Move32R16
    20205U,	// MoveR3216
    23238U,	// MultRxRy16
    16947910U,	// MultRxRyRz16
    23384U,	// MultuRxRy16
    16948056U,	// MultuRxRyRz16
    16888U,	// NLOC_B
    18381U,	// NLOC_D
    20278U,	// NLOC_H
    23622U,	// NLOC_W
    16896U,	// NLZC_B
    18389U,	// NLZC_D
    20286U,	// NLZC_H
    23630U,	// NLZC_W
    33572846U,	// NMADD_D32
    33572846U,	// NMADD_D32_MM
    33572846U,	// NMADD_D64
    33577040U,	// NMADD_S
    33577040U,	// NMADD_S_MM
    33572804U,	// NMSUB_D32
    33572804U,	// NMSUB_D32_MM
    33572804U,	// NMSUB_D64
    33577022U,	// NMSUB_S
    33577022U,	// NMSUB_S_MM
    0U,	// NOP
    33576972U,	// NOR
    33576972U,	// NOR64
    570442401U,	// NORI_B
    33576972U,	// NOR_MM
    33577858U,	// NOR_V
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    16727U,	// NOT16_MM
    20229U,	// NegRxRy16
    23244U,	// NotRxRy16
    33576973U,	// OR
    442696U,	// OR16_MM
    33576973U,	// OR64
    570442402U,	// ORI_B
    33576973U,	// OR_MM
    33577859U,	// OR_V
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    1107318134U,	// ORi
    1107318134U,	// ORi64
    1107318134U,	// ORi_MM
    4216845U,	// OrRxRxRy16
    33575785U,	// PACKRL_PH
    9184U,	// PAUSE
    33572063U,	// PCKEV_B
    33574408U,	// PCKEV_D
    33575605U,	// PCKEV_H
    33579580U,	// PCKEV_W
    33571343U,	// PCKOD_B
    33572862U,	// PCKOD_D
    33574733U,	// PCKOD_H
    33578103U,	// PCKOD_W
    17415U,	// PCNT_B
    19638U,	// PCNT_D
    20905U,	// PCNT_H
    24818U,	// PCNT_W
    33575749U,	// PICK_PH
    33572195U,	// PICK_QB
    22298U,	// POP
    22021U,	// PRECEQU_PH_QBL
    16766U,	// PRECEQU_PH_QBLA
    22448U,	// PRECEQU_PH_QBR
    16799U,	// PRECEQU_PH_QBRA
    22074U,	// PRECEQ_W_PHL
    22488U,	// PRECEQ_W_PHR
    22006U,	// PRECEU_PH_QBL
    16750U,	// PRECEU_PH_QBLA
    22433U,	// PRECEU_PH_QBR
    16783U,	// PRECEU_PH_QBRA
    33575701U,	// PRECRQU_S_QB_PH
    33578246U,	// PRECRQ_PH_W
    33575674U,	// PRECRQ_QB_PH
    33578277U,	// PRECRQ_RS_PH_W
    33575688U,	// PRECR_QB_PH
    1107320054U,	// PRECR_SRA_PH_W
    1107320083U,	// PRECR_SRA_R_PH_W
    69369U,	// PREF
    69369U,	// PREF_R6
    1107316407U,	// PREPEND
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    16391U,	// PseudoCVT_D32_W
    16391U,	// PseudoCVT_D64_L
    16391U,	// PseudoCVT_D64_W
    16391U,	// PseudoCVT_S_L
    16391U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoUDIV
    18015U,	// RADDU_W_QB
    14702411U,	// RDDSP
    22557U,	// RDHWR
    22557U,	// RDHWR64
    21608U,	// REPLV_PH
    17995U,	// REPLV_QB
    14701399U,	// REPL_PH
    14697845U,	// REPL_QB
    19647U,	// RINT_D
    23059U,	// RINT_S
    1107318807U,	// ROTR
    33577960U,	// ROTRV
    33577960U,	// ROTRV_MM
    1107318807U,	// ROTR_MM
    18852U,	// ROUND_L_D64
    22786U,	// ROUND_L_S
    20028U,	// ROUND_W_D32
    20028U,	// ROUND_W_D64
    20028U,	// ROUND_W_MM
    23108U,	// ROUND_W_S
    23108U,	// ROUND_W_S_MM
    0U,	// Restore16
    0U,	// RestoreX16
    0U,	// RetRA
    0U,	// RetRA16
    1107313596U,	// SAT_S_B
    1107315667U,	// SAT_S_D
    570446163U,	// SAT_S_H
    1107320888U,	// SAT_S_W
    1107313823U,	// SAT_U_B
    1107316146U,	// SAT_U_D
    570446453U,	// SAT_U_H
    1107321318U,	// SAT_U_W
    12600939U,	// SB
    12600939U,	// SB64
    12600939U,	// SB_MM
    1869582U,	// SC
    1871510U,	// SCD
    1871510U,	// SCD_R6
    1869582U,	// SC_MM
    1869582U,	// SC_R6
    12603086U,	// SD
    284413U,	// SDBBP
    284413U,	// SDBBP_R6
    12599343U,	// SDC1
    12599343U,	// SDC164
    12599343U,	// SDC1_MM
    12599504U,	// SDC2
    12599504U,	// SDC2_R6
    12599563U,	// SDC3
    25353U,	// SDIV
    25353U,	// SDIV_MM
    12604954U,	// SDL
    12605381U,	// SDR
    339755120U,	// SDXC1
    339755120U,	// SDXC164
    17670U,	// SEB
    17670U,	// SEB64
    17670U,	// SEB_MM
    21224U,	// SEH
    21224U,	// SEH64
    21224U,	// SEH_MM
    33579719U,	// SELEQZ
    33579719U,	// SELEQZ64
    33574532U,	// SELEQZ_D
    33577598U,	// SELEQZ_S
    33579692U,	// SELNEZ
    33579692U,	// SELNEZ64
    33574515U,	// SELNEZ_D
    33577588U,	// SELNEZ_S
    2185251277U,	// SEL_D
    2185255211U,	// SEL_S
    33576815U,	// SEQ
    33576297U,	// SEQi
    12604693U,	// SH
    12604693U,	// SH64
    570442283U,	// SHF_B
    570445673U,	// SHF_H
    570449127U,	// SHF_W
    22246U,	// SHILO
    23503U,	// SHILOV
    33576030U,	// SHLLV_PH
    33572417U,	// SHLLV_QB
    33575967U,	// SHLLV_S_PH
    33579125U,	// SHLLV_S_W
    1107317582U,	// SHLL_PH
    1107314028U,	// SHLL_QB
    1107317704U,	// SHLL_S_PH
    1107320789U,	// SHLL_S_W
    33576020U,	// SHRAV_PH
    33572407U,	// SHRAV_QB
    33575868U,	// SHRAV_R_PH
    33572305U,	// SHRAV_R_QB
    33578720U,	// SHRAV_R_W
    1107317489U,	// SHRA_PH
    1107313951U,	// SHRA_QB
    1107317657U,	// SHRA_R_PH
    1107314094U,	// SHRA_R_QB
    1107320502U,	// SHRA_R_W
    33576050U,	// SHRLV_PH
    33572437U,	// SHRLV_QB
    1107317600U,	// SHRL_PH
    1107314046U,	// SHRL_QB
    12604693U,	// SH_MM
    1816150594U,	// SLDI_B
    1816152348U,	// SLDI_D
    1816153984U,	// SLDI_H
    1816157519U,	// SLDI_W
    2353021448U,	// SLD_B
    2353022967U,	// SLD_D
    2353024838U,	// SLD_H
    2353028208U,	// SLD_W
    1107318400U,	// SLL
    33571123U,	// SLL16_MM
    402675328U,	// SLL64_32
    402675328U,	// SLL64_64
    570442340U,	// SLLI_B
    570444077U,	// SLLI_D
    570445713U,	// SLLI_H
    570449248U,	// SLLI_W
    33577922U,	// SLLV
    33577922U,	// SLLV_MM
    33571577U,	// SLL_B
    33573349U,	// SLL_D
    33574917U,	// SLL_H
    1107318400U,	// SLL_MM
    33578478U,	// SLL_W
    33577659U,	// SLT
    33577659U,	// SLT64
    33577659U,	// SLT_MM
    33576321U,	// SLTi
    33576321U,	// SLTi64
    33576321U,	// SLTi_MM
    33577767U,	// SLTiu
    33577767U,	// SLTiu64
    33577767U,	// SLTiu_MM
    33577803U,	// SLTu
    33577803U,	// SLTu64
    33577803U,	// SLTu_MM
    33574627U,	// SNE
    33576242U,	// SNEi
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    738214587U,	// SPLATI_B
    738216308U,	// SPLATI_D
    738217944U,	// SPLATI_H
    738221479U,	// SPLATI_W
    201343990U,	// SPLAT_B
    201346100U,	// SPLAT_D
    201347480U,	// SPLAT_H
    201351359U,	// SPLAT_W
    1107313073U,	// SRA
    570442298U,	// SRAI_B
    570444052U,	// SRAI_D
    570445688U,	// SRAI_H
    570449223U,	// SRAI_W
    1107313286U,	// SRARI_B
    1107315023U,	// SRARI_D
    570445747U,	// SRARI_H
    1107320194U,	// SRARI_W
    33571615U,	// SRAR_B
    33573579U,	// SRAR_D
    33575032U,	// SRAR_H
    33578742U,	// SRAR_W
    33577901U,	// SRAV
    33577901U,	// SRAV_MM
    33571313U,	// SRA_B
    33572772U,	// SRA_D
    33574703U,	// SRA_H
    1107313073U,	// SRA_MM
    33578030U,	// SRA_W
    1107318412U,	// SRL
    33571130U,	// SRL16_MM
    570442348U,	// SRLI_B
    570444085U,	// SRLI_D
    570445721U,	// SRLI_H
    570449256U,	// SRLI_W
    1107313304U,	// SRLRI_B
    1107315041U,	// SRLRI_D
    570445765U,	// SRLRI_H
    1107320212U,	// SRLRI_W
    33571631U,	// SRLR_B
    33573595U,	// SRLR_D
    33575048U,	// SRLR_H
    33578758U,	// SRLR_W
    33577929U,	// SRLV
    33577929U,	// SRLV_MM
    33571584U,	// SRL_B
    33573374U,	// SRL_D
    33574924U,	// SRL_H
    1107318412U,	// SRL_MM
    33578503U,	// SRL_W
    9205U,	// SSNOP
    12599303U,	// STORE_ACC128
    12599303U,	// STORE_ACC64
    12599303U,	// STORE_ACC64DSP
    12605242U,	// STORE_CCOND_DSP
    12600345U,	// ST_B
    12602596U,	// ST_D
    12603835U,	// ST_H
    12607776U,	// ST_W
    33572466U,	// SUB
    33575729U,	// SUBQH_PH
    33575844U,	// SUBQH_R_PH
    33578688U,	// SUBQH_R_W
    33578293U,	// SUBQH_W
    33575804U,	// SUBQ_PH
    33575901U,	// SUBQ_S_PH
    33578994U,	// SUBQ_S_W
    33571987U,	// SUBSUS_U_B
    33574310U,	// SUBSUS_U_D
    33575529U,	// SUBSUS_U_H
    33579482U,	// SUBSUS_U_W
    33571790U,	// SUBSUU_S_B
    33573883U,	// SUBSUU_S_D
    33575269U,	// SUBSUU_S_H
    33579104U,	// SUBSUU_S_W
    33571752U,	// SUBS_S_B
    33573823U,	// SUBS_S_D
    33575231U,	// SUBS_S_H
    33579044U,	// SUBS_S_W
    33571967U,	// SUBS_U_B
    33574290U,	// SUBS_U_D
    33575509U,	// SUBS_U_H
    33579462U,	// SUBS_U_W
    33571166U,	// SUBU16_MM
    33572175U,	// SUBUH_QB
    33572281U,	// SUBUH_R_QB
    33576002U,	// SUBU_PH
    33572389U,	// SUBU_QB
    33575945U,	// SUBU_S_PH
    33572328U,	// SUBU_S_QB
    570442446U,	// SUBVI_B
    570444167U,	// SUBVI_D
    570445803U,	// SUBVI_H
    570449338U,	// SUBVI_W
    33572046U,	// SUBV_B
    33574391U,	// SUBV_D
    33575588U,	// SUBV_H
    33579563U,	// SUBV_W
    33572466U,	// SUB_MM
    33577693U,	// SUBu
    33577693U,	// SUBu_MM
    339755134U,	// SUXC1
    339755134U,	// SUXC164
    339755134U,	// SUXC1_MM
    12608128U,	// SW
    12608128U,	// SW64
    12599395U,	// SWC1
    12599395U,	// SWC1_MM
    12599530U,	// SWC2
    12599530U,	// SWC2_R6
    12599575U,	// SWC3
    12605091U,	// SWL
    12605091U,	// SWL64
    12605091U,	// SWL_MM
    12605481U,	// SWR
    12605481U,	// SWR64
    12605481U,	// SWR_MM
    339755148U,	// SWXC1
    339755148U,	// SWXC1_MM
    12608128U,	// SW_MM
    287537U,	// SYNC
    287537U,	// SYNC_MM
    284260U,	// SYSCALL
    284260U,	// SYSCALL_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    0U,	// Save16
    0U,	// SaveX16
    12600939U,	// SbRxRyOffMemX16
    287464U,	// SebRx16
    287476U,	// SehRx16
    2073281U,	// SelBeqZ
    2073254U,	// SelBneZ
    455186196U,	// SelTBteqZCmp
    455185763U,	// SelTBteqZCmpi
    455187131U,	// SelTBteqZSlt
    455185793U,	// SelTBteqZSlti
    455187239U,	// SelTBteqZSltiu
    455187275U,	// SelTBteqZSltu
    488740628U,	// SelTBtneZCmp
    488740195U,	// SelTBtneZCmpi
    488741563U,	// SelTBtneZSlt
    488740225U,	// SelTBtneZSlti
    488741671U,	// SelTBtneZSltiu
    488741707U,	// SelTBtneZSltu
    12604693U,	// ShRxRyOffMemX16
    1107318400U,	// SllX16
    4217794U,	// SllvRxRy16
    21142203U,	// SltCCRxRy16
    23227U,	// SltRxRy16
    21140865U,	// SltiCCRxImmX16
    234902913U,	// SltiRxImm16
    21889U,	// SltiRxImmX16
    21142311U,	// SltiuCCRxImmX16
    234904359U,	// SltiuRxImm16
    23335U,	// SltiuRxImmX16
    21142347U,	// SltuCCRxRy16
    23371U,	// SltuRxRy16
    21142347U,	// SltuRxRyRz16
    1107313073U,	// SraX16
    4217773U,	// SravRxRy16
    1107318412U,	// SrlX16
    4217801U,	// SrlvRxRy16
    33577693U,	// SubuRxRyRz16
    12608128U,	// SwRxRyOffMemX16
    373318272U,	// SwRxSpImmX16
    0U,	// TAILCALL
    0U,	// TAILCALL64_R
    0U,	// TAILCALL_R
    1107318644U,	// TEQ
    14701935U,	// TEQI
    14701935U,	// TEQI_MM
    1107318644U,	// TEQ_MM
    1107316434U,	// TGE
    14701868U,	// TGEI
    14703392U,	// TGEIU
    14703392U,	// TGEIU_MM
    14701868U,	// TGEI_MM
    1107319558U,	// TGEU
    1107319558U,	// TGEU_MM
    1107316434U,	// TGE_MM
    9200U,	// TLBP
    9200U,	// TLBP_MM
    9211U,	// TLBR
    9211U,	// TLBR_MM
    9190U,	// TLBWI
    9190U,	// TLBWI_MM
    9216U,	// TLBWR
    9216U,	// TLBWR_MM
    1107319488U,	// TLT
    14701959U,	// TLTI
    14703406U,	// TLTIU_MM
    14701959U,	// TLTI_MM
    1107319633U,	// TLTU
    1107319633U,	// TLTU_MM
    1107319488U,	// TLT_MM
    1107316456U,	// TNE
    14701880U,	// TNEI
    14701880U,	// TNEI_MM
    1107316456U,	// TNE_MM
    0U,	// TRAP
    18841U,	// TRUNC_L_D64
    22775U,	// TRUNC_L_S
    20017U,	// TRUNC_W_D32
    20017U,	// TRUNC_W_D64
    20017U,	// TRUNC_W_MM
    23097U,	// TRUNC_W_S
    23097U,	// TRUNC_W_S_MM
    14703406U,	// TTLTIU
    25339U,	// UDIV
    25339U,	// UDIV_MM
    33577781U,	// V3MULU
    33570839U,	// VMM0
    33577796U,	// VMULU
    2185249322U,	// VSHF_B
    2185251060U,	// VSHF_D
    2185252712U,	// VSHF_H
    2185256166U,	// VSHF_W
    9228U,	// WAIT
    285365U,	// WAIT_MM
    14702418U,	// WRDSP
    21218U,	// WSBH
    21218U,	// WSBH_MM
    33576977U,	// XOR
    442695U,	// XOR16_MM
    33576977U,	// XOR64
    570442409U,	// XORI_B
    33576977U,	// XOR_MM
    33577865U,	// XOR_V
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    1107318133U,	// XORi
    1107318133U,	// XORi64
    1107318133U,	// XORi_MM
    4216849U,	// XorRxRxRy16
    0U
  };

  static const uint8_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// ABSQ_S_PH
    0U,	// ABSQ_S_QB
    0U,	// ABSQ_S_W
    0U,	// ADD
    0U,	// ADDIUPC
    0U,	// ADDIUR1SP_MM
    0U,	// ADDIUR2_MM
    0U,	// ADDIUS5_MM
    0U,	// ADDIUSP_MM
    0U,	// ADDQH_PH
    0U,	// ADDQH_R_PH
    0U,	// ADDQH_R_W
    0U,	// ADDQH_W
    0U,	// ADDQ_PH
    0U,	// ADDQ_S_PH
    0U,	// ADDQ_S_W
    0U,	// ADDSC
    0U,	// ADDS_A_B
    0U,	// ADDS_A_D
    0U,	// ADDS_A_H
    0U,	// ADDS_A_W
    0U,	// ADDS_S_B
    0U,	// ADDS_S_D
    0U,	// ADDS_S_H
    0U,	// ADDS_S_W
    0U,	// ADDS_U_B
    0U,	// ADDS_U_D
    0U,	// ADDS_U_H
    0U,	// ADDS_U_W
    0U,	// ADDU16_MM
    0U,	// ADDUH_QB
    0U,	// ADDUH_R_QB
    0U,	// ADDU_PH
    0U,	// ADDU_QB
    0U,	// ADDU_S_PH
    0U,	// ADDU_S_QB
    0U,	// ADDVI_B
    0U,	// ADDVI_D
    0U,	// ADDVI_H
    0U,	// ADDVI_W
    0U,	// ADDV_B
    0U,	// ADDV_D
    0U,	// ADDV_H
    0U,	// ADDV_W
    0U,	// ADDWC
    0U,	// ADD_A_B
    0U,	// ADD_A_D
    0U,	// ADD_A_H
    0U,	// ADD_A_W
    0U,	// ADD_MM
    0U,	// ADDi
    0U,	// ADDi_MM
    0U,	// ADDiu
    0U,	// ADDiu_MM
    0U,	// ADDu
    0U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    1U,	// ALIGN
    0U,	// ALUIPC
    0U,	// AND
    0U,	// AND16_MM
    0U,	// AND64
    0U,	// ANDI_B
    0U,	// AND_MM
    0U,	// AND_V
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    0U,	// ANDi
    0U,	// ANDi64
    0U,	// ANDi_MM
    0U,	// APPEND
    0U,	// ASUB_S_B
    0U,	// ASUB_S_D
    0U,	// ASUB_S_H
    0U,	// ASUB_S_W
    0U,	// ASUB_U_B
    0U,	// ASUB_U_D
    0U,	// ASUB_U_H
    0U,	// ASUB_U_W
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// AUI
    0U,	// AUIPC
    0U,	// AVER_S_B
    0U,	// AVER_S_D
    0U,	// AVER_S_H
    0U,	// AVER_S_W
    0U,	// AVER_U_B
    0U,	// AVER_U_D
    0U,	// AVER_U_H
    0U,	// AVER_U_W
    0U,	// AVE_S_B
    0U,	// AVE_S_D
    0U,	// AVE_S_H
    0U,	// AVE_S_W
    0U,	// AVE_U_B
    0U,	// AVE_U_D
    0U,	// AVE_U_H
    0U,	// AVE_U_W
    0U,	// AddiuRxImmX16
    0U,	// AddiuRxPcImmX16
    0U,	// AddiuRxRxImm16
    0U,	// AddiuRxRxImmX16
    0U,	// AddiuRxRyOffMemX16
    0U,	// AddiuSpImm16
    0U,	// AddiuSpImmX16
    0U,	// AdduRxRyRz16
    0U,	// AndRxRxRy16
    0U,	// B
    0U,	// BADDu
    0U,	// BAL
    0U,	// BALC
    0U,	// BALIGN
    0U,	// BAL_BR
    0U,	// BC
    0U,	// BC1EQZ
    0U,	// BC1F
    0U,	// BC1FL
    0U,	// BC1F_MM
    0U,	// BC1NEZ
    0U,	// BC1T
    0U,	// BC1TL
    0U,	// BC1T_MM
    0U,	// BC2EQZ
    0U,	// BC2NEZ
    0U,	// BCLRI_B
    0U,	// BCLRI_D
    0U,	// BCLRI_H
    0U,	// BCLRI_W
    0U,	// BCLR_B
    0U,	// BCLR_D
    0U,	// BCLR_H
    0U,	// BCLR_W
    0U,	// BEQ
    0U,	// BEQ64
    0U,	// BEQC
    0U,	// BEQL
    0U,	// BEQZALC
    0U,	// BEQZC
    0U,	// BEQZC_MM
    0U,	// BEQ_MM
    0U,	// BGEC
    0U,	// BGEUC
    0U,	// BGEZ
    0U,	// BGEZ64
    0U,	// BGEZAL
    0U,	// BGEZALC
    0U,	// BGEZALL
    0U,	// BGEZALS_MM
    0U,	// BGEZAL_MM
    0U,	// BGEZC
    0U,	// BGEZL
    0U,	// BGEZ_MM
    0U,	// BGTZ
    0U,	// BGTZ64
    0U,	// BGTZALC
    0U,	// BGTZC
    0U,	// BGTZL
    0U,	// BGTZ_MM
    0U,	// BINSLI_B
    0U,	// BINSLI_D
    0U,	// BINSLI_H
    0U,	// BINSLI_W
    0U,	// BINSL_B
    0U,	// BINSL_D
    0U,	// BINSL_H
    0U,	// BINSL_W
    0U,	// BINSRI_B
    0U,	// BINSRI_D
    0U,	// BINSRI_H
    0U,	// BINSRI_W
    0U,	// BINSR_B
    0U,	// BINSR_D
    0U,	// BINSR_H
    0U,	// BINSR_W
    0U,	// BITREV
    0U,	// BITSWAP
    0U,	// BLEZ
    0U,	// BLEZ64
    0U,	// BLEZALC
    0U,	// BLEZC
    0U,	// BLEZL
    0U,	// BLEZ_MM
    0U,	// BLTC
    0U,	// BLTUC
    0U,	// BLTZ
    0U,	// BLTZ64
    0U,	// BLTZAL
    0U,	// BLTZALC
    0U,	// BLTZALL
    0U,	// BLTZALS_MM
    0U,	// BLTZAL_MM
    0U,	// BLTZC
    0U,	// BLTZL
    0U,	// BLTZ_MM
    0U,	// BMNZI_B
    0U,	// BMNZ_V
    0U,	// BMZI_B
    0U,	// BMZ_V
    0U,	// BNE
    0U,	// BNE64
    0U,	// BNEC
    0U,	// BNEGI_B
    0U,	// BNEGI_D
    0U,	// BNEGI_H
    0U,	// BNEGI_W
    0U,	// BNEG_B
    0U,	// BNEG_D
    0U,	// BNEG_H
    0U,	// BNEG_W
    0U,	// BNEL
    0U,	// BNEZALC
    0U,	// BNEZC
    0U,	// BNEZC_MM
    0U,	// BNE_MM
    0U,	// BNVC
    0U,	// BNZ_B
    0U,	// BNZ_D
    0U,	// BNZ_H
    0U,	// BNZ_V
    0U,	// BNZ_W
    0U,	// BOVC
    0U,	// BPOSGE32
    0U,	// BPOSGE32_PSEUDO
    0U,	// BREAK
    0U,	// BREAK_MM
    0U,	// BSELI_B
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    0U,	// BSEL_V
    0U,	// BSEL_W_PSEUDO
    0U,	// BSETI_B
    0U,	// BSETI_D
    0U,	// BSETI_H
    0U,	// BSETI_W
    0U,	// BSET_B
    0U,	// BSET_D
    0U,	// BSET_H
    0U,	// BSET_W
    0U,	// BZ_B
    0U,	// BZ_D
    0U,	// BZ_H
    0U,	// BZ_V
    0U,	// BZ_W
    0U,	// BeqzRxImm16
    0U,	// BeqzRxImmX16
    0U,	// Bimm16
    0U,	// BimmX16
    0U,	// BnezRxImm16
    0U,	// BnezRxImmX16
    0U,	// Break16
    0U,	// Bteqz16
    0U,	// BteqzT8CmpX16
    0U,	// BteqzT8CmpiX16
    0U,	// BteqzT8SltX16
    0U,	// BteqzT8SltiX16
    0U,	// BteqzT8SltiuX16
    0U,	// BteqzT8SltuX16
    0U,	// BteqzX16
    0U,	// Btnez16
    0U,	// BtnezT8CmpX16
    0U,	// BtnezT8CmpiX16
    0U,	// BtnezT8SltX16
    0U,	// BtnezT8SltiX16
    0U,	// BtnezT8SltiuX16
    0U,	// BtnezT8SltuX16
    0U,	// BtnezX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    0U,	// CACHE
    0U,	// CACHE_R6
    0U,	// CEIL_L_D64
    0U,	// CEIL_L_S
    0U,	// CEIL_W_D32
    0U,	// CEIL_W_D64
    0U,	// CEIL_W_MM
    0U,	// CEIL_W_S
    0U,	// CEIL_W_S_MM
    0U,	// CEQI_B
    0U,	// CEQI_D
    0U,	// CEQI_H
    0U,	// CEQI_W
    0U,	// CEQ_B
    0U,	// CEQ_D
    0U,	// CEQ_H
    0U,	// CEQ_W
    0U,	// CFC1
    0U,	// CFC1_MM
    0U,	// CFCMSA
    1U,	// CINS
    1U,	// CINS32
    0U,	// CLASS_D
    0U,	// CLASS_S
    0U,	// CLEI_S_B
    0U,	// CLEI_S_D
    0U,	// CLEI_S_H
    0U,	// CLEI_S_W
    0U,	// CLEI_U_B
    0U,	// CLEI_U_D
    0U,	// CLEI_U_H
    0U,	// CLEI_U_W
    0U,	// CLE_S_B
    0U,	// CLE_S_D
    0U,	// CLE_S_H
    0U,	// CLE_S_W
    0U,	// CLE_U_B
    0U,	// CLE_U_D
    0U,	// CLE_U_H
    0U,	// CLE_U_W
    0U,	// CLO
    0U,	// CLO_MM
    0U,	// CLO_R6
    0U,	// CLTI_S_B
    0U,	// CLTI_S_D
    0U,	// CLTI_S_H
    0U,	// CLTI_S_W
    0U,	// CLTI_U_B
    0U,	// CLTI_U_D
    0U,	// CLTI_U_H
    0U,	// CLTI_U_W
    0U,	// CLT_S_B
    0U,	// CLT_S_D
    0U,	// CLT_S_H
    0U,	// CLT_S_W
    0U,	// CLT_U_B
    0U,	// CLT_U_D
    0U,	// CLT_U_H
    0U,	// CLT_U_W
    0U,	// CLZ
    0U,	// CLZ_MM
    0U,	// CLZ_R6
    0U,	// CMPGDU_EQ_QB
    0U,	// CMPGDU_LE_QB
    0U,	// CMPGDU_LT_QB
    0U,	// CMPGU_EQ_QB
    0U,	// CMPGU_LE_QB
    0U,	// CMPGU_LT_QB
    0U,	// CMPU_EQ_QB
    0U,	// CMPU_LE_QB
    0U,	// CMPU_LT_QB
    0U,	// CMP_EQ_D
    0U,	// CMP_EQ_PH
    0U,	// CMP_EQ_S
    0U,	// CMP_F_D
    0U,	// CMP_F_S
    0U,	// CMP_LE_D
    0U,	// CMP_LE_PH
    0U,	// CMP_LE_S
    0U,	// CMP_LT_D
    0U,	// CMP_LT_PH
    0U,	// CMP_LT_S
    0U,	// CMP_SAF_D
    0U,	// CMP_SAF_S
    0U,	// CMP_SEQ_D
    0U,	// CMP_SEQ_S
    0U,	// CMP_SLE_D
    0U,	// CMP_SLE_S
    0U,	// CMP_SLT_D
    0U,	// CMP_SLT_S
    0U,	// CMP_SUEQ_D
    0U,	// CMP_SUEQ_S
    0U,	// CMP_SULE_D
    0U,	// CMP_SULE_S
    0U,	// CMP_SULT_D
    0U,	// CMP_SULT_S
    0U,	// CMP_SUN_D
    0U,	// CMP_SUN_S
    0U,	// CMP_UEQ_D
    0U,	// CMP_UEQ_S
    0U,	// CMP_ULE_D
    0U,	// CMP_ULE_S
    0U,	// CMP_ULT_D
    0U,	// CMP_ULT_S
    0U,	// CMP_UN_D
    0U,	// CMP_UN_S
    0U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    2U,	// COPY_S_B
    2U,	// COPY_S_D
    2U,	// COPY_S_H
    2U,	// COPY_S_W
    2U,	// COPY_U_B
    2U,	// COPY_U_D
    2U,	// COPY_U_H
    2U,	// COPY_U_W
    0U,	// CTC1
    0U,	// CTC1_MM
    0U,	// CTCMSA
    0U,	// CVT_D32_S
    0U,	// CVT_D32_W
    0U,	// CVT_D32_W_MM
    0U,	// CVT_D64_L
    0U,	// CVT_D64_S
    0U,	// CVT_D64_W
    0U,	// CVT_D_S_MM
    0U,	// CVT_L_D64
    0U,	// CVT_L_D64_MM
    0U,	// CVT_L_S
    0U,	// CVT_L_S_MM
    0U,	// CVT_S_D32
    0U,	// CVT_S_D32_MM
    0U,	// CVT_S_D64
    0U,	// CVT_S_L
    0U,	// CVT_S_W
    0U,	// CVT_S_W_MM
    0U,	// CVT_W_D32
    0U,	// CVT_W_D64
    0U,	// CVT_W_MM
    0U,	// CVT_W_S
    0U,	// CVT_W_S_MM
    0U,	// C_EQ_D32
    0U,	// C_EQ_D64
    0U,	// C_EQ_S
    0U,	// C_F_D32
    0U,	// C_F_D64
    0U,	// C_F_S
    0U,	// C_LE_D32
    0U,	// C_LE_D64
    0U,	// C_LE_S
    0U,	// C_LT_D32
    0U,	// C_LT_D64
    0U,	// C_LT_S
    0U,	// C_NGE_D32
    0U,	// C_NGE_D64
    0U,	// C_NGE_S
    0U,	// C_NGLE_D32
    0U,	// C_NGLE_D64
    0U,	// C_NGLE_S
    0U,	// C_NGL_D32
    0U,	// C_NGL_D64
    0U,	// C_NGL_S
    0U,	// C_NGT_D32
    0U,	// C_NGT_D64
    0U,	// C_NGT_S
    0U,	// C_OLE_D32
    0U,	// C_OLE_D64
    0U,	// C_OLE_S
    0U,	// C_OLT_D32
    0U,	// C_OLT_D64
    0U,	// C_OLT_S
    0U,	// C_SEQ_D32
    0U,	// C_SEQ_D64
    0U,	// C_SEQ_S
    0U,	// C_SF_D32
    0U,	// C_SF_D64
    0U,	// C_SF_S
    0U,	// C_UEQ_D32
    0U,	// C_UEQ_D64
    0U,	// C_UEQ_S
    0U,	// C_ULE_D32
    0U,	// C_ULE_D64
    0U,	// C_ULE_S
    0U,	// C_ULT_D32
    0U,	// C_ULT_D64
    0U,	// C_ULT_S
    0U,	// C_UN_D32
    0U,	// C_UN_D64
    0U,	// C_UN_S
    0U,	// CmpRxRy16
    0U,	// CmpiRxImm16
    0U,	// CmpiRxImmX16
    0U,	// Constant32
    0U,	// DADD
    0U,	// DADDi
    0U,	// DADDiu
    0U,	// DADDu
    0U,	// DAHI
    1U,	// DALIGN
    0U,	// DATI
    0U,	// DAUI
    0U,	// DBITSWAP
    0U,	// DCLO
    0U,	// DCLO_R6
    0U,	// DCLZ
    0U,	// DCLZ_R6
    0U,	// DDIV
    0U,	// DDIVU
    0U,	// DERET
    0U,	// DERET_MM
    5U,	// DEXT
    5U,	// DEXTM
    5U,	// DEXTU
    0U,	// DI
    5U,	// DINS
    5U,	// DINSM
    5U,	// DINSU
    0U,	// DIV
    0U,	// DIVU
    0U,	// DIV_S_B
    0U,	// DIV_S_D
    0U,	// DIV_S_H
    0U,	// DIV_S_W
    0U,	// DIV_U_B
    0U,	// DIV_U_D
    0U,	// DIV_U_H
    0U,	// DIV_U_W
    0U,	// DI_MM
    1U,	// DLSA
    1U,	// DLSA_R6
    0U,	// DMFC0
    0U,	// DMFC1
    0U,	// DMFC2
    0U,	// DMOD
    0U,	// DMODU
    0U,	// DMTC0
    0U,	// DMTC1
    0U,	// DMTC2
    0U,	// DMUH
    0U,	// DMUHU
    0U,	// DMUL
    0U,	// DMULT
    0U,	// DMULTu
    0U,	// DMULU
    0U,	// DMUL_R6
    0U,	// DOTP_S_D
    0U,	// DOTP_S_H
    0U,	// DOTP_S_W
    0U,	// DOTP_U_D
    0U,	// DOTP_U_H
    0U,	// DOTP_U_W
    0U,	// DPADD_S_D
    0U,	// DPADD_S_H
    0U,	// DPADD_S_W
    0U,	// DPADD_U_D
    0U,	// DPADD_U_H
    0U,	// DPADD_U_W
    0U,	// DPAQX_SA_W_PH
    0U,	// DPAQX_S_W_PH
    0U,	// DPAQ_SA_L_W
    0U,	// DPAQ_S_W_PH
    0U,	// DPAU_H_QBL
    0U,	// DPAU_H_QBR
    0U,	// DPAX_W_PH
    0U,	// DPA_W_PH
    0U,	// DPOP
    0U,	// DPSQX_SA_W_PH
    0U,	// DPSQX_S_W_PH
    0U,	// DPSQ_SA_L_W
    0U,	// DPSQ_S_W_PH
    0U,	// DPSUB_S_D
    0U,	// DPSUB_S_H
    0U,	// DPSUB_S_W
    0U,	// DPSUB_U_D
    0U,	// DPSUB_U_H
    0U,	// DPSUB_U_W
    0U,	// DPSU_H_QBL
    0U,	// DPSU_H_QBR
    0U,	// DPSX_W_PH
    0U,	// DPS_W_PH
    0U,	// DROTR
    0U,	// DROTR32
    0U,	// DROTRV
    0U,	// DSBH
    0U,	// DSDIV
    0U,	// DSHD
    0U,	// DSLL
    0U,	// DSLL32
    0U,	// DSLL64_32
    0U,	// DSLLV
    0U,	// DSRA
    0U,	// DSRA32
    0U,	// DSRAV
    0U,	// DSRL
    0U,	// DSRL32
    0U,	// DSRLV
    0U,	// DSUB
    0U,	// DSUBu
    0U,	// DUDIV
    0U,	// DivRxRy16
    0U,	// DivuRxRy16
    0U,	// EHB
    0U,	// EI
    0U,	// EI_MM
    0U,	// ERET
    0U,	// ERET_MM
    5U,	// EXT
    0U,	// EXTP
    0U,	// EXTPDP
    0U,	// EXTPDPV
    0U,	// EXTPV
    0U,	// EXTRV_RS_W
    0U,	// EXTRV_R_W
    0U,	// EXTRV_S_H
    0U,	// EXTRV_W
    0U,	// EXTR_RS_W
    0U,	// EXTR_R_W
    0U,	// EXTR_S_H
    0U,	// EXTR_W
    1U,	// EXTS
    1U,	// EXTS32
    5U,	// EXT_MM
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    0U,	// FABS_D32
    0U,	// FABS_D64
    0U,	// FABS_MM
    0U,	// FABS_S
    0U,	// FABS_S_MM
    0U,	// FABS_W
    0U,	// FADD_D
    0U,	// FADD_D32
    0U,	// FADD_D64
    0U,	// FADD_MM
    0U,	// FADD_S
    0U,	// FADD_S_MM
    0U,	// FADD_W
    0U,	// FCAF_D
    0U,	// FCAF_W
    0U,	// FCEQ_D
    0U,	// FCEQ_W
    0U,	// FCLASS_D
    0U,	// FCLASS_W
    0U,	// FCLE_D
    0U,	// FCLE_W
    0U,	// FCLT_D
    0U,	// FCLT_W
    0U,	// FCMP_D32
    0U,	// FCMP_D32_MM
    0U,	// FCMP_D64
    0U,	// FCMP_S32
    0U,	// FCMP_S32_MM
    0U,	// FCNE_D
    0U,	// FCNE_W
    0U,	// FCOR_D
    0U,	// FCOR_W
    0U,	// FCUEQ_D
    0U,	// FCUEQ_W
    0U,	// FCULE_D
    0U,	// FCULE_W
    0U,	// FCULT_D
    0U,	// FCULT_W
    0U,	// FCUNE_D
    0U,	// FCUNE_W
    0U,	// FCUN_D
    0U,	// FCUN_W
    0U,	// FDIV_D
    0U,	// FDIV_D32
    0U,	// FDIV_D64
    0U,	// FDIV_MM
    0U,	// FDIV_S
    0U,	// FDIV_S_MM
    0U,	// FDIV_W
    0U,	// FEXDO_H
    0U,	// FEXDO_W
    0U,	// FEXP2_D
    0U,	// FEXP2_D_1_PSEUDO
    0U,	// FEXP2_W
    0U,	// FEXP2_W_1_PSEUDO
    0U,	// FEXUPL_D
    0U,	// FEXUPL_W
    0U,	// FEXUPR_D
    0U,	// FEXUPR_W
    0U,	// FFINT_S_D
    0U,	// FFINT_S_W
    0U,	// FFINT_U_D
    0U,	// FFINT_U_W
    0U,	// FFQL_D
    0U,	// FFQL_W
    0U,	// FFQR_D
    0U,	// FFQR_W
    0U,	// FILL_B
    0U,	// FILL_D
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    0U,	// FILL_H
    0U,	// FILL_W
    0U,	// FLOG2_D
    0U,	// FLOG2_W
    0U,	// FLOOR_L_D64
    0U,	// FLOOR_L_S
    0U,	// FLOOR_W_D32
    0U,	// FLOOR_W_D64
    0U,	// FLOOR_W_MM
    0U,	// FLOOR_W_S
    0U,	// FLOOR_W_S_MM
    0U,	// FMADD_D
    0U,	// FMADD_W
    0U,	// FMAX_A_D
    0U,	// FMAX_A_W
    0U,	// FMAX_D
    0U,	// FMAX_W
    0U,	// FMIN_A_D
    0U,	// FMIN_A_W
    0U,	// FMIN_D
    0U,	// FMIN_W
    0U,	// FMOV_D32
    0U,	// FMOV_D32_MM
    0U,	// FMOV_D64
    0U,	// FMOV_S
    0U,	// FMOV_S_MM
    0U,	// FMSUB_D
    0U,	// FMSUB_W
    0U,	// FMUL_D
    0U,	// FMUL_D32
    0U,	// FMUL_D64
    0U,	// FMUL_MM
    0U,	// FMUL_S
    0U,	// FMUL_S_MM
    0U,	// FMUL_W
    0U,	// FNEG_D32
    0U,	// FNEG_D64
    0U,	// FNEG_MM
    0U,	// FNEG_S
    0U,	// FNEG_S_MM
    0U,	// FRCP_D
    0U,	// FRCP_W
    0U,	// FRINT_D
    0U,	// FRINT_W
    0U,	// FRSQRT_D
    0U,	// FRSQRT_W
    0U,	// FSAF_D
    0U,	// FSAF_W
    0U,	// FSEQ_D
    0U,	// FSEQ_W
    0U,	// FSLE_D
    0U,	// FSLE_W
    0U,	// FSLT_D
    0U,	// FSLT_W
    0U,	// FSNE_D
    0U,	// FSNE_W
    0U,	// FSOR_D
    0U,	// FSOR_W
    0U,	// FSQRT_D
    0U,	// FSQRT_D32
    0U,	// FSQRT_D64
    0U,	// FSQRT_MM
    0U,	// FSQRT_S
    0U,	// FSQRT_S_MM
    0U,	// FSQRT_W
    0U,	// FSUB_D
    0U,	// FSUB_D32
    0U,	// FSUB_D64
    0U,	// FSUB_MM
    0U,	// FSUB_S
    0U,	// FSUB_S_MM
    0U,	// FSUB_W
    0U,	// FSUEQ_D
    0U,	// FSUEQ_W
    0U,	// FSULE_D
    0U,	// FSULE_W
    0U,	// FSULT_D
    0U,	// FSULT_W
    0U,	// FSUNE_D
    0U,	// FSUNE_W
    0U,	// FSUN_D
    0U,	// FSUN_W
    0U,	// FTINT_S_D
    0U,	// FTINT_S_W
    0U,	// FTINT_U_D
    0U,	// FTINT_U_W
    0U,	// FTQ_H
    0U,	// FTQ_W
    0U,	// FTRUNC_S_D
    0U,	// FTRUNC_S_W
    0U,	// FTRUNC_U_D
    0U,	// FTRUNC_U_W
    0U,	// GotPrologue16
    0U,	// HADD_S_D
    0U,	// HADD_S_H
    0U,	// HADD_S_W
    0U,	// HADD_U_D
    0U,	// HADD_U_H
    0U,	// HADD_U_W
    0U,	// HSUB_S_D
    0U,	// HSUB_S_H
    0U,	// HSUB_S_W
    0U,	// HSUB_U_D
    0U,	// HSUB_U_H
    0U,	// HSUB_U_W
    0U,	// ILVEV_B
    0U,	// ILVEV_D
    0U,	// ILVEV_H
    0U,	// ILVEV_W
    0U,	// ILVL_B
    0U,	// ILVL_D
    0U,	// ILVL_H
    0U,	// ILVL_W
    0U,	// ILVOD_B
    0U,	// ILVOD_D
    0U,	// ILVOD_H
    0U,	// ILVOD_W
    0U,	// ILVR_B
    0U,	// ILVR_D
    0U,	// ILVR_H
    0U,	// ILVR_W
    5U,	// INS
    0U,	// INSERT_B
    0U,	// INSERT_B_VIDX_PSEUDO
    0U,	// INSERT_D
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    0U,	// INSERT_H
    0U,	// INSERT_H_VIDX_PSEUDO
    0U,	// INSERT_W
    0U,	// INSERT_W_VIDX_PSEUDO
    0U,	// INSV
    0U,	// INSVE_B
    0U,	// INSVE_D
    0U,	// INSVE_H
    0U,	// INSVE_W
    5U,	// INS_MM
    0U,	// J
    0U,	// JAL
    0U,	// JALR
    0U,	// JALR16_MM
    0U,	// JALR64
    0U,	// JALR64Pseudo
    0U,	// JALRPseudo
    0U,	// JALRS16_MM
    0U,	// JALRS_MM
    0U,	// JALR_HB
    0U,	// JALR_MM
    0U,	// JALS_MM
    0U,	// JALX
    0U,	// JAL_MM
    0U,	// JIALC
    0U,	// JIC
    0U,	// JR
    0U,	// JR16_MM
    0U,	// JR64
    0U,	// JRADDIUSP
    0U,	// JRC16_MM
    0U,	// JR_HB
    0U,	// JR_HB_R6
    0U,	// JR_MM
    0U,	// J_MM
    0U,	// Jal16
    0U,	// JalB16
    0U,	// JrRa16
    0U,	// JrcRa16
    0U,	// JrcRx16
    0U,	// JumpLinkReg16
    0U,	// LB
    0U,	// LB64
    0U,	// LBUX
    0U,	// LB_MM
    0U,	// LBu
    0U,	// LBu64
    0U,	// LBu_MM
    0U,	// LD
    0U,	// LDC1
    0U,	// LDC164
    0U,	// LDC1_MM
    0U,	// LDC2
    0U,	// LDC2_R6
    0U,	// LDC3
    0U,	// LDI_B
    0U,	// LDI_D
    0U,	// LDI_H
    0U,	// LDI_W
    0U,	// LDL
    0U,	// LDPC
    0U,	// LDR
    0U,	// LDXC1
    0U,	// LDXC164
    0U,	// LD_B
    0U,	// LD_D
    0U,	// LD_H
    0U,	// LD_W
    0U,	// LEA_ADDiu
    0U,	// LEA_ADDiu64
    0U,	// LEA_ADDiu_MM
    0U,	// LH
    0U,	// LH64
    0U,	// LHX
    0U,	// LH_MM
    0U,	// LHu
    0U,	// LHu64
    0U,	// LHu_MM
    0U,	// LI16_MM
    0U,	// LL
    0U,	// LLD
    0U,	// LLD_R6
    0U,	// LL_MM
    0U,	// LL_R6
    0U,	// LOAD_ACC128
    0U,	// LOAD_ACC64
    0U,	// LOAD_ACC64DSP
    0U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_LUi
    1U,	// LSA
    1U,	// LSA_R6
    0U,	// LUXC1
    0U,	// LUXC164
    0U,	// LUXC1_MM
    0U,	// LUi
    0U,	// LUi64
    0U,	// LUi_MM
    0U,	// LW
    0U,	// LW64
    0U,	// LWC1
    0U,	// LWC1_MM
    0U,	// LWC2
    0U,	// LWC2_R6
    0U,	// LWC3
    0U,	// LWL
    0U,	// LWL64
    0U,	// LWL_MM
    0U,	// LWPC
    0U,	// LWR
    0U,	// LWR64
    0U,	// LWR_MM
    0U,	// LWUPC
    0U,	// LWU_MM
    0U,	// LWX
    0U,	// LWXC1
    0U,	// LWXC1_MM
    0U,	// LW_MM
    0U,	// LWu
    0U,	// LbRxRyOffMemX16
    0U,	// LbuRxRyOffMemX16
    0U,	// LhRxRyOffMemX16
    0U,	// LhuRxRyOffMemX16
    0U,	// LiRxImm16
    0U,	// LiRxImmAlignX16
    0U,	// LiRxImmX16
    0U,	// LoadAddr32Imm
    0U,	// LoadAddr32Reg
    0U,	// LoadImm32Reg
    0U,	// LoadImm64Reg
    0U,	// LwConstant32
    0U,	// LwRxPcTcp16
    0U,	// LwRxPcTcpX16
    0U,	// LwRxRyOffMemX16
    0U,	// LwRxSpImmX16
    0U,	// MADD
    0U,	// MADDF_D
    0U,	// MADDF_S
    0U,	// MADDR_Q_H
    0U,	// MADDR_Q_W
    0U,	// MADDU
    0U,	// MADDU_DSP
    0U,	// MADDU_MM
    0U,	// MADDV_B
    0U,	// MADDV_D
    0U,	// MADDV_H
    0U,	// MADDV_W
    5U,	// MADD_D32
    5U,	// MADD_D32_MM
    5U,	// MADD_D64
    0U,	// MADD_DSP
    0U,	// MADD_MM
    0U,	// MADD_Q_H
    0U,	// MADD_Q_W
    5U,	// MADD_S
    5U,	// MADD_S_MM
    0U,	// MAQ_SA_W_PHL
    0U,	// MAQ_SA_W_PHR
    0U,	// MAQ_S_W_PHL
    0U,	// MAQ_S_W_PHR
    0U,	// MAXA_D
    0U,	// MAXA_S
    0U,	// MAXI_S_B
    0U,	// MAXI_S_D
    0U,	// MAXI_S_H
    0U,	// MAXI_S_W
    0U,	// MAXI_U_B
    0U,	// MAXI_U_D
    0U,	// MAXI_U_H
    0U,	// MAXI_U_W
    0U,	// MAX_A_B
    0U,	// MAX_A_D
    0U,	// MAX_A_H
    0U,	// MAX_A_W
    0U,	// MAX_D
    0U,	// MAX_S
    0U,	// MAX_S_B
    0U,	// MAX_S_D
    0U,	// MAX_S_H
    0U,	// MAX_S_W
    0U,	// MAX_U_B
    0U,	// MAX_U_D
    0U,	// MAX_U_H
    0U,	// MAX_U_W
    0U,	// MFC0
    0U,	// MFC1
    0U,	// MFC1_MM
    0U,	// MFC2
    0U,	// MFHC1_D32
    0U,	// MFHC1_D64
    0U,	// MFHC1_MM
    0U,	// MFHI
    0U,	// MFHI16_MM
    0U,	// MFHI64
    0U,	// MFHI_DSP
    0U,	// MFHI_MM
    0U,	// MFLO
    0U,	// MFLO16_MM
    0U,	// MFLO64
    0U,	// MFLO_DSP
    0U,	// MFLO_MM
    0U,	// MINA_D
    0U,	// MINA_S
    0U,	// MINI_S_B
    0U,	// MINI_S_D
    0U,	// MINI_S_H
    0U,	// MINI_S_W
    0U,	// MINI_U_B
    0U,	// MINI_U_D
    0U,	// MINI_U_H
    0U,	// MINI_U_W
    0U,	// MIN_A_B
    0U,	// MIN_A_D
    0U,	// MIN_A_H
    0U,	// MIN_A_W
    0U,	// MIN_D
    0U,	// MIN_S
    0U,	// MIN_S_B
    0U,	// MIN_S_D
    0U,	// MIN_S_H
    0U,	// MIN_S_W
    0U,	// MIN_U_B
    0U,	// MIN_U_D
    0U,	// MIN_U_H
    0U,	// MIN_U_W
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    0U,	// MOD
    0U,	// MODSUB
    0U,	// MODU
    0U,	// MOD_S_B
    0U,	// MOD_S_D
    0U,	// MOD_S_H
    0U,	// MOD_S_W
    0U,	// MOD_U_B
    0U,	// MOD_U_D
    0U,	// MOD_U_H
    0U,	// MOD_U_W
    0U,	// MOVE16_MM
    0U,	// MOVE_V
    0U,	// MOVF_D32
    0U,	// MOVF_D32_MM
    0U,	// MOVF_D64
    0U,	// MOVF_I
    0U,	// MOVF_I64
    0U,	// MOVF_I_MM
    0U,	// MOVF_S
    0U,	// MOVF_S_MM
    0U,	// MOVN_I64_D64
    0U,	// MOVN_I64_I
    0U,	// MOVN_I64_I64
    0U,	// MOVN_I64_S
    0U,	// MOVN_I_D32
    0U,	// MOVN_I_D32_MM
    0U,	// MOVN_I_D64
    0U,	// MOVN_I_I
    0U,	// MOVN_I_I64
    0U,	// MOVN_I_MM
    0U,	// MOVN_I_S
    0U,	// MOVN_I_S_MM
    0U,	// MOVT_D32
    0U,	// MOVT_D32_MM
    0U,	// MOVT_D64
    0U,	// MOVT_I
    0U,	// MOVT_I64
    0U,	// MOVT_I_MM
    0U,	// MOVT_S
    0U,	// MOVT_S_MM
    0U,	// MOVZ_I64_D64
    0U,	// MOVZ_I64_I
    0U,	// MOVZ_I64_I64
    0U,	// MOVZ_I64_S
    0U,	// MOVZ_I_D32
    0U,	// MOVZ_I_D32_MM
    0U,	// MOVZ_I_D64
    0U,	// MOVZ_I_I
    0U,	// MOVZ_I_I64
    0U,	// MOVZ_I_MM
    0U,	// MOVZ_I_S
    0U,	// MOVZ_I_S_MM
    0U,	// MSUB
    0U,	// MSUBF_D
    0U,	// MSUBF_S
    0U,	// MSUBR_Q_H
    0U,	// MSUBR_Q_W
    0U,	// MSUBU
    0U,	// MSUBU_DSP
    0U,	// MSUBU_MM
    0U,	// MSUBV_B
    0U,	// MSUBV_D
    0U,	// MSUBV_H
    0U,	// MSUBV_W
    5U,	// MSUB_D32
    5U,	// MSUB_D32_MM
    5U,	// MSUB_D64
    0U,	// MSUB_DSP
    0U,	// MSUB_MM
    0U,	// MSUB_Q_H
    0U,	// MSUB_Q_W
    5U,	// MSUB_S
    5U,	// MSUB_S_MM
    0U,	// MTC0
    0U,	// MTC1
    0U,	// MTC1_MM
    0U,	// MTC2
    0U,	// MTHC1_D32
    0U,	// MTHC1_D64
    0U,	// MTHC1_MM
    0U,	// MTHI
    0U,	// MTHI64
    0U,	// MTHI_DSP
    0U,	// MTHI_MM
    0U,	// MTHLIP
    0U,	// MTLO
    0U,	// MTLO64
    0U,	// MTLO_DSP
    0U,	// MTLO_MM
    0U,	// MTM0
    0U,	// MTM1
    0U,	// MTM2
    0U,	// MTP0
    0U,	// MTP1
    0U,	// MTP2
    0U,	// MUH
    0U,	// MUHU
    0U,	// MUL
    0U,	// MULEQ_S_W_PHL
    0U,	// MULEQ_S_W_PHR
    0U,	// MULEU_S_PH_QBL
    0U,	// MULEU_S_PH_QBR
    0U,	// MULQ_RS_PH
    0U,	// MULQ_RS_W
    0U,	// MULQ_S_PH
    0U,	// MULQ_S_W
    0U,	// MULR_Q_H
    0U,	// MULR_Q_W
    0U,	// MULSAQ_S_W_PH
    0U,	// MULSA_W_PH
    0U,	// MULT
    0U,	// MULTU_DSP
    0U,	// MULT_DSP
    0U,	// MULT_MM
    0U,	// MULTu
    0U,	// MULTu_MM
    0U,	// MULU
    0U,	// MULV_B
    0U,	// MULV_D
    0U,	// MULV_H
    0U,	// MULV_W
    0U,	// MUL_MM
    0U,	// MUL_PH
    0U,	// MUL_Q_H
    0U,	// MUL_Q_W
    0U,	// MUL_R6
    0U,	// MUL_S_PH
    0U,	// Mfhi16
    0U,	// Mflo16
    0U,	// Move32R16
    0U,	// MoveR3216
    0U,	// MultRxRy16
    0U,	// MultRxRyRz16
    0U,	// MultuRxRy16
    0U,	// MultuRxRyRz16
    0U,	// NLOC_B
    0U,	// NLOC_D
    0U,	// NLOC_H
    0U,	// NLOC_W
    0U,	// NLZC_B
    0U,	// NLZC_D
    0U,	// NLZC_H
    0U,	// NLZC_W
    5U,	// NMADD_D32
    5U,	// NMADD_D32_MM
    5U,	// NMADD_D64
    5U,	// NMADD_S
    5U,	// NMADD_S_MM
    5U,	// NMSUB_D32
    5U,	// NMSUB_D32_MM
    5U,	// NMSUB_D64
    5U,	// NMSUB_S
    5U,	// NMSUB_S_MM
    0U,	// NOP
    0U,	// NOR
    0U,	// NOR64
    0U,	// NORI_B
    0U,	// NOR_MM
    0U,	// NOR_V
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    0U,	// NOT16_MM
    0U,	// NegRxRy16
    0U,	// NotRxRy16
    0U,	// OR
    0U,	// OR16_MM
    0U,	// OR64
    0U,	// ORI_B
    0U,	// OR_MM
    0U,	// OR_V
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    0U,	// ORi
    0U,	// ORi64
    0U,	// ORi_MM
    0U,	// OrRxRxRy16
    0U,	// PACKRL_PH
    0U,	// PAUSE
    0U,	// PCKEV_B
    0U,	// PCKEV_D
    0U,	// PCKEV_H
    0U,	// PCKEV_W
    0U,	// PCKOD_B
    0U,	// PCKOD_D
    0U,	// PCKOD_H
    0U,	// PCKOD_W
    0U,	// PCNT_B
    0U,	// PCNT_D
    0U,	// PCNT_H
    0U,	// PCNT_W
    0U,	// PICK_PH
    0U,	// PICK_QB
    0U,	// POP
    0U,	// PRECEQU_PH_QBL
    0U,	// PRECEQU_PH_QBLA
    0U,	// PRECEQU_PH_QBR
    0U,	// PRECEQU_PH_QBRA
    0U,	// PRECEQ_W_PHL
    0U,	// PRECEQ_W_PHR
    0U,	// PRECEU_PH_QBL
    0U,	// PRECEU_PH_QBLA
    0U,	// PRECEU_PH_QBR
    0U,	// PRECEU_PH_QBRA
    0U,	// PRECRQU_S_QB_PH
    0U,	// PRECRQ_PH_W
    0U,	// PRECRQ_QB_PH
    0U,	// PRECRQ_RS_PH_W
    0U,	// PRECR_QB_PH
    0U,	// PRECR_SRA_PH_W
    0U,	// PRECR_SRA_R_PH_W
    0U,	// PREF
    0U,	// PREF_R6
    0U,	// PREPEND
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    0U,	// PseudoCVT_D32_W
    0U,	// PseudoCVT_D64_L
    0U,	// PseudoCVT_D64_W
    0U,	// PseudoCVT_S_L
    0U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoUDIV
    0U,	// RADDU_W_QB
    0U,	// RDDSP
    0U,	// RDHWR
    0U,	// RDHWR64
    0U,	// REPLV_PH
    0U,	// REPLV_QB
    0U,	// REPL_PH
    0U,	// REPL_QB
    0U,	// RINT_D
    0U,	// RINT_S
    0U,	// ROTR
    0U,	// ROTRV
    0U,	// ROTRV_MM
    0U,	// ROTR_MM
    0U,	// ROUND_L_D64
    0U,	// ROUND_L_S
    0U,	// ROUND_W_D32
    0U,	// ROUND_W_D64
    0U,	// ROUND_W_MM
    0U,	// ROUND_W_S
    0U,	// ROUND_W_S_MM
    0U,	// Restore16
    0U,	// RestoreX16
    0U,	// RetRA
    0U,	// RetRA16
    0U,	// SAT_S_B
    0U,	// SAT_S_D
    0U,	// SAT_S_H
    0U,	// SAT_S_W
    0U,	// SAT_U_B
    0U,	// SAT_U_D
    0U,	// SAT_U_H
    0U,	// SAT_U_W
    0U,	// SB
    0U,	// SB64
    0U,	// SB_MM
    0U,	// SC
    0U,	// SCD
    0U,	// SCD_R6
    0U,	// SC_MM
    0U,	// SC_R6
    0U,	// SD
    0U,	// SDBBP
    0U,	// SDBBP_R6
    0U,	// SDC1
    0U,	// SDC164
    0U,	// SDC1_MM
    0U,	// SDC2
    0U,	// SDC2_R6
    0U,	// SDC3
    0U,	// SDIV
    0U,	// SDIV_MM
    0U,	// SDL
    0U,	// SDR
    0U,	// SDXC1
    0U,	// SDXC164
    0U,	// SEB
    0U,	// SEB64
    0U,	// SEB_MM
    0U,	// SEH
    0U,	// SEH64
    0U,	// SEH_MM
    0U,	// SELEQZ
    0U,	// SELEQZ64
    0U,	// SELEQZ_D
    0U,	// SELEQZ_S
    0U,	// SELNEZ
    0U,	// SELNEZ64
    0U,	// SELNEZ_D
    0U,	// SELNEZ_S
    0U,	// SEL_D
    0U,	// SEL_S
    0U,	// SEQ
    0U,	// SEQi
    0U,	// SH
    0U,	// SH64
    0U,	// SHF_B
    0U,	// SHF_H
    0U,	// SHF_W
    0U,	// SHILO
    0U,	// SHILOV
    0U,	// SHLLV_PH
    0U,	// SHLLV_QB
    0U,	// SHLLV_S_PH
    0U,	// SHLLV_S_W
    0U,	// SHLL_PH
    0U,	// SHLL_QB
    0U,	// SHLL_S_PH
    0U,	// SHLL_S_W
    0U,	// SHRAV_PH
    0U,	// SHRAV_QB
    0U,	// SHRAV_R_PH
    0U,	// SHRAV_R_QB
    0U,	// SHRAV_R_W
    0U,	// SHRA_PH
    0U,	// SHRA_QB
    0U,	// SHRA_R_PH
    0U,	// SHRA_R_QB
    0U,	// SHRA_R_W
    0U,	// SHRLV_PH
    0U,	// SHRLV_QB
    0U,	// SHRL_PH
    0U,	// SHRL_QB
    0U,	// SH_MM
    2U,	// SLDI_B
    2U,	// SLDI_D
    2U,	// SLDI_H
    2U,	// SLDI_W
    2U,	// SLD_B
    2U,	// SLD_D
    2U,	// SLD_H
    2U,	// SLD_W
    0U,	// SLL
    0U,	// SLL16_MM
    0U,	// SLL64_32
    0U,	// SLL64_64
    0U,	// SLLI_B
    0U,	// SLLI_D
    0U,	// SLLI_H
    0U,	// SLLI_W
    0U,	// SLLV
    0U,	// SLLV_MM
    0U,	// SLL_B
    0U,	// SLL_D
    0U,	// SLL_H
    0U,	// SLL_MM
    0U,	// SLL_W
    0U,	// SLT
    0U,	// SLT64
    0U,	// SLT_MM
    0U,	// SLTi
    0U,	// SLTi64
    0U,	// SLTi_MM
    0U,	// SLTiu
    0U,	// SLTiu64
    0U,	// SLTiu_MM
    0U,	// SLTu
    0U,	// SLTu64
    0U,	// SLTu_MM
    0U,	// SNE
    0U,	// SNEi
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    2U,	// SPLATI_B
    2U,	// SPLATI_D
    2U,	// SPLATI_H
    2U,	// SPLATI_W
    2U,	// SPLAT_B
    2U,	// SPLAT_D
    2U,	// SPLAT_H
    2U,	// SPLAT_W
    0U,	// SRA
    0U,	// SRAI_B
    0U,	// SRAI_D
    0U,	// SRAI_H
    0U,	// SRAI_W
    0U,	// SRARI_B
    0U,	// SRARI_D
    0U,	// SRARI_H
    0U,	// SRARI_W
    0U,	// SRAR_B
    0U,	// SRAR_D
    0U,	// SRAR_H
    0U,	// SRAR_W
    0U,	// SRAV
    0U,	// SRAV_MM
    0U,	// SRA_B
    0U,	// SRA_D
    0U,	// SRA_H
    0U,	// SRA_MM
    0U,	// SRA_W
    0U,	// SRL
    0U,	// SRL16_MM
    0U,	// SRLI_B
    0U,	// SRLI_D
    0U,	// SRLI_H
    0U,	// SRLI_W
    0U,	// SRLRI_B
    0U,	// SRLRI_D
    0U,	// SRLRI_H
    0U,	// SRLRI_W
    0U,	// SRLR_B
    0U,	// SRLR_D
    0U,	// SRLR_H
    0U,	// SRLR_W
    0U,	// SRLV
    0U,	// SRLV_MM
    0U,	// SRL_B
    0U,	// SRL_D
    0U,	// SRL_H
    0U,	// SRL_MM
    0U,	// SRL_W
    0U,	// SSNOP
    0U,	// STORE_ACC128
    0U,	// STORE_ACC64
    0U,	// STORE_ACC64DSP
    0U,	// STORE_CCOND_DSP
    0U,	// ST_B
    0U,	// ST_D
    0U,	// ST_H
    0U,	// ST_W
    0U,	// SUB
    0U,	// SUBQH_PH
    0U,	// SUBQH_R_PH
    0U,	// SUBQH_R_W
    0U,	// SUBQH_W
    0U,	// SUBQ_PH
    0U,	// SUBQ_S_PH
    0U,	// SUBQ_S_W
    0U,	// SUBSUS_U_B
    0U,	// SUBSUS_U_D
    0U,	// SUBSUS_U_H
    0U,	// SUBSUS_U_W
    0U,	// SUBSUU_S_B
    0U,	// SUBSUU_S_D
    0U,	// SUBSUU_S_H
    0U,	// SUBSUU_S_W
    0U,	// SUBS_S_B
    0U,	// SUBS_S_D
    0U,	// SUBS_S_H
    0U,	// SUBS_S_W
    0U,	// SUBS_U_B
    0U,	// SUBS_U_D
    0U,	// SUBS_U_H
    0U,	// SUBS_U_W
    0U,	// SUBU16_MM
    0U,	// SUBUH_QB
    0U,	// SUBUH_R_QB
    0U,	// SUBU_PH
    0U,	// SUBU_QB
    0U,	// SUBU_S_PH
    0U,	// SUBU_S_QB
    0U,	// SUBVI_B
    0U,	// SUBVI_D
    0U,	// SUBVI_H
    0U,	// SUBVI_W
    0U,	// SUBV_B
    0U,	// SUBV_D
    0U,	// SUBV_H
    0U,	// SUBV_W
    0U,	// SUB_MM
    0U,	// SUBu
    0U,	// SUBu_MM
    0U,	// SUXC1
    0U,	// SUXC164
    0U,	// SUXC1_MM
    0U,	// SW
    0U,	// SW64
    0U,	// SWC1
    0U,	// SWC1_MM
    0U,	// SWC2
    0U,	// SWC2_R6
    0U,	// SWC3
    0U,	// SWL
    0U,	// SWL64
    0U,	// SWL_MM
    0U,	// SWR
    0U,	// SWR64
    0U,	// SWR_MM
    0U,	// SWXC1
    0U,	// SWXC1_MM
    0U,	// SW_MM
    0U,	// SYNC
    0U,	// SYNC_MM
    0U,	// SYSCALL
    0U,	// SYSCALL_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    0U,	// Save16
    0U,	// SaveX16
    0U,	// SbRxRyOffMemX16
    0U,	// SebRx16
    0U,	// SehRx16
    0U,	// SelBeqZ
    0U,	// SelBneZ
    0U,	// SelTBteqZCmp
    0U,	// SelTBteqZCmpi
    0U,	// SelTBteqZSlt
    0U,	// SelTBteqZSlti
    0U,	// SelTBteqZSltiu
    0U,	// SelTBteqZSltu
    0U,	// SelTBtneZCmp
    0U,	// SelTBtneZCmpi
    0U,	// SelTBtneZSlt
    0U,	// SelTBtneZSlti
    0U,	// SelTBtneZSltiu
    0U,	// SelTBtneZSltu
    0U,	// ShRxRyOffMemX16
    0U,	// SllX16
    0U,	// SllvRxRy16
    0U,	// SltCCRxRy16
    0U,	// SltRxRy16
    0U,	// SltiCCRxImmX16
    0U,	// SltiRxImm16
    0U,	// SltiRxImmX16
    0U,	// SltiuCCRxImmX16
    0U,	// SltiuRxImm16
    0U,	// SltiuRxImmX16
    0U,	// SltuCCRxRy16
    0U,	// SltuRxRy16
    0U,	// SltuRxRyRz16
    0U,	// SraX16
    0U,	// SravRxRy16
    0U,	// SrlX16
    0U,	// SrlvRxRy16
    0U,	// SubuRxRyRz16
    0U,	// SwRxRyOffMemX16
    0U,	// SwRxSpImmX16
    0U,	// TAILCALL
    0U,	// TAILCALL64_R
    0U,	// TAILCALL_R
    0U,	// TEQ
    0U,	// TEQI
    0U,	// TEQI_MM
    0U,	// TEQ_MM
    0U,	// TGE
    0U,	// TGEI
    0U,	// TGEIU
    0U,	// TGEIU_MM
    0U,	// TGEI_MM
    0U,	// TGEU
    0U,	// TGEU_MM
    0U,	// TGE_MM
    0U,	// TLBP
    0U,	// TLBP_MM
    0U,	// TLBR
    0U,	// TLBR_MM
    0U,	// TLBWI
    0U,	// TLBWI_MM
    0U,	// TLBWR
    0U,	// TLBWR_MM
    0U,	// TLT
    0U,	// TLTI
    0U,	// TLTIU_MM
    0U,	// TLTI_MM
    0U,	// TLTU
    0U,	// TLTU_MM
    0U,	// TLT_MM
    0U,	// TNE
    0U,	// TNEI
    0U,	// TNEI_MM
    0U,	// TNE_MM
    0U,	// TRAP
    0U,	// TRUNC_L_D64
    0U,	// TRUNC_L_S
    0U,	// TRUNC_W_D32
    0U,	// TRUNC_W_D64
    0U,	// TRUNC_W_MM
    0U,	// TRUNC_W_S
    0U,	// TRUNC_W_S_MM
    0U,	// TTLTIU
    0U,	// UDIV
    0U,	// UDIV_MM
    0U,	// V3MULU
    0U,	// VMM0
    0U,	// VMULU
    0U,	// VSHF_B
    0U,	// VSHF_D
    0U,	// VSHF_H
    0U,	// VSHF_W
    0U,	// WAIT
    0U,	// WAIT_MM
    0U,	// WRDSP
    0U,	// WSBH
    0U,	// WSBH_MM
    0U,	// XOR
    0U,	// XOR16_MM
    0U,	// XOR64
    0U,	// XORI_B
    0U,	// XOR_MM
    0U,	// XOR_V
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    0U,	// XORi
    0U,	// XORi64
    0U,	// XORi_MM
    0U,	// XorRxRxRy16
    0U
  };

  static const char AsmStrs[] = {
  /* 0 */ 'j', 'a', 'l', 'r', 'c', 32, 9, 0,
  /* 8 */ 'd', 'm', 'f', 'c', '0', 9, 0,
  /* 15 */ 'd', 'm', 't', 'c', '0', 9, 0,
  /* 22 */ 'v', 'm', 'm', '0', 9, 0,
  /* 28 */ 'm', 't', 'm', '0', 9, 0,
  /* 34 */ 'm', 't', 'p', '0', 9, 0,
  /* 40 */ 'l', 'd', 'c', '1', 9, 0,
  /* 46 */ 's', 'd', 'c', '1', 9, 0,
  /* 52 */ 'c', 'f', 'c', '1', 9, 0,
  /* 58 */ 'd', 'm', 'f', 'c', '1', 9, 0,
  /* 65 */ 'm', 'f', 'h', 'c', '1', 9, 0,
  /* 72 */ 'm', 't', 'h', 'c', '1', 9, 0,
  /* 79 */ 'c', 't', 'c', '1', 9, 0,
  /* 85 */ 'd', 'm', 't', 'c', '1', 9, 0,
  /* 92 */ 'l', 'w', 'c', '1', 9, 0,
  /* 98 */ 's', 'w', 'c', '1', 9, 0,
  /* 104 */ 'l', 'd', 'x', 'c', '1', 9, 0,
  /* 111 */ 's', 'd', 'x', 'c', '1', 9, 0,
  /* 118 */ 'l', 'u', 'x', 'c', '1', 9, 0,
  /* 125 */ 's', 'u', 'x', 'c', '1', 9, 0,
  /* 132 */ 'l', 'w', 'x', 'c', '1', 9, 0,
  /* 139 */ 's', 'w', 'x', 'c', '1', 9, 0,
  /* 146 */ 'm', 't', 'm', '1', 9, 0,
  /* 152 */ 'm', 't', 'p', '1', 9, 0,
  /* 158 */ 'd', 's', 'r', 'a', '3', '2', 9, 0,
  /* 166 */ 'b', 'p', 'o', 's', 'g', 'e', '3', '2', 9, 0,
  /* 176 */ 'd', 's', 'l', 'l', '3', '2', 9, 0,
  /* 184 */ 'd', 's', 'r', 'l', '3', '2', 9, 0,
  /* 192 */ 'd', 'r', 'o', 't', 'r', '3', '2', 9, 0,
  /* 201 */ 'l', 'd', 'c', '2', 9, 0,
  /* 207 */ 's', 'd', 'c', '2', 9, 0,
  /* 213 */ 'd', 'm', 'f', 'c', '2', 9, 0,
  /* 220 */ 'd', 'm', 't', 'c', '2', 9, 0,
  /* 227 */ 'l', 'w', 'c', '2', 9, 0,
  /* 233 */ 's', 'w', 'c', '2', 9, 0,
  /* 239 */ 'm', 't', 'm', '2', 9, 0,
  /* 245 */ 'm', 't', 'p', '2', 9, 0,
  /* 251 */ 'a', 'd', 'd', 'i', 'u', 'r', '2', 9, 0,
  /* 260 */ 'l', 'd', 'c', '3', 9, 0,
  /* 266 */ 's', 'd', 'c', '3', 9, 0,
  /* 272 */ 'l', 'w', 'c', '3', 9, 0,
  /* 278 */ 's', 'w', 'c', '3', 9, 0,
  /* 284 */ 'a', 'd', 'd', 'i', 'u', 's', '5', 9, 0,
  /* 293 */ 'a', 'n', 'd', '1', '6', 9, 0,
  /* 300 */ 'l', 'i', '1', '6', 9, 0,
  /* 306 */ 's', 'l', 'l', '1', '6', 9, 0,
  /* 313 */ 's', 'r', 'l', '1', '6', 9, 0,
  /* 320 */ 'j', 'r', '1', '6', 9, 0,
  /* 326 */ 'x', 'o', 'r', '1', '6', 9, 0,
  /* 333 */ 'j', 'a', 'l', 'r', 's', '1', '6', 9, 0,
  /* 342 */ 'n', 'o', 't', '1', '6', 9, 0,
  /* 349 */ 's', 'u', 'b', 'u', '1', '6', 9, 0,
  /* 357 */ 'a', 'd', 'd', 'u', '1', '6', 9, 0,
  /* 365 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 381 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 398 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 414 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 431 */ 'd', 's', 'r', 'a', 9, 0,
  /* 437 */ 'd', 'l', 's', 'a', 9, 0,
  /* 443 */ 'c', 'f', 'c', 'm', 's', 'a', 9, 0,
  /* 451 */ 'c', 't', 'c', 'm', 's', 'a', 9, 0,
  /* 459 */ 'a', 'd', 'd', '_', 'a', '.', 'b', 9, 0,
  /* 468 */ 'm', 'i', 'n', '_', 'a', '.', 'b', 9, 0,
  /* 477 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'b', 9, 0,
  /* 487 */ 'm', 'a', 'x', '_', 'a', '.', 'b', 9, 0,
  /* 496 */ 's', 'r', 'a', '.', 'b', 9, 0,
  /* 503 */ 'n', 'l', 'o', 'c', '.', 'b', 9, 0,
  /* 511 */ 'n', 'l', 'z', 'c', '.', 'b', 9, 0,
  /* 519 */ 's', 'l', 'd', '.', 'b', 9, 0,
  /* 526 */ 'p', 'c', 'k', 'o', 'd', '.', 'b', 9, 0,
  /* 535 */ 'i', 'l', 'v', 'o', 'd', '.', 'b', 9, 0,
  /* 544 */ 'i', 'n', 's', 'v', 'e', '.', 'b', 9, 0,
  /* 553 */ 'v', 's', 'h', 'f', '.', 'b', 9, 0,
  /* 561 */ 'b', 'n', 'e', 'g', '.', 'b', 9, 0,
  /* 569 */ 's', 'r', 'a', 'i', '.', 'b', 9, 0,
  /* 577 */ 's', 'l', 'd', 'i', '.', 'b', 9, 0,
  /* 585 */ 'a', 'n', 'd', 'i', '.', 'b', 9, 0,
  /* 593 */ 'b', 'n', 'e', 'g', 'i', '.', 'b', 9, 0,
  /* 602 */ 'b', 's', 'e', 'l', 'i', '.', 'b', 9, 0,
  /* 611 */ 's', 'l', 'l', 'i', '.', 'b', 9, 0,
  /* 619 */ 's', 'r', 'l', 'i', '.', 'b', 9, 0,
  /* 627 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'b', 9, 0,
  /* 637 */ 'c', 'e', 'q', 'i', '.', 'b', 9, 0,
  /* 645 */ 's', 'r', 'a', 'r', 'i', '.', 'b', 9, 0,
  /* 654 */ 'b', 'c', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 663 */ 's', 'r', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 672 */ 'n', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 680 */ 'x', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 688 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'b', 9, 0,
  /* 698 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'b', 9, 0,
  /* 708 */ 'b', 's', 'e', 't', 'i', '.', 'b', 9, 0,
  /* 717 */ 's', 'u', 'b', 'v', 'i', '.', 'b', 9, 0,
  /* 726 */ 'a', 'd', 'd', 'v', 'i', '.', 'b', 9, 0,
  /* 735 */ 'b', 'm', 'z', 'i', '.', 'b', 9, 0,
  /* 743 */ 'b', 'm', 'n', 'z', 'i', '.', 'b', 9, 0,
  /* 752 */ 'f', 'i', 'l', 'l', '.', 'b', 9, 0,
  /* 760 */ 's', 'l', 'l', '.', 'b', 9, 0,
  /* 767 */ 's', 'r', 'l', '.', 'b', 9, 0,
  /* 774 */ 'b', 'i', 'n', 's', 'l', '.', 'b', 9, 0,
  /* 783 */ 'i', 'l', 'v', 'l', '.', 'b', 9, 0,
  /* 791 */ 'c', 'e', 'q', '.', 'b', 9, 0,
  /* 798 */ 's', 'r', 'a', 'r', '.', 'b', 9, 0,
  /* 806 */ 'b', 'c', 'l', 'r', '.', 'b', 9, 0,
  /* 814 */ 's', 'r', 'l', 'r', '.', 'b', 9, 0,
  /* 822 */ 'b', 'i', 'n', 's', 'r', '.', 'b', 9, 0,
  /* 831 */ 'i', 'l', 'v', 'r', '.', 'b', 9, 0,
  /* 839 */ 'a', 's', 'u', 'b', '_', 's', '.', 'b', 9, 0,
  /* 849 */ 'm', 'o', 'd', '_', 's', '.', 'b', 9, 0,
  /* 858 */ 'c', 'l', 'e', '_', 's', '.', 'b', 9, 0,
  /* 867 */ 'a', 'v', 'e', '_', 's', '.', 'b', 9, 0,
  /* 876 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'b', 9, 0,
  /* 886 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'b', 9, 0,
  /* 896 */ 'c', 'l', 't', 'i', '_', 's', '.', 'b', 9, 0,
  /* 906 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'b', 9, 0,
  /* 916 */ 'm', 'i', 'n', '_', 's', '.', 'b', 9, 0,
  /* 925 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'b', 9, 0,
  /* 935 */ 's', 'u', 'b', 's', '_', 's', '.', 'b', 9, 0,
  /* 945 */ 'a', 'd', 'd', 's', '_', 's', '.', 'b', 9, 0,
  /* 955 */ 's', 'a', 't', '_', 's', '.', 'b', 9, 0,
  /* 964 */ 'c', 'l', 't', '_', 's', '.', 'b', 9, 0,
  /* 973 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'b', 9, 0,
  /* 985 */ 'd', 'i', 'v', '_', 's', '.', 'b', 9, 0,
  /* 994 */ 'm', 'a', 'x', '_', 's', '.', 'b', 9, 0,
  /* 1003 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'b', 9, 0,
  /* 1013 */ 's', 'p', 'l', 'a', 't', '.', 'b', 9, 0,
  /* 1022 */ 'b', 's', 'e', 't', '.', 'b', 9, 0,
  /* 1030 */ 'p', 'c', 'n', 't', '.', 'b', 9, 0,
  /* 1038 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'b', 9, 0,
  /* 1048 */ 's', 't', '.', 'b', 9, 0,
  /* 1054 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'b', 9, 0,
  /* 1064 */ 'm', 'o', 'd', '_', 'u', '.', 'b', 9, 0,
  /* 1073 */ 'c', 'l', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 1082 */ 'a', 'v', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 1091 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1101 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1111 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1121 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1131 */ 'm', 'i', 'n', '_', 'u', '.', 'b', 9, 0,
  /* 1140 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'b', 9, 0,
  /* 1150 */ 's', 'u', 'b', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1160 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1170 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1182 */ 's', 'a', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1191 */ 'c', 'l', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1200 */ 'd', 'i', 'v', '_', 'u', '.', 'b', 9, 0,
  /* 1209 */ 'm', 'a', 'x', '_', 'u', '.', 'b', 9, 0,
  /* 1218 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'b', 9, 0,
  /* 1228 */ 'm', 's', 'u', 'b', 'v', '.', 'b', 9, 0,
  /* 1237 */ 'm', 'a', 'd', 'd', 'v', '.', 'b', 9, 0,
  /* 1246 */ 'p', 'c', 'k', 'e', 'v', '.', 'b', 9, 0,
  /* 1255 */ 'i', 'l', 'v', 'e', 'v', '.', 'b', 9, 0,
  /* 1264 */ 'm', 'u', 'l', 'v', '.', 'b', 9, 0,
  /* 1272 */ 'b', 'z', '.', 'b', 9, 0,
  /* 1278 */ 'b', 'n', 'z', '.', 'b', 9, 0,
  /* 1285 */ 's', 'e', 'b', 9, 0,
  /* 1290 */ 'j', 'r', '.', 'h', 'b', 9, 0,
  /* 1297 */ 'j', 'a', 'l', 'r', '.', 'h', 'b', 9, 0,
  /* 1306 */ 'l', 'b', 9, 0,
  /* 1310 */ 's', 'h', 'r', 'a', '.', 'q', 'b', 9, 0,
  /* 1319 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1333 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1346 */ 'c', 'm', 'p', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1358 */ 's', 'u', 'b', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1368 */ 'a', 'd', 'd', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1378 */ 'p', 'i', 'c', 'k', '.', 'q', 'b', 9, 0,
  /* 1387 */ 's', 'h', 'l', 'l', '.', 'q', 'b', 9, 0,
  /* 1396 */ 'r', 'e', 'p', 'l', '.', 'q', 'b', 9, 0,
  /* 1405 */ 's', 'h', 'r', 'l', '.', 'q', 'b', 9, 0,
  /* 1414 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1428 */ 'c', 'm', 'p', 'g', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1441 */ 'c', 'm', 'p', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1453 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1464 */ 's', 'u', 'b', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1476 */ 'a', 'd', 'd', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1488 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1500 */ 'a', 'b', 's', 'q', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1511 */ 's', 'u', 'b', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1522 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1533 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1547 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1560 */ 'c', 'm', 'p', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1572 */ 's', 'u', 'b', 'u', '.', 'q', 'b', 9, 0,
  /* 1581 */ 'a', 'd', 'd', 'u', '.', 'q', 'b', 9, 0,
  /* 1590 */ 's', 'h', 'r', 'a', 'v', '.', 'q', 'b', 9, 0,
  /* 1600 */ 's', 'h', 'l', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1610 */ 'r', 'e', 'p', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1620 */ 's', 'h', 'r', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1630 */ 'r', 'a', 'd', 'd', 'u', '.', 'w', '.', 'q', 'b', 9, 0,
  /* 1642 */ 's', 'b', 9, 0,
  /* 1646 */ 'm', 'o', 'd', 's', 'u', 'b', 9, 0,
  /* 1654 */ 'm', 's', 'u', 'b', 9, 0,
  /* 1660 */ 'b', 'c', 9, 0,
  /* 1664 */ 'b', 'g', 'e', 'c', 9, 0,
  /* 1670 */ 'b', 'n', 'e', 'c', 9, 0,
  /* 1676 */ 'j', 'i', 'c', 9, 0,
  /* 1681 */ 'b', 'a', 'l', 'c', 9, 0,
  /* 1687 */ 'j', 'i', 'a', 'l', 'c', 9, 0,
  /* 1694 */ 'b', 'g', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1703 */ 'b', 'l', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1712 */ 'b', 'n', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1721 */ 'b', 'e', 'q', 'z', 'a', 'l', 'c', 9, 0,
  /* 1730 */ 'b', 'g', 't', 'z', 'a', 'l', 'c', 9, 0,
  /* 1739 */ 'b', 'l', 't', 'z', 'a', 'l', 'c', 9, 0,
  /* 1748 */ 'l', 'd', 'p', 'c', 9, 0,
  /* 1754 */ 'a', 'u', 'i', 'p', 'c', 9, 0,
  /* 1761 */ 'a', 'l', 'u', 'i', 'p', 'c', 9, 0,
  /* 1769 */ 'a', 'd', 'd', 'i', 'u', 'p', 'c', 9, 0,
  /* 1778 */ 'l', 'w', 'u', 'p', 'c', 9, 0,
  /* 1785 */ 'l', 'w', 'p', 'c', 9, 0,
  /* 1791 */ 'b', 'e', 'q', 'c', 9, 0,
  /* 1797 */ 'j', 'r', 'c', 9, 0,
  /* 1802 */ 'a', 'd', 'd', 's', 'c', 9, 0,
  /* 1809 */ 'b', 'l', 't', 'c', 9, 0,
  /* 1815 */ 'b', 'g', 'e', 'u', 'c', 9, 0,
  /* 1822 */ 'b', 'l', 't', 'u', 'c', 9, 0,
  /* 1829 */ 'b', 'n', 'v', 'c', 9, 0,
  /* 1835 */ 'b', 'o', 'v', 'c', 9, 0,
  /* 1841 */ 'a', 'd', 'd', 'w', 'c', 9, 0,
  /* 1848 */ 'b', 'g', 'e', 'z', 'c', 9, 0,
  /* 1855 */ 'b', 'l', 'e', 'z', 'c', 9, 0,
  /* 1862 */ 'b', 'n', 'e', 'z', 'c', 9, 0,
  /* 1869 */ 'b', 'e', 'q', 'z', 'c', 9, 0,
  /* 1876 */ 'b', 'g', 't', 'z', 'c', 9, 0,
  /* 1883 */ 'b', 'l', 't', 'z', 'c', 9, 0,
  /* 1890 */ 'f', 'l', 'o', 'g', '2', '.', 'd', 9, 0,
  /* 1899 */ 'f', 'e', 'x', 'p', '2', '.', 'd', 9, 0,
  /* 1908 */ 'a', 'd', 'd', '_', 'a', '.', 'd', 9, 0,
  /* 1917 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'd', 9, 0,
  /* 1927 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'd', 9, 0,
  /* 1937 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'd', 9, 0,
  /* 1947 */ 'm', 'i', 'n', 'a', '.', 'd', 9, 0,
  /* 1955 */ 's', 'r', 'a', '.', 'd', 9, 0,
  /* 1962 */ 'm', 'a', 'x', 'a', '.', 'd', 9, 0,
  /* 1970 */ 'f', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 1978 */ 'f', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 1987 */ 'n', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 1996 */ 'n', 'l', 'o', 'c', '.', 'd', 9, 0,
  /* 2004 */ 'n', 'l', 'z', 'c', '.', 'd', 9, 0,
  /* 2012 */ 'f', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2020 */ 'f', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2029 */ 'n', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2038 */ 's', 'l', 'd', '.', 'd', 9, 0,
  /* 2045 */ 'p', 'c', 'k', 'o', 'd', '.', 'd', 9, 0,
  /* 2054 */ 'i', 'l', 'v', 'o', 'd', '.', 'd', 9, 0,
  /* 2063 */ 'c', '.', 'n', 'g', 'e', '.', 'd', 9, 0,
  /* 2072 */ 'c', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 2080 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 2090 */ 'f', 'c', 'l', 'e', '.', 'd', 9, 0,
  /* 2098 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 'd', 9, 0,
  /* 2108 */ 'c', '.', 'o', 'l', 'e', '.', 'd', 9, 0,
  /* 2117 */ 'c', 'm', 'p', '.', 's', 'l', 'e', '.', 'd', 9, 0,
  /* 2128 */ 'f', 's', 'l', 'e', '.', 'd', 9, 0,
  /* 2136 */ 'c', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2145 */ 'c', 'm', 'p', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2156 */ 'f', 'c', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2165 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2177 */ 'f', 's', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2186 */ 'f', 'c', 'n', 'e', '.', 'd', 9, 0,
  /* 2194 */ 'f', 's', 'n', 'e', '.', 'd', 9, 0,
  /* 2202 */ 'f', 'c', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 2211 */ 'f', 's', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 2220 */ 'i', 'n', 's', 'v', 'e', '.', 'd', 9, 0,
  /* 2229 */ 'c', '.', 'f', '.', 'd', 9, 0,
  /* 2236 */ 'c', 'm', 'p', '.', 'a', 'f', '.', 'd', 9, 0,
  /* 2246 */ 'f', 'c', 'a', 'f', '.', 'd', 9, 0,
  /* 2254 */ 'c', 'm', 'p', '.', 's', 'a', 'f', '.', 'd', 9, 0,
  /* 2265 */ 'f', 's', 'a', 'f', '.', 'd', 9, 0,
  /* 2273 */ 'm', 's', 'u', 'b', 'f', '.', 'd', 9, 0,
  /* 2282 */ 'm', 'a', 'd', 'd', 'f', '.', 'd', 9, 0,
  /* 2291 */ 'v', 's', 'h', 'f', '.', 'd', 9, 0,
  /* 2299 */ 'c', '.', 's', 'f', '.', 'd', 9, 0,
  /* 2307 */ 'm', 'o', 'v', 'f', '.', 'd', 9, 0,
  /* 2315 */ 'b', 'n', 'e', 'g', '.', 'd', 9, 0,
  /* 2323 */ 's', 'r', 'a', 'i', '.', 'd', 9, 0,
  /* 2331 */ 's', 'l', 'd', 'i', '.', 'd', 9, 0,
  /* 2339 */ 'b', 'n', 'e', 'g', 'i', '.', 'd', 9, 0,
  /* 2348 */ 's', 'l', 'l', 'i', '.', 'd', 9, 0,
  /* 2356 */ 's', 'r', 'l', 'i', '.', 'd', 9, 0,
  /* 2364 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'd', 9, 0,
  /* 2374 */ 'c', 'e', 'q', 'i', '.', 'd', 9, 0,
  /* 2382 */ 's', 'r', 'a', 'r', 'i', '.', 'd', 9, 0,
  /* 2391 */ 'b', 'c', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 2400 */ 's', 'r', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 2409 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'd', 9, 0,
  /* 2419 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'd', 9, 0,
  /* 2429 */ 'b', 's', 'e', 't', 'i', '.', 'd', 9, 0,
  /* 2438 */ 's', 'u', 'b', 'v', 'i', '.', 'd', 9, 0,
  /* 2447 */ 'a', 'd', 'd', 'v', 'i', '.', 'd', 9, 0,
  /* 2456 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 'd', 9, 0,
  /* 2467 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 'd', 9, 0,
  /* 2478 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 'd', 9, 0,
  /* 2488 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 'd', 9, 0,
  /* 2499 */ 'c', 'v', 't', '.', 'l', '.', 'd', 9, 0,
  /* 2508 */ 's', 'e', 'l', '.', 'd', 9, 0,
  /* 2515 */ 'c', '.', 'n', 'g', 'l', '.', 'd', 9, 0,
  /* 2524 */ 'f', 'i', 'l', 'l', '.', 'd', 9, 0,
  /* 2532 */ 's', 'l', 'l', '.', 'd', 9, 0,
  /* 2539 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'd', 9, 0,
  /* 2549 */ 'f', 'f', 'q', 'l', '.', 'd', 9, 0,
  /* 2557 */ 's', 'r', 'l', '.', 'd', 9, 0,
  /* 2564 */ 'b', 'i', 'n', 's', 'l', '.', 'd', 9, 0,
  /* 2573 */ 'f', 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 2581 */ 'i', 'l', 'v', 'l', '.', 'd', 9, 0,
  /* 2589 */ 'f', 'm', 'i', 'n', '.', 'd', 9, 0,
  /* 2597 */ 'c', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 2605 */ 'c', 'm', 'p', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 2615 */ 'f', 'c', 'u', 'n', '.', 'd', 9, 0,
  /* 2623 */ 'c', 'm', 'p', '.', 's', 'u', 'n', '.', 'd', 9, 0,
  /* 2634 */ 'f', 's', 'u', 'n', '.', 'd', 9, 0,
  /* 2642 */ 'm', 'o', 'v', 'n', '.', 'd', 9, 0,
  /* 2650 */ 'f', 'r', 'c', 'p', '.', 'd', 9, 0,
  /* 2658 */ 'c', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 2666 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 2676 */ 'f', 'c', 'e', 'q', '.', 'd', 9, 0,
  /* 2684 */ 'c', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 2693 */ 'c', 'm', 'p', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 2704 */ 'f', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 2712 */ 'c', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2721 */ 'c', 'm', 'p', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2732 */ 'f', 'c', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2741 */ 'c', 'm', 'p', '.', 's', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2753 */ 'f', 's', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 2762 */ 's', 'r', 'a', 'r', '.', 'd', 9, 0,
  /* 2770 */ 'b', 'c', 'l', 'r', '.', 'd', 9, 0,
  /* 2778 */ 's', 'r', 'l', 'r', '.', 'd', 9, 0,
  /* 2786 */ 'f', 'c', 'o', 'r', '.', 'd', 9, 0,
  /* 2794 */ 'f', 's', 'o', 'r', '.', 'd', 9, 0,
  /* 2802 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'd', 9, 0,
  /* 2812 */ 'f', 'f', 'q', 'r', '.', 'd', 9, 0,
  /* 2820 */ 'b', 'i', 'n', 's', 'r', '.', 'd', 9, 0,
  /* 2829 */ 'i', 'l', 'v', 'r', '.', 'd', 9, 0,
  /* 2837 */ 'c', 'v', 't', '.', 's', '.', 'd', 9, 0,
  /* 2846 */ 'a', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 2856 */ 'h', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 2866 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 2877 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'd', 9, 0,
  /* 2889 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 2899 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 2910 */ 'm', 'o', 'd', '_', 's', '.', 'd', 9, 0,
  /* 2919 */ 'c', 'l', 'e', '_', 's', '.', 'd', 9, 0,
  /* 2928 */ 'a', 'v', 'e', '_', 's', '.', 'd', 9, 0,
  /* 2937 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'd', 9, 0,
  /* 2947 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'd', 9, 0,
  /* 2957 */ 'c', 'l', 't', 'i', '_', 's', '.', 'd', 9, 0,
  /* 2967 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'd', 9, 0,
  /* 2977 */ 'm', 'i', 'n', '_', 's', '.', 'd', 9, 0,
  /* 2986 */ 'd', 'o', 't', 'p', '_', 's', '.', 'd', 9, 0,
  /* 2996 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'd', 9, 0,
  /* 3006 */ 's', 'u', 'b', 's', '_', 's', '.', 'd', 9, 0,
  /* 3016 */ 'a', 'd', 'd', 's', '_', 's', '.', 'd', 9, 0,
  /* 3026 */ 's', 'a', 't', '_', 's', '.', 'd', 9, 0,
  /* 3035 */ 'c', 'l', 't', '_', 's', '.', 'd', 9, 0,
  /* 3044 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 3055 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 3066 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'd', 9, 0,
  /* 3078 */ 'd', 'i', 'v', '_', 's', '.', 'd', 9, 0,
  /* 3087 */ 'm', 'a', 'x', '_', 's', '.', 'd', 9, 0,
  /* 3096 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'd', 9, 0,
  /* 3106 */ 'a', 'b', 's', '.', 'd', 9, 0,
  /* 3113 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'd', 9, 0,
  /* 3123 */ 's', 'p', 'l', 'a', 't', '.', 'd', 9, 0,
  /* 3132 */ 'b', 's', 'e', 't', '.', 'd', 9, 0,
  /* 3140 */ 'c', '.', 'n', 'g', 't', '.', 'd', 9, 0,
  /* 3149 */ 'c', '.', 'l', 't', '.', 'd', 9, 0,
  /* 3157 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'd', 9, 0,
  /* 3167 */ 'f', 'c', 'l', 't', '.', 'd', 9, 0,
  /* 3175 */ 'c', '.', 'o', 'l', 't', '.', 'd', 9, 0,
  /* 3184 */ 'c', 'm', 'p', '.', 's', 'l', 't', '.', 'd', 9, 0,
  /* 3195 */ 'f', 's', 'l', 't', '.', 'd', 9, 0,
  /* 3203 */ 'c', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3212 */ 'c', 'm', 'p', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3223 */ 'f', 'c', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3232 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3244 */ 'f', 's', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3253 */ 'p', 'c', 'n', 't', '.', 'd', 9, 0,
  /* 3261 */ 'f', 'r', 'i', 'n', 't', '.', 'd', 9, 0,
  /* 3270 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'd', 9, 0,
  /* 3280 */ 'f', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 3289 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 3299 */ 's', 't', '.', 'd', 9, 0,
  /* 3305 */ 'm', 'o', 'v', 't', '.', 'd', 9, 0,
  /* 3313 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3323 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3333 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3344 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'd', 9, 0,
  /* 3356 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3366 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3377 */ 'm', 'o', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3386 */ 'c', 'l', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 3395 */ 'a', 'v', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 3404 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3414 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3424 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3434 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3444 */ 'm', 'i', 'n', '_', 'u', '.', 'd', 9, 0,
  /* 3453 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'd', 9, 0,
  /* 3463 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'd', 9, 0,
  /* 3473 */ 's', 'u', 'b', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3483 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3493 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3505 */ 's', 'a', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3514 */ 'c', 'l', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3523 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3534 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3545 */ 'd', 'i', 'v', '_', 'u', '.', 'd', 9, 0,
  /* 3554 */ 'm', 'a', 'x', '_', 'u', '.', 'd', 9, 0,
  /* 3563 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'd', 9, 0,
  /* 3573 */ 'm', 's', 'u', 'b', 'v', '.', 'd', 9, 0,
  /* 3582 */ 'm', 'a', 'd', 'd', 'v', '.', 'd', 9, 0,
  /* 3591 */ 'p', 'c', 'k', 'e', 'v', '.', 'd', 9, 0,
  /* 3600 */ 'i', 'l', 'v', 'e', 'v', '.', 'd', 9, 0,
  /* 3609 */ 'f', 'd', 'i', 'v', '.', 'd', 9, 0,
  /* 3617 */ 'm', 'u', 'l', 'v', '.', 'd', 9, 0,
  /* 3625 */ 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 3632 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 'd', 9, 0,
  /* 3643 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 'd', 9, 0,
  /* 3654 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 'd', 9, 0,
  /* 3664 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 'd', 9, 0,
  /* 3675 */ 'c', 'v', 't', '.', 'w', '.', 'd', 9, 0,
  /* 3684 */ 'f', 'm', 'a', 'x', '.', 'd', 9, 0,
  /* 3692 */ 'b', 'z', '.', 'd', 9, 0,
  /* 3698 */ 's', 'e', 'l', 'n', 'e', 'z', '.', 'd', 9, 0,
  /* 3708 */ 'b', 'n', 'z', '.', 'd', 9, 0,
  /* 3715 */ 's', 'e', 'l', 'e', 'q', 'z', '.', 'd', 9, 0,
  /* 3725 */ 'm', 'o', 'v', 'z', '.', 'd', 9, 0,
  /* 3733 */ 's', 'c', 'd', 9, 0,
  /* 3738 */ 'd', 'a', 'd', 'd', 9, 0,
  /* 3744 */ 'm', 'a', 'd', 'd', 9, 0,
  /* 3750 */ 'd', 's', 'h', 'd', 9, 0,
  /* 3756 */ 'l', 'l', 'd', 9, 0,
  /* 3761 */ 'a', 'n', 'd', 9, 0,
  /* 3766 */ 'p', 'r', 'e', 'p', 'e', 'n', 'd', 9, 0,
  /* 3775 */ 'a', 'p', 'p', 'e', 'n', 'd', 9, 0,
  /* 3783 */ 'd', 'm', 'o', 'd', 9, 0,
  /* 3789 */ 's', 'd', 9, 0,
  /* 3793 */ 't', 'g', 'e', 9, 0,
  /* 3798 */ 'c', 'a', 'c', 'h', 'e', 9, 0,
  /* 3805 */ 'b', 'n', 'e', 9, 0,
  /* 3810 */ 's', 'n', 'e', 9, 0,
  /* 3815 */ 't', 'n', 'e', 9, 0,
  /* 3820 */ 'm', 'o', 'v', 'e', 9, 0,
  /* 3826 */ 'b', 'c', '1', 'f', 9, 0,
  /* 3832 */ 'p', 'r', 'e', 'f', 9, 0,
  /* 3838 */ 'm', 'o', 'v', 'f', 9, 0,
  /* 3844 */ 'n', 'e', 'g', 9, 0,
  /* 3849 */ 'a', 'd', 'd', '_', 'a', '.', 'h', 9, 0,
  /* 3858 */ 'm', 'i', 'n', '_', 'a', '.', 'h', 9, 0,
  /* 3867 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'h', 9, 0,
  /* 3877 */ 'm', 'a', 'x', '_', 'a', '.', 'h', 9, 0,
  /* 3886 */ 's', 'r', 'a', '.', 'h', 9, 0,
  /* 3893 */ 'n', 'l', 'o', 'c', '.', 'h', 9, 0,
  /* 3901 */ 'n', 'l', 'z', 'c', '.', 'h', 9, 0,
  /* 3909 */ 's', 'l', 'd', '.', 'h', 9, 0,
  /* 3916 */ 'p', 'c', 'k', 'o', 'd', '.', 'h', 9, 0,
  /* 3925 */ 'i', 'l', 'v', 'o', 'd', '.', 'h', 9, 0,
  /* 3934 */ 'i', 'n', 's', 'v', 'e', '.', 'h', 9, 0,
  /* 3943 */ 'v', 's', 'h', 'f', '.', 'h', 9, 0,
  /* 3951 */ 'b', 'n', 'e', 'g', '.', 'h', 9, 0,
  /* 3959 */ 's', 'r', 'a', 'i', '.', 'h', 9, 0,
  /* 3967 */ 's', 'l', 'd', 'i', '.', 'h', 9, 0,
  /* 3975 */ 'b', 'n', 'e', 'g', 'i', '.', 'h', 9, 0,
  /* 3984 */ 's', 'l', 'l', 'i', '.', 'h', 9, 0,
  /* 3992 */ 's', 'r', 'l', 'i', '.', 'h', 9, 0,
  /* 4000 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'h', 9, 0,
  /* 4010 */ 'c', 'e', 'q', 'i', '.', 'h', 9, 0,
  /* 4018 */ 's', 'r', 'a', 'r', 'i', '.', 'h', 9, 0,
  /* 4027 */ 'b', 'c', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 4036 */ 's', 'r', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 4045 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'h', 9, 0,
  /* 4055 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'h', 9, 0,
  /* 4065 */ 'b', 's', 'e', 't', 'i', '.', 'h', 9, 0,
  /* 4074 */ 's', 'u', 'b', 'v', 'i', '.', 'h', 9, 0,
  /* 4083 */ 'a', 'd', 'd', 'v', 'i', '.', 'h', 9, 0,
  /* 4092 */ 'f', 'i', 'l', 'l', '.', 'h', 9, 0,
  /* 4100 */ 's', 'l', 'l', '.', 'h', 9, 0,
  /* 4107 */ 's', 'r', 'l', '.', 'h', 9, 0,
  /* 4114 */ 'b', 'i', 'n', 's', 'l', '.', 'h', 9, 0,
  /* 4123 */ 'i', 'l', 'v', 'l', '.', 'h', 9, 0,
  /* 4131 */ 'f', 'e', 'x', 'd', 'o', '.', 'h', 9, 0,
  /* 4140 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'h', 9, 0,
  /* 4150 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'h', 9, 0,
  /* 4160 */ 'm', 'u', 'l', '_', 'q', '.', 'h', 9, 0,
  /* 4169 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4180 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4191 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4201 */ 'c', 'e', 'q', '.', 'h', 9, 0,
  /* 4208 */ 'f', 't', 'q', '.', 'h', 9, 0,
  /* 4215 */ 's', 'r', 'a', 'r', '.', 'h', 9, 0,
  /* 4223 */ 'b', 'c', 'l', 'r', '.', 'h', 9, 0,
  /* 4231 */ 's', 'r', 'l', 'r', '.', 'h', 9, 0,
  /* 4239 */ 'b', 'i', 'n', 's', 'r', '.', 'h', 9, 0,
  /* 4248 */ 'i', 'l', 'v', 'r', '.', 'h', 9, 0,
  /* 4256 */ 'a', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4266 */ 'h', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4276 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4287 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4297 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4308 */ 'm', 'o', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4317 */ 'c', 'l', 'e', '_', 's', '.', 'h', 9, 0,
  /* 4326 */ 'a', 'v', 'e', '_', 's', '.', 'h', 9, 0,
  /* 4335 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4345 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4355 */ 'c', 'l', 't', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4365 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4375 */ 'm', 'i', 'n', '_', 's', '.', 'h', 9, 0,
  /* 4384 */ 'd', 'o', 't', 'p', '_', 's', '.', 'h', 9, 0,
  /* 4394 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'h', 9, 0,
  /* 4404 */ 'e', 'x', 't', 'r', '_', 's', '.', 'h', 9, 0,
  /* 4414 */ 's', 'u', 'b', 's', '_', 's', '.', 'h', 9, 0,
  /* 4424 */ 'a', 'd', 'd', 's', '_', 's', '.', 'h', 9, 0,
  /* 4434 */ 's', 'a', 't', '_', 's', '.', 'h', 9, 0,
  /* 4443 */ 'c', 'l', 't', '_', 's', '.', 'h', 9, 0,
  /* 4452 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'h', 9, 0,
  /* 4464 */ 'd', 'i', 'v', '_', 's', '.', 'h', 9, 0,
  /* 4473 */ 'e', 'x', 't', 'r', 'v', '_', 's', '.', 'h', 9, 0,
  /* 4484 */ 'm', 'a', 'x', '_', 's', '.', 'h', 9, 0,
  /* 4493 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'h', 9, 0,
  /* 4503 */ 's', 'p', 'l', 'a', 't', '.', 'h', 9, 0,
  /* 4512 */ 'b', 's', 'e', 't', '.', 'h', 9, 0,
  /* 4520 */ 'p', 'c', 'n', 't', '.', 'h', 9, 0,
  /* 4528 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'h', 9, 0,
  /* 4538 */ 's', 't', '.', 'h', 9, 0,
  /* 4544 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4554 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4564 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4575 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4585 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4596 */ 'm', 'o', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4605 */ 'c', 'l', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 4614 */ 'a', 'v', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 4623 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 4633 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 4643 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 4653 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 4663 */ 'm', 'i', 'n', '_', 'u', '.', 'h', 9, 0,
  /* 4672 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'h', 9, 0,
  /* 4682 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'h', 9, 0,
  /* 4692 */ 's', 'u', 'b', 's', '_', 'u', '.', 'h', 9, 0,
  /* 4702 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'h', 9, 0,
  /* 4712 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'h', 9, 0,
  /* 4724 */ 's', 'a', 't', '_', 'u', '.', 'h', 9, 0,
  /* 4733 */ 'c', 'l', 't', '_', 'u', '.', 'h', 9, 0,
  /* 4742 */ 'd', 'i', 'v', '_', 'u', '.', 'h', 9, 0,
  /* 4751 */ 'm', 'a', 'x', '_', 'u', '.', 'h', 9, 0,
  /* 4760 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'h', 9, 0,
  /* 4770 */ 'm', 's', 'u', 'b', 'v', '.', 'h', 9, 0,
  /* 4779 */ 'm', 'a', 'd', 'd', 'v', '.', 'h', 9, 0,
  /* 4788 */ 'p', 'c', 'k', 'e', 'v', '.', 'h', 9, 0,
  /* 4797 */ 'i', 'l', 'v', 'e', 'v', '.', 'h', 9, 0,
  /* 4806 */ 'm', 'u', 'l', 'v', '.', 'h', 9, 0,
  /* 4814 */ 'b', 'z', '.', 'h', 9, 0,
  /* 4820 */ 'b', 'n', 'z', '.', 'h', 9, 0,
  /* 4827 */ 'd', 's', 'b', 'h', 9, 0,
  /* 4833 */ 'w', 's', 'b', 'h', 9, 0,
  /* 4839 */ 's', 'e', 'h', 9, 0,
  /* 4844 */ 'l', 'h', 9, 0,
  /* 4848 */ 's', 'h', 'r', 'a', '.', 'p', 'h', 9, 0,
  /* 4857 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 4871 */ 'p', 'r', 'e', 'c', 'r', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 4884 */ 'p', 'r', 'e', 'c', 'r', 'q', 'u', '_', 's', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 4901 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'p', 'h', 9, 0,
  /* 4912 */ 's', 'u', 'b', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 4922 */ 'a', 'd', 'd', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 4932 */ 'p', 'i', 'c', 'k', '.', 'p', 'h', 9, 0,
  /* 4941 */ 's', 'h', 'l', 'l', '.', 'p', 'h', 9, 0,
  /* 4950 */ 'r', 'e', 'p', 'l', '.', 'p', 'h', 9, 0,
  /* 4959 */ 's', 'h', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 4968 */ 'p', 'a', 'c', 'k', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 4979 */ 'm', 'u', 'l', '.', 'p', 'h', 9, 0,
  /* 4987 */ 's', 'u', 'b', 'q', '.', 'p', 'h', 9, 0,
  /* 4996 */ 'a', 'd', 'd', 'q', '.', 'p', 'h', 9, 0,
  /* 5005 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'p', 'h', 9, 0,
  /* 5016 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5027 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5039 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5051 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5063 */ 's', 'h', 'l', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5074 */ 'm', 'u', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5084 */ 's', 'u', 'b', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5095 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5106 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5117 */ 'a', 'b', 's', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5128 */ 's', 'u', 'b', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5139 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5150 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5162 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'p', 'h', 9, 0,
  /* 5174 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'p', 'h', 9, 0,
  /* 5185 */ 's', 'u', 'b', 'u', '.', 'p', 'h', 9, 0,
  /* 5194 */ 'a', 'd', 'd', 'u', '.', 'p', 'h', 9, 0,
  /* 5203 */ 's', 'h', 'r', 'a', 'v', '.', 'p', 'h', 9, 0,
  /* 5213 */ 's', 'h', 'l', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5223 */ 'r', 'e', 'p', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5233 */ 's', 'h', 'r', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5243 */ 'd', 'p', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5253 */ 'd', 'p', 'a', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5268 */ 'd', 'p', 's', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5283 */ 'm', 'u', 'l', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5295 */ 'd', 'p', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5308 */ 'm', 'u', 'l', 's', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5323 */ 'd', 'p', 's', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5336 */ 'd', 'p', 'a', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5350 */ 'd', 'p', 's', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5364 */ 'd', 'p', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5374 */ 'd', 'p', 'a', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5385 */ 'd', 'p', 's', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5396 */ 's', 'h', 9, 0,
  /* 5400 */ 'd', 'm', 'u', 'h', 9, 0,
  /* 5406 */ 'd', 'a', 'd', 'd', 'i', 9, 0,
  /* 5413 */ 'a', 'n', 'd', 'i', 9, 0,
  /* 5419 */ 't', 'g', 'e', 'i', 9, 0,
  /* 5425 */ 's', 'n', 'e', 'i', 9, 0,
  /* 5431 */ 't', 'n', 'e', 'i', 9, 0,
  /* 5437 */ 'd', 'a', 'h', 'i', 9, 0,
  /* 5443 */ 'm', 'f', 'h', 'i', 9, 0,
  /* 5449 */ 'm', 't', 'h', 'i', 9, 0,
  /* 5455 */ '.', 'a', 'l', 'i', 'g', 'n', 32, '2', 10, 9, 'l', 'i', 9, 0,
  /* 5469 */ 'd', 'l', 'i', 9, 0,
  /* 5474 */ 'c', 'm', 'p', 'i', 9, 0,
  /* 5480 */ 's', 'e', 'q', 'i', 9, 0,
  /* 5486 */ 't', 'e', 'q', 'i', 9, 0,
  /* 5492 */ 'x', 'o', 'r', 'i', 9, 0,
  /* 5498 */ 'd', 'a', 't', 'i', 9, 0,
  /* 5504 */ 's', 'l', 't', 'i', 9, 0,
  /* 5510 */ 't', 'l', 't', 'i', 9, 0,
  /* 5516 */ 'd', 'a', 'u', 'i', 9, 0,
  /* 5522 */ 'l', 'u', 'i', 9, 0,
  /* 5527 */ 'j', 9, 0,
  /* 5530 */ 'b', 'r', 'e', 'a', 'k', 9, 0,
  /* 5537 */ 'c', 'v', 't', '.', 'd', '.', 'l', 9, 0,
  /* 5546 */ 'c', 'v', 't', '.', 's', '.', 'l', 9, 0,
  /* 5555 */ 'b', 'a', 'l', 9, 0,
  /* 5560 */ 'j', 'a', 'l', 9, 0,
  /* 5565 */ 'b', 'g', 'e', 'z', 'a', 'l', 9, 0,
  /* 5573 */ 'b', 'l', 't', 'z', 'a', 'l', 9, 0,
  /* 5581 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5593 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5605 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5621 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5636 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5652 */ 'l', 'd', 'l', 9, 0,
  /* 5657 */ 's', 'd', 'l', 9, 0,
  /* 5662 */ 'b', 'n', 'e', 'l', 9, 0,
  /* 5668 */ 'b', 'c', '1', 'f', 'l', 9, 0,
  /* 5675 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 5689 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 5703 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 5716 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 5731 */ 's', 'y', 's', 'c', 'a', 'l', 'l', 9, 0,
  /* 5740 */ 'b', 'g', 'e', 'z', 'a', 'l', 'l', 9, 0,
  /* 5749 */ 'b', 'l', 't', 'z', 'a', 'l', 'l', 9, 0,
  /* 5758 */ 'd', 's', 'l', 'l', 9, 0,
  /* 5764 */ 'b', 'e', 'q', 'l', 9, 0,
  /* 5770 */ 'd', 's', 'r', 'l', 9, 0,
  /* 5776 */ 'b', 'c', '1', 't', 'l', 9, 0,
  /* 5783 */ 'd', 'm', 'u', 'l', 9, 0,
  /* 5789 */ 'l', 'w', 'l', 9, 0,
  /* 5794 */ 's', 'w', 'l', 9, 0,
  /* 5799 */ 'b', 'g', 'e', 'z', 'l', 9, 0,
  /* 5806 */ 'b', 'l', 'e', 'z', 'l', 9, 0,
  /* 5813 */ 'b', 'g', 't', 'z', 'l', 9, 0,
  /* 5820 */ 'b', 'l', 't', 'z', 'l', 9, 0,
  /* 5827 */ 'b', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 5835 */ 'd', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 5843 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 5849 */ 'd', 'c', 'l', 'o', 9, 0,
  /* 5855 */ 'm', 'f', 'l', 'o', 9, 0,
  /* 5861 */ 's', 'h', 'i', 'l', 'o', 9, 0,
  /* 5868 */ 'm', 't', 'l', 'o', 9, 0,
  /* 5874 */ 'd', 'b', 'i', 't', 's', 'w', 'a', 'p', 9, 0,
  /* 5884 */ 's', 'd', 'b', 'b', 'p', 9, 0,
  /* 5891 */ 'e', 'x', 't', 'p', 'd', 'p', 9, 0,
  /* 5899 */ 'm', 't', 'h', 'l', 'i', 'p', 9, 0,
  /* 5907 */ 'c', 'm', 'p', 9, 0,
  /* 5912 */ 'd', 'p', 'o', 'p', 9, 0,
  /* 5918 */ 'a', 'd', 'd', 'i', 'u', 'r', '1', 's', 'p', 9, 0,
  /* 5929 */ 'l', 'o', 'a', 'd', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 5945 */ 's', 't', 'o', 'r', 'e', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 5962 */ 'r', 'd', 'd', 's', 'p', 9, 0,
  /* 5969 */ 'w', 'r', 'd', 's', 'p', 9, 0,
  /* 5976 */ 'j', 'r', 'a', 'd', 'd', 'i', 'u', 's', 'p', 9, 0,
  /* 5987 */ 'e', 'x', 't', 'p', 9, 0,
  /* 5993 */ 'b', 'e', 'q', 9, 0,
  /* 5998 */ 's', 'e', 'q', 9, 0,
  /* 6003 */ 't', 'e', 'q', 9, 0,
  /* 6008 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6020 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6032 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6048 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6063 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6079 */ 'l', 'd', 'r', 9, 0,
  /* 6084 */ 's', 'd', 'r', 9, 0,
  /* 6089 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6103 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6117 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6130 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6145 */ 'j', 'r', 9, 0,
  /* 6149 */ 'j', 'a', 'l', 'r', 9, 0,
  /* 6155 */ 'n', 'o', 'r', 9, 0,
  /* 6160 */ 'x', 'o', 'r', 9, 0,
  /* 6165 */ 'd', 'r', 'o', 't', 'r', 9, 0,
  /* 6172 */ 'r', 'd', 'h', 'w', 'r', 9, 0,
  /* 6179 */ 'l', 'w', 'r', 9, 0,
  /* 6184 */ 's', 'w', 'r', 9, 0,
  /* 6189 */ 'm', 'i', 'n', 'a', '.', 's', 9, 0,
  /* 6197 */ 'm', 'a', 'x', 'a', '.', 's', 9, 0,
  /* 6205 */ 'n', 'm', 's', 'u', 'b', '.', 's', 9, 0,
  /* 6214 */ 'c', 'v', 't', '.', 'd', '.', 's', 9, 0,
  /* 6223 */ 'n', 'm', 'a', 'd', 'd', '.', 's', 9, 0,
  /* 6232 */ 'c', '.', 'n', 'g', 'e', '.', 's', 9, 0,
  /* 6241 */ 'c', '.', 'l', 'e', '.', 's', 9, 0,
  /* 6249 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 's', 9, 0,
  /* 6259 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 's', 9, 0,
  /* 6269 */ 'c', '.', 'o', 'l', 'e', '.', 's', 9, 0,
  /* 6278 */ 'c', 'm', 'p', '.', 's', 'l', 'e', '.', 's', 9, 0,
  /* 6289 */ 'c', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6298 */ 'c', 'm', 'p', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6309 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6321 */ 'c', '.', 'f', '.', 's', 9, 0,
  /* 6328 */ 'c', 'm', 'p', '.', 'a', 'f', '.', 's', 9, 0,
  /* 6338 */ 'c', 'm', 'p', '.', 's', 'a', 'f', '.', 's', 9, 0,
  /* 6349 */ 'm', 's', 'u', 'b', 'f', '.', 's', 9, 0,
  /* 6358 */ 'm', 'a', 'd', 'd', 'f', '.', 's', 9, 0,
  /* 6367 */ 'c', '.', 's', 'f', '.', 's', 9, 0,
  /* 6375 */ 'm', 'o', 'v', 'f', '.', 's', 9, 0,
  /* 6383 */ 'n', 'e', 'g', '.', 's', 9, 0,
  /* 6390 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 's', 9, 0,
  /* 6401 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 's', 9, 0,
  /* 6412 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 's', 9, 0,
  /* 6422 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 's', 9, 0,
  /* 6433 */ 'c', 'v', 't', '.', 'l', '.', 's', 9, 0,
  /* 6442 */ 's', 'e', 'l', '.', 's', 9, 0,
  /* 6449 */ 'c', '.', 'n', 'g', 'l', '.', 's', 9, 0,
  /* 6458 */ 'm', 'u', 'l', '.', 's', 9, 0,
  /* 6465 */ 'm', 'i', 'n', '.', 's', 9, 0,
  /* 6472 */ 'c', '.', 'u', 'n', '.', 's', 9, 0,
  /* 6480 */ 'c', 'm', 'p', '.', 'u', 'n', '.', 's', 9, 0,
  /* 6490 */ 'c', 'm', 'p', '.', 's', 'u', 'n', '.', 's', 9, 0,
  /* 6501 */ 'm', 'o', 'v', 'n', '.', 's', 9, 0,
  /* 6509 */ 'c', '.', 'e', 'q', '.', 's', 9, 0,
  /* 6517 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 's', 9, 0,
  /* 6527 */ 'c', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 6536 */ 'c', 'm', 'p', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 6547 */ 'c', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 6556 */ 'c', 'm', 'p', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 6567 */ 'c', 'm', 'p', '.', 's', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 6579 */ 'a', 'b', 's', '.', 's', 9, 0,
  /* 6586 */ 'c', 'l', 'a', 's', 's', '.', 's', 9, 0,
  /* 6595 */ 'c', '.', 'n', 'g', 't', '.', 's', 9, 0,
  /* 6604 */ 'c', '.', 'l', 't', '.', 's', 9, 0,
  /* 6612 */ 'c', 'm', 'p', '.', 'l', 't', '.', 's', 9, 0,
  /* 6622 */ 'c', '.', 'o', 'l', 't', '.', 's', 9, 0,
  /* 6631 */ 'c', 'm', 'p', '.', 's', 'l', 't', '.', 's', 9, 0,
  /* 6642 */ 'c', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 6651 */ 'c', 'm', 'p', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 6662 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 't', '.', 's', 9, 0,
  /* 6674 */ 'r', 'i', 'n', 't', '.', 's', 9, 0,
  /* 6682 */ 's', 'q', 'r', 't', '.', 's', 9, 0,
  /* 6690 */ 'm', 'o', 'v', 't', '.', 's', 9, 0,
  /* 6698 */ 'd', 'i', 'v', '.', 's', 9, 0,
  /* 6705 */ 'm', 'o', 'v', '.', 's', 9, 0,
  /* 6712 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 's', 9, 0,
  /* 6723 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 's', 9, 0,
  /* 6734 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 's', 9, 0,
  /* 6744 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 's', 9, 0,
  /* 6755 */ 'c', 'v', 't', '.', 'w', '.', 's', 9, 0,
  /* 6764 */ 'm', 'a', 'x', '.', 's', 9, 0,
  /* 6771 */ 's', 'e', 'l', 'n', 'e', 'z', '.', 's', 9, 0,
  /* 6781 */ 's', 'e', 'l', 'e', 'q', 'z', '.', 's', 9, 0,
  /* 6791 */ 'm', 'o', 'v', 'z', '.', 's', 9, 0,
  /* 6799 */ 'j', 'a', 'l', 's', 9, 0,
  /* 6805 */ 'b', 'g', 'e', 'z', 'a', 'l', 's', 9, 0,
  /* 6814 */ 'b', 'l', 't', 'z', 'a', 'l', 's', 9, 0,
  /* 6823 */ 'j', 'a', 'l', 'r', 's', 9, 0,
  /* 6830 */ 'b', 'c', '1', 't', 9, 0,
  /* 6836 */ 'w', 'a', 'i', 't', 9, 0,
  /* 6842 */ 's', 'l', 't', 9, 0,
  /* 6847 */ 't', 'l', 't', 9, 0,
  /* 6852 */ 'd', 'm', 'u', 'l', 't', 9, 0,
  /* 6859 */ 'n', 'o', 't', 9, 0,
  /* 6864 */ 'm', 'o', 'v', 't', 9, 0,
  /* 6870 */ 'l', 'b', 'u', 9, 0,
  /* 6875 */ 'd', 's', 'u', 'b', 'u', 9, 0,
  /* 6882 */ 'm', 's', 'u', 'b', 'u', 9, 0,
  /* 6889 */ 'b', 'a', 'd', 'd', 'u', 9, 0,
  /* 6896 */ 'd', 'a', 'd', 'd', 'u', 9, 0,
  /* 6903 */ 'm', 'a', 'd', 'd', 'u', 9, 0,
  /* 6910 */ 'd', 'm', 'o', 'd', 'u', 9, 0,
  /* 6917 */ 't', 'g', 'e', 'u', 9, 0,
  /* 6923 */ 'l', 'h', 'u', 9, 0,
  /* 6928 */ 'd', 'm', 'u', 'h', 'u', 9, 0,
  /* 6935 */ 'd', 'a', 'd', 'd', 'i', 'u', 9, 0,
  /* 6943 */ 't', 'g', 'e', 'i', 'u', 9, 0,
  /* 6950 */ 's', 'l', 't', 'i', 'u', 9, 0,
  /* 6957 */ 't', 'l', 't', 'i', 'u', 9, 0,
  /* 6964 */ 'v', '3', 'm', 'u', 'l', 'u', 9, 0,
  /* 6972 */ 'd', 'm', 'u', 'l', 'u', 9, 0,
  /* 6979 */ 'v', 'm', 'u', 'l', 'u', 9, 0,
  /* 6986 */ 's', 'l', 't', 'u', 9, 0,
  /* 6992 */ 't', 'l', 't', 'u', 9, 0,
  /* 6998 */ 'd', 'm', 'u', 'l', 't', 'u', 9, 0,
  /* 7006 */ 'd', 'd', 'i', 'v', 'u', 9, 0,
  /* 7013 */ 'l', 'w', 'u', 9, 0,
  /* 7018 */ 'a', 'n', 'd', '.', 'v', 9, 0,
  /* 7025 */ 'm', 'o', 'v', 'e', '.', 'v', 9, 0,
  /* 7033 */ 'b', 's', 'e', 'l', '.', 'v', 9, 0,
  /* 7041 */ 'n', 'o', 'r', '.', 'v', 9, 0,
  /* 7048 */ 'x', 'o', 'r', '.', 'v', 9, 0,
  /* 7055 */ 'b', 'z', '.', 'v', 9, 0,
  /* 7061 */ 'b', 'm', 'z', '.', 'v', 9, 0,
  /* 7068 */ 'b', 'n', 'z', '.', 'v', 9, 0,
  /* 7075 */ 'b', 'm', 'n', 'z', '.', 'v', 9, 0,
  /* 7083 */ 'd', 's', 'r', 'a', 'v', 9, 0,
  /* 7090 */ 'b', 'i', 't', 'r', 'e', 'v', 9, 0,
  /* 7098 */ 'd', 'd', 'i', 'v', 9, 0,
  /* 7104 */ 'd', 's', 'l', 'l', 'v', 9, 0,
  /* 7111 */ 'd', 's', 'r', 'l', 'v', 9, 0,
  /* 7118 */ 's', 'h', 'i', 'l', 'o', 'v', 9, 0,
  /* 7126 */ 'e', 'x', 't', 'p', 'd', 'p', 'v', 9, 0,
  /* 7135 */ 'e', 'x', 't', 'p', 'v', 9, 0,
  /* 7142 */ 'd', 'r', 'o', 't', 'r', 'v', 9, 0,
  /* 7150 */ 'i', 'n', 's', 'v', 9, 0,
  /* 7156 */ 'f', 'l', 'o', 'g', '2', '.', 'w', 9, 0,
  /* 7165 */ 'f', 'e', 'x', 'p', '2', '.', 'w', 9, 0,
  /* 7174 */ 'a', 'd', 'd', '_', 'a', '.', 'w', 9, 0,
  /* 7183 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'w', 9, 0,
  /* 7193 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'w', 9, 0,
  /* 7203 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'w', 9, 0,
  /* 7213 */ 's', 'r', 'a', '.', 'w', 9, 0,
  /* 7220 */ 'f', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 7228 */ 'f', 'm', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 7237 */ 'n', 'l', 'o', 'c', '.', 'w', 9, 0,
  /* 7245 */ 'n', 'l', 'z', 'c', '.', 'w', 9, 0,
  /* 7253 */ 'c', 'v', 't', '.', 'd', '.', 'w', 9, 0,
  /* 7262 */ 'f', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 7270 */ 'f', 'm', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 7279 */ 's', 'l', 'd', '.', 'w', 9, 0,
  /* 7286 */ 'p', 'c', 'k', 'o', 'd', '.', 'w', 9, 0,
  /* 7295 */ 'i', 'l', 'v', 'o', 'd', '.', 'w', 9, 0,
  /* 7304 */ 'f', 'c', 'l', 'e', '.', 'w', 9, 0,
  /* 7312 */ 'f', 's', 'l', 'e', '.', 'w', 9, 0,
  /* 7320 */ 'f', 'c', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 7329 */ 'f', 's', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 7338 */ 'f', 'c', 'n', 'e', '.', 'w', 9, 0,
  /* 7346 */ 'f', 's', 'n', 'e', '.', 'w', 9, 0,
  /* 7354 */ 'f', 'c', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 7363 */ 'f', 's', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 7372 */ 'i', 'n', 's', 'v', 'e', '.', 'w', 9, 0,
  /* 7381 */ 'f', 'c', 'a', 'f', '.', 'w', 9, 0,
  /* 7389 */ 'f', 's', 'a', 'f', '.', 'w', 9, 0,
  /* 7397 */ 'v', 's', 'h', 'f', '.', 'w', 9, 0,
  /* 7405 */ 'b', 'n', 'e', 'g', '.', 'w', 9, 0,
  /* 7413 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 7429 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 7442 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '_', 'r', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 7460 */ 'p', 'r', 'e', 'c', 'r', 'q', '_', 'r', 's', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 7476 */ 's', 'u', 'b', 'q', 'h', '.', 'w', 9, 0,
  /* 7485 */ 'a', 'd', 'd', 'q', 'h', '.', 'w', 9, 0,
  /* 7494 */ 's', 'r', 'a', 'i', '.', 'w', 9, 0,
  /* 7502 */ 's', 'l', 'd', 'i', '.', 'w', 9, 0,
  /* 7510 */ 'b', 'n', 'e', 'g', 'i', '.', 'w', 9, 0,
  /* 7519 */ 's', 'l', 'l', 'i', '.', 'w', 9, 0,
  /* 7527 */ 's', 'r', 'l', 'i', '.', 'w', 9, 0,
  /* 7535 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'w', 9, 0,
  /* 7545 */ 'c', 'e', 'q', 'i', '.', 'w', 9, 0,
  /* 7553 */ 's', 'r', 'a', 'r', 'i', '.', 'w', 9, 0,
  /* 7562 */ 'b', 'c', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 7571 */ 's', 'r', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 7580 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'w', 9, 0,
  /* 7590 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'w', 9, 0,
  /* 7600 */ 'b', 's', 'e', 't', 'i', '.', 'w', 9, 0,
  /* 7609 */ 's', 'u', 'b', 'v', 'i', '.', 'w', 9, 0,
  /* 7618 */ 'a', 'd', 'd', 'v', 'i', '.', 'w', 9, 0,
  /* 7627 */ 'd', 'p', 'a', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 7640 */ 'd', 'p', 's', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 7653 */ 'f', 'i', 'l', 'l', '.', 'w', 9, 0,
  /* 7661 */ 's', 'l', 'l', '.', 'w', 9, 0,
  /* 7668 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'w', 9, 0,
  /* 7678 */ 'f', 'f', 'q', 'l', '.', 'w', 9, 0,
  /* 7686 */ 's', 'r', 'l', '.', 'w', 9, 0,
  /* 7693 */ 'b', 'i', 'n', 's', 'l', '.', 'w', 9, 0,
  /* 7702 */ 'f', 'm', 'u', 'l', '.', 'w', 9, 0,
  /* 7710 */ 'i', 'l', 'v', 'l', '.', 'w', 9, 0,
  /* 7718 */ 'f', 'm', 'i', 'n', '.', 'w', 9, 0,
  /* 7726 */ 'f', 'c', 'u', 'n', '.', 'w', 9, 0,
  /* 7734 */ 'f', 's', 'u', 'n', '.', 'w', 9, 0,
  /* 7742 */ 'f', 'e', 'x', 'd', 'o', '.', 'w', 9, 0,
  /* 7751 */ 'f', 'r', 'c', 'p', '.', 'w', 9, 0,
  /* 7759 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'w', 9, 0,
  /* 7769 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'w', 9, 0,
  /* 7779 */ 'm', 'u', 'l', '_', 'q', '.', 'w', 9, 0,
  /* 7788 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 7799 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 7810 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 7820 */ 'f', 'c', 'e', 'q', '.', 'w', 9, 0,
  /* 7828 */ 'f', 's', 'e', 'q', '.', 'w', 9, 0,
  /* 7836 */ 'f', 'c', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 7845 */ 'f', 's', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 7854 */ 'f', 't', 'q', '.', 'w', 9, 0,
  /* 7861 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'w', 9, 0,
  /* 7871 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 7882 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 7893 */ 'e', 'x', 't', 'r', '_', 'r', '.', 'w', 9, 0,
  /* 7903 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 7914 */ 'e', 'x', 't', 'r', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 7925 */ 's', 'r', 'a', 'r', '.', 'w', 9, 0,
  /* 7933 */ 'b', 'c', 'l', 'r', '.', 'w', 9, 0,
  /* 7941 */ 's', 'r', 'l', 'r', '.', 'w', 9, 0,
  /* 7949 */ 'f', 'c', 'o', 'r', '.', 'w', 9, 0,
  /* 7957 */ 'f', 's', 'o', 'r', '.', 'w', 9, 0,
  /* 7965 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'w', 9, 0,
  /* 7975 */ 'f', 'f', 'q', 'r', '.', 'w', 9, 0,
  /* 7983 */ 'b', 'i', 'n', 's', 'r', '.', 'w', 9, 0,
  /* 7992 */ 'e', 'x', 't', 'r', '.', 'w', 9, 0,
  /* 8000 */ 'i', 'l', 'v', 'r', '.', 'w', 9, 0,
  /* 8008 */ 'c', 'v', 't', '.', 's', '.', 'w', 9, 0,
  /* 8017 */ 'a', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8027 */ 'h', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8037 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8048 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'w', 9, 0,
  /* 8060 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8070 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8081 */ 'm', 'o', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8090 */ 'c', 'l', 'e', '_', 's', '.', 'w', 9, 0,
  /* 8099 */ 'a', 'v', 'e', '_', 's', '.', 'w', 9, 0,
  /* 8108 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8118 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8128 */ 'c', 'l', 't', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8138 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8148 */ 's', 'h', 'l', 'l', '_', 's', '.', 'w', 9, 0,
  /* 8158 */ 'm', 'i', 'n', '_', 's', '.', 'w', 9, 0,
  /* 8167 */ 'd', 'o', 't', 'p', '_', 's', '.', 'w', 9, 0,
  /* 8177 */ 's', 'u', 'b', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8187 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8197 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8207 */ 'a', 'b', 's', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8217 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'w', 9, 0,
  /* 8227 */ 's', 'u', 'b', 's', '_', 's', '.', 'w', 9, 0,
  /* 8237 */ 'a', 'd', 'd', 's', '_', 's', '.', 'w', 9, 0,
  /* 8247 */ 's', 'a', 't', '_', 's', '.', 'w', 9, 0,
  /* 8256 */ 'c', 'l', 't', '_', 's', '.', 'w', 9, 0,
  /* 8265 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 8276 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 8287 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'w', 9, 0,
  /* 8299 */ 'd', 'i', 'v', '_', 's', '.', 'w', 9, 0,
  /* 8308 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'w', 9, 0,
  /* 8319 */ 'm', 'a', 'x', '_', 's', '.', 'w', 9, 0,
  /* 8328 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'w', 9, 0,
  /* 8338 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'w', 9, 0,
  /* 8349 */ 'e', 'x', 't', 'r', '_', 'r', 's', '.', 'w', 9, 0,
  /* 8360 */ 'e', 'x', 't', 'r', 'v', '_', 'r', 's', '.', 'w', 9, 0,
  /* 8372 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'w', 9, 0,
  /* 8382 */ 's', 'p', 'l', 'a', 't', '.', 'w', 9, 0,
  /* 8391 */ 'b', 's', 'e', 't', '.', 'w', 9, 0,
  /* 8399 */ 'f', 'c', 'l', 't', '.', 'w', 9, 0,
  /* 8407 */ 'f', 's', 'l', 't', '.', 'w', 9, 0,
  /* 8415 */ 'f', 'c', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 8424 */ 'f', 's', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 8433 */ 'p', 'c', 'n', 't', '.', 'w', 9, 0,
  /* 8441 */ 'f', 'r', 'i', 'n', 't', '.', 'w', 9, 0,
  /* 8450 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'w', 9, 0,
  /* 8460 */ 'f', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 8469 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 8479 */ 's', 't', '.', 'w', 9, 0,
  /* 8485 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 8495 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 8505 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 8516 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'w', 9, 0,
  /* 8528 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 8538 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 8549 */ 'm', 'o', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 8558 */ 'c', 'l', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 8567 */ 'a', 'v', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 8576 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 8586 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 8596 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 8606 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 8616 */ 'm', 'i', 'n', '_', 'u', '.', 'w', 9, 0,
  /* 8625 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'w', 9, 0,
  /* 8635 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'w', 9, 0,
  /* 8645 */ 's', 'u', 'b', 's', '_', 'u', '.', 'w', 9, 0,
  /* 8655 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'w', 9, 0,
  /* 8665 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'w', 9, 0,
  /* 8677 */ 's', 'a', 't', '_', 'u', '.', 'w', 9, 0,
  /* 8686 */ 'c', 'l', 't', '_', 'u', '.', 'w', 9, 0,
  /* 8695 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 8706 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 8717 */ 'd', 'i', 'v', '_', 'u', '.', 'w', 9, 0,
  /* 8726 */ 'm', 'a', 'x', '_', 'u', '.', 'w', 9, 0,
  /* 8735 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'w', 9, 0,
  /* 8745 */ 'm', 's', 'u', 'b', 'v', '.', 'w', 9, 0,
  /* 8754 */ 'm', 'a', 'd', 'd', 'v', '.', 'w', 9, 0,
  /* 8763 */ 'p', 'c', 'k', 'e', 'v', '.', 'w', 9, 0,
  /* 8772 */ 'i', 'l', 'v', 'e', 'v', '.', 'w', 9, 0,
  /* 8781 */ 'f', 'd', 'i', 'v', '.', 'w', 9, 0,
  /* 8789 */ 'm', 'u', 'l', 'v', '.', 'w', 9, 0,
  /* 8797 */ 'e', 'x', 't', 'r', 'v', '.', 'w', 9, 0,
  /* 8806 */ 'f', 'm', 'a', 'x', '.', 'w', 9, 0,
  /* 8814 */ 'b', 'z', '.', 'w', 9, 0,
  /* 8820 */ 'b', 'n', 'z', '.', 'w', 9, 0,
  /* 8827 */ 'l', 'w', 9, 0,
  /* 8831 */ 's', 'w', 9, 0,
  /* 8835 */ 'l', 'h', 'x', 9, 0,
  /* 8840 */ 'j', 'a', 'l', 'x', 9, 0,
  /* 8846 */ 'l', 'b', 'u', 'x', 9, 0,
  /* 8852 */ 'l', 'w', 'x', 9, 0,
  /* 8857 */ 'b', 'g', 'e', 'z', 9, 0,
  /* 8863 */ 'b', 'l', 'e', 'z', 9, 0,
  /* 8869 */ 'b', 'n', 'e', 'z', 9, 0,
  /* 8875 */ 's', 'e', 'l', 'n', 'e', 'z', 9, 0,
  /* 8883 */ 'b', 't', 'n', 'e', 'z', 9, 0,
  /* 8890 */ 'd', 'c', 'l', 'z', 9, 0,
  /* 8896 */ 'b', 'e', 'q', 'z', 9, 0,
  /* 8902 */ 's', 'e', 'l', 'e', 'q', 'z', 9, 0,
  /* 8910 */ 'b', 't', 'e', 'q', 'z', 9, 0,
  /* 8917 */ 'b', 'g', 't', 'z', 9, 0,
  /* 8923 */ 'b', 'l', 't', 'z', 9, 0,
  /* 8929 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 8935 */ 's', 'e', 'b', 9, 32, 0,
  /* 8941 */ 'j', 'r', 'c', 9, 32, 0,
  /* 8947 */ 's', 'e', 'h', 9, 32, 0,
  /* 8953 */ 'd', 'd', 'i', 'v', 'u', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 8967 */ 'd', 'd', 'i', 'v', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 8980 */ 'a', 'd', 'd', 'i', 'u', 9, '$', 's', 'p', ',', 32, 0,
  /* 8992 */ 'c', 'i', 'n', 's', '3', '2', 32, 0,
  /* 9000 */ 'e', 'x', 't', 's', '3', '2', 32, 0,
  /* 9008 */ 's', 'y', 'n', 'c', 32, 0,
  /* 9014 */ 9, '.', 'w', 'o', 'r', 'd', 32, 0,
  /* 9022 */ 'd', 'i', 'n', 's', 'm', 32, 0,
  /* 9029 */ 'd', 'e', 'x', 't', 'm', 32, 0,
  /* 9036 */ 'c', 'i', 'n', 's', 32, 0,
  /* 9042 */ 'd', 'i', 'n', 's', 32, 0,
  /* 9048 */ 'e', 'x', 't', 's', 32, 0,
  /* 9054 */ 'd', 'e', 'x', 't', 32, 0,
  /* 9060 */ 'd', 'i', 'n', 's', 'u', 32, 0,
  /* 9067 */ 'd', 'e', 'x', 't', 'u', 32, 0,
  /* 9074 */ 'b', 'c', '1', 'n', 'e', 'z', 32, 0,
  /* 9082 */ 'b', 'c', '2', 'n', 'e', 'z', 32, 0,
  /* 9090 */ 'b', 'c', '1', 'e', 'q', 'z', 32, 0,
  /* 9098 */ 'b', 'c', '2', 'e', 'q', 'z', 32, 0,
  /* 9106 */ 'c', '.', 0,
  /* 9109 */ 'b', 'r', 'e', 'a', 'k', 32, '0', 0,
  /* 9117 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 9130 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 9137 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 9147 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 9162 */ 'j', 'r', 'c', 9, 32, '$', 'r', 'a', 0,
  /* 9171 */ 'j', 'r', 9, 32, '$', 'r', 'a', 0,
  /* 9179 */ 'e', 'h', 'b', 0,
  /* 9183 */ 'p', 'a', 'u', 's', 'e', 0,
  /* 9189 */ 't', 'l', 'b', 'w', 'i', 0,
  /* 9195 */ 'f', 'o', 'o', 0,
  /* 9199 */ 't', 'l', 'b', 'p', 0,
  /* 9204 */ 's', 's', 'n', 'o', 'p', 0,
  /* 9210 */ 't', 'l', 'b', 'r', 0,
  /* 9215 */ 't', 'l', 'b', 'w', 'r', 0,
  /* 9221 */ 'd', 'e', 'r', 'e', 't', 0,
  /* 9227 */ 'w', 'a', 'i', 't', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits1 = OpInfo[MI->getOpcode()];
  uint64_t Bits2 = OpInfo2[MI->getOpcode()];
  uint64_t Bits = (Bits2 << 32) | Bits1;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 14) & 7) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, Break16, CONSTPOOL_EN...
    return;
    break;
  case 1:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDIUPC, ADDIUR1SP_MM, ADDIUR2_MM...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADDIUS5_MM, CTC1, CTC1_MM, DAHI, DATI, DMTC1, MTC1, MTC1_MM, MTHC1_MM,...
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 3:
    // AND16_MM, MTHC1_D32, MTHC1_D64, OR16_MM, XOR16_MM
    printOperand(MI, 2, O); 
    O << ", "; 
    break;
  case 4:
    // CACHE, CACHE_R6, PREF, PREF_R6
    printUnsignedImm(MI, 2, O); 
    O << ", "; 
    printMemOperand(MI, 0, O); 
    return;
    break;
  case 5:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64, FCMP_S32, FCMP_S32_MM
    printFCCOperand(MI, 2, O); 
    break;
  case 6:
    // SelBeqZ, SelBneZ, SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZ...
    printOperand(MI, 3, O); 
    break;
  }


  // Fragment 1 encoded into 4 bits for 16 unique commands.
  switch ((Bits >> 17) & 15) {
  default:   // unreachable.
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDIUPC, ADDIUR1SP_MM, ADDIUR2_MM...
    O << ", "; 
    break;
  case 1:
    // ADDIUS5_MM, DAHI, DATI, MultRxRyRz16, MultuRxRyRz16, SltCCRxRy16, Slti...
    printOperand(MI, 2, O); 
    break;
  case 2:
    // ADDIUSP_MM, AddiuSpImmX16, BAL, BALC, BC, BPOSGE32, BimmX16, BteqzX16,...
    return;
    break;
  case 3:
    // AND16_MM, OR16_MM, XOR16_MM
    printOperand(MI, 1, O); 
    return;
    break;
  case 4:
    // AddiuRxPcImmX16
    O << ", $pc, "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 5:
    // AddiuSpImm16, Bimm16
    O << " # 16 bit inst"; 
    return;
    break;
  case 6:
    // Bteqz16, Btnez16
    O << "  # 16 bit inst"; 
    return;
    break;
  case 7:
    // CTC1, CTC1_MM, DMTC1, MTC1, MTC1_MM, MTHC1_D32, MTHC1_D64, MTHC1_MM, M...
    printOperand(MI, 0, O); 
    return;
    break;
  case 8:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64
    O << ".d\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 9:
    // FCMP_S32, FCMP_S32_MM
    O << ".s\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 10:
    // INSERT_B, INSERT_D, INSERT_H, INSERT_W, INSVE_B, INSVE_D, INSVE_H, INS...
    O << '['; 
    break;
  case 11:
    // Jal16
    O << "\n\tnop"; 
    return;
    break;
  case 12:
    // JalB16
    O << "\t# branch\n\tnop"; 
    return;
    break;
  case 13:
    // LwConstant32
    O << ", 1f\n\tb\t2f\n\t.align\t2\n1: \t.word\t"; 
    printOperand(MI, 1, O); 
    O << "\n2:"; 
    return;
    break;
  case 14:
    // SC, SCD, SCD_R6, SC_MM, SC_R6
    printMemOperand(MI, 2, O); 
    return;
    break;
  case 15:
    // SelBeqZ, SelBneZ
    O << ", .+4\n\t\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 21) & 15) {
  default:   // unreachable.
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDIUPC, ADDIUR1SP_MM, ADDIUR2_MM...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ADDIUS5_MM, DAHI, DATI
    return;
    break;
  case 2:
    // AddiuRxRxImm16, AddiuRxRxImmX16, AndRxRxRy16, BINSLI_B, BINSLI_D, BINS...
    printOperand(MI, 2, O); 
    break;
  case 3:
    // AddiuRxRyOffMemX16, LEA_ADDiu, LEA_ADDiu64, LEA_ADDiu_MM
    printMemOperandEA(MI, 1, O); 
    return;
    break;
  case 4:
    // INSERT_B, INSERT_D, INSERT_H, INSERT_W
    printUnsignedImm(MI, 3, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // INSVE_B, INSVE_D, INSVE_H, INSVE_W
    printUnsignedImm(MI, 2, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printUnsignedImm(MI, 4, O); 
    O << ']'; 
    return;
    break;
  case 6:
    // LB, LB64, LB_MM, LBu, LBu64, LBu_MM, LD, LDC1, LDC164, LDC1_MM, LDC2, ...
    printMemOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // LUi, LUi64, LUi_MM, LoadAddr32Imm, LoadImm32Reg, RDDSP, REPL_PH, REPL_...
    printUnsignedImm(MI, 1, O); 
    return;
    break;
  case 8:
    // MultRxRyRz16, MultuRxRyRz16
    O << "\n\tmflo\t"; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 9:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    printOperand(MI, 4, O); 
    break;
  case 10:
    // SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImmX16, SltuCCRxRy16, SltuRxRyRz...
    O << "\n\tmove\t"; 
    printOperand(MI, 0, O); 
    O << ", $t8"; 
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 25) & 15) {
  default:   // unreachable.
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADDIUPC, ADDIUR1SP_MM, ALUIPC, AUIPC, ...
    return;
    break;
  case 1:
    // ADD, ADDIUR2_MM, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, AD...
    O << ", "; 
    break;
  case 2:
    // AddiuRxRxImm16, LwRxPcTcp16
    O << "\t# 16 bit inst"; 
    return;
    break;
  case 3:
    // BeqzRxImm16, BnezRxImm16
    O << "  # 16 bit inst"; 
    return;
    break;
  case 4:
    // BteqzT8CmpX16, BteqzT8CmpiX16, BteqzT8SltX16, BteqzT8SltiX16, BteqzT8S...
    O << "\n\tbteqz\t"; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // BtnezT8CmpX16, BtnezT8CmpiX16, BtnezT8SltX16, BtnezT8SltiX16, BtnezT8S...
    O << "\n\tbtnez\t"; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 6:
    // COPY_S_B, COPY_S_D, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_D, COPY_U_H, ...
    O << '['; 
    break;
  case 7:
    // CmpiRxImm16, LiRxImm16, SltiRxImm16, SltiuRxImm16
    O << " \t# 16 bit inst"; 
    return;
    break;
  case 8:
    // DSLL64_32
    O << ", 32"; 
    return;
    break;
  case 9:
    // GotPrologue16
    O << "\n\taddiu\t"; 
    printOperand(MI, 1, O); 
    O << ", $pc, "; 
    printOperand(MI, 3, O); 
    O << "\n "; 
    return;
    break;
  case 10:
    // LBUX, LDXC1, LDXC164, LHX, LUXC1, LUXC164, LUXC1_MM, LWX, LWXC1, LWXC1...
    O << '('; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 11:
    // LwRxSpImmX16, SwRxSpImmX16
    O << " ( "; 
    printOperand(MI, 1, O); 
    O << " ); "; 
    return;
    break;
  case 12:
    // SLL64_32, SLL64_64
    O << ", 0"; 
    return;
    break;
  case 13:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    O << "\n\tbteqz\t.+4\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 14:
    // SelTBtneZCmp, SelTBtneZCmpi, SelTBtneZSlt, SelTBtneZSlti, SelTBtneZSlt...
    O << "\n\tbtnez\t.+4\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 29) & 7) {
  default:   // unreachable.
  case 0:
    // ADD, ADDIUR2_MM, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, AD...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ADDVI_B, ADDVI_D, ADDVI_H, ADDVI_W, ANDI_B, BCLRI_B, BCLRI_D, BCLRI_H,...
    printUnsignedImm8(MI, 2, O); 
    break;
  case 2:
    // ANDi, ANDi64, ANDi_MM, APPEND, BALIGN, CINS, CINS32, DEXT, DEXTM, DEXT...
    printUnsignedImm(MI, 2, O); 
    break;
  case 3:
    // BINSLI_B, BINSLI_D, BINSLI_H, BINSLI_W, BINSRI_B, BINSRI_D, BINSRI_H, ...
    printUnsignedImm8(MI, 3, O); 
    break;
  case 4:
    // BINSL_B, BINSL_D, BINSL_H, BINSL_W, BINSR_B, BINSR_D, BINSR_H, BINSR_W...
    printOperand(MI, 3, O); 
    break;
  }


  // Fragment 5 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 32) & 3) {
  default:   // unreachable.
  case 0:
    // ADD, ADDIUR2_MM, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, AD...
    return;
    break;
  case 1:
    // ALIGN, CINS, CINS32, DALIGN, DEXT, DEXTM, DEXTU, DINS, DINSM, DINSU, D...
    O << ", "; 
    break;
  case 2:
    // COPY_S_B, COPY_S_D, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_D, COPY_U_H, ...
    O << ']'; 
    return;
    break;
  }


  // Fragment 6 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 34) & 1) {
    // DEXT, DEXTM, DEXTU, DINS, DINSM, DINSU, EXT, EXT_MM, INS, INS_MM, MADD...
    printOperand(MI, 3, O); 
    return;
  } else {
    // ALIGN, CINS, CINS32, DALIGN, DLSA, DLSA_R6, EXTS, EXTS32, LSA, LSA_R6
    printUnsignedImm(MI, 3, O); 
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *MipsInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 386 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'f', '1', '0', 0,
  /* 4 */ 'w', '1', '0', 0,
  /* 8 */ 'f', '2', '0', 0,
  /* 12 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '0', 0,
  /* 25 */ 'w', '2', '0', 0,
  /* 29 */ 'f', '3', '0', 0,
  /* 33 */ 'w', '3', '0', 0,
  /* 37 */ 'a', 'c', '0', 0,
  /* 41 */ 'f', 'c', 'c', '0', 0,
  /* 46 */ 'f', '0', 0,
  /* 49 */ 'm', 'p', 'l', '0', 0,
  /* 54 */ 'p', '0', 0,
  /* 57 */ 'w', '0', 0,
  /* 60 */ 'f', '1', '1', 0,
  /* 64 */ 'w', '1', '1', 0,
  /* 68 */ 'f', '2', '1', 0,
  /* 72 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '1', 0,
  /* 85 */ 'w', '2', '1', 0,
  /* 89 */ 'f', '3', '1', 0,
  /* 93 */ 'w', '3', '1', 0,
  /* 97 */ 'a', 'c', '1', 0,
  /* 101 */ 'f', 'c', 'c', '1', 0,
  /* 106 */ 'f', '1', 0,
  /* 109 */ 'm', 'p', 'l', '1', 0,
  /* 114 */ 'p', '1', 0,
  /* 117 */ 'w', '1', 0,
  /* 120 */ 'f', '1', '2', 0,
  /* 124 */ 'w', '1', '2', 0,
  /* 128 */ 'f', '2', '2', 0,
  /* 132 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '2', 0,
  /* 145 */ 'w', '2', '2', 0,
  /* 149 */ 'a', 'c', '2', 0,
  /* 153 */ 'f', 'c', 'c', '2', 0,
  /* 158 */ 'f', '2', 0,
  /* 161 */ 'm', 'p', 'l', '2', 0,
  /* 166 */ 'p', '2', 0,
  /* 169 */ 'w', '2', 0,
  /* 172 */ 'f', '1', '3', 0,
  /* 176 */ 'w', '1', '3', 0,
  /* 180 */ 'f', '2', '3', 0,
  /* 184 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '3', 0,
  /* 197 */ 'w', '2', '3', 0,
  /* 201 */ 'a', 'c', '3', 0,
  /* 205 */ 'f', 'c', 'c', '3', 0,
  /* 210 */ 'f', '3', 0,
  /* 213 */ 'w', '3', 0,
  /* 216 */ 'f', '1', '4', 0,
  /* 220 */ 'w', '1', '4', 0,
  /* 224 */ 'f', '2', '4', 0,
  /* 228 */ 'w', '2', '4', 0,
  /* 232 */ 'f', 'c', 'c', '4', 0,
  /* 237 */ 'f', '4', 0,
  /* 240 */ 'w', '4', 0,
  /* 243 */ 'f', '1', '5', 0,
  /* 247 */ 'w', '1', '5', 0,
  /* 251 */ 'f', '2', '5', 0,
  /* 255 */ 'w', '2', '5', 0,
  /* 259 */ 'f', 'c', 'c', '5', 0,
  /* 264 */ 'f', '5', 0,
  /* 267 */ 'w', '5', 0,
  /* 270 */ 'f', '1', '6', 0,
  /* 274 */ 'w', '1', '6', 0,
  /* 278 */ 'f', '2', '6', 0,
  /* 282 */ 'w', '2', '6', 0,
  /* 286 */ 'f', 'c', 'c', '6', 0,
  /* 291 */ 'f', '6', 0,
  /* 294 */ 'w', '6', 0,
  /* 297 */ 'f', '1', '7', 0,
  /* 301 */ 'w', '1', '7', 0,
  /* 305 */ 'f', '2', '7', 0,
  /* 309 */ 'w', '2', '7', 0,
  /* 313 */ 'f', 'c', 'c', '7', 0,
  /* 318 */ 'f', '7', 0,
  /* 321 */ 'w', '7', 0,
  /* 324 */ 'f', '1', '8', 0,
  /* 328 */ 'w', '1', '8', 0,
  /* 332 */ 'f', '2', '8', 0,
  /* 336 */ 'w', '2', '8', 0,
  /* 340 */ 'f', '8', 0,
  /* 343 */ 'w', '8', 0,
  /* 346 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '1', '6', '_', '1', '9', 0,
  /* 362 */ 'f', '1', '9', 0,
  /* 366 */ 'w', '1', '9', 0,
  /* 370 */ 'f', '2', '9', 0,
  /* 374 */ 'w', '2', '9', 0,
  /* 378 */ 'f', '9', 0,
  /* 381 */ 'w', '9', 0,
  /* 384 */ 'D', 'S', 'P', 'E', 'F', 'I', 0,
  /* 391 */ 'r', 'a', 0,
  /* 394 */ 'p', 'c', 0,
  /* 397 */ 'D', 'S', 'P', 'C', 'C', 'o', 'n', 'd', 0,
  /* 406 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', 0,
  /* 417 */ 'h', 'i', 0,
  /* 420 */ 'l', 'o', 0,
  /* 423 */ 'z', 'e', 'r', 'o', 0,
  /* 428 */ 'f', 'p', 0,
  /* 431 */ 'g', 'p', 0,
  /* 434 */ 's', 'p', 0,
  /* 437 */ 'D', 'S', 'P', 'P', 'o', 's', 0,
  /* 444 */ 'D', 'S', 'P', 'S', 'C', 'o', 'u', 'n', 't', 0,
  /* 454 */ 'D', 'S', 'P', 'C', 'a', 'r', 'r', 'y', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    62, 397, 454, 384, 406, 437, 444, 428, 431, 122, 62, 2, 272, 218, 
    245, 174, 299, 394, 391, 434, 423, 218, 245, 272, 299, 37, 97, 149, 
    201, 62, 2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 2, 62, 
    122, 174, 218, 245, 272, 299, 326, 360, 1, 61, 121, 173, 217, 244, 
    271, 298, 325, 359, 9, 69, 129, 181, 225, 252, 279, 306, 333, 371, 
    30, 90, 1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 
    129, 181, 225, 252, 279, 306, 333, 371, 30, 90, 46, 158, 237, 291, 
    340, 0, 120, 216, 270, 324, 8, 128, 224, 278, 332, 29, 12, 72, 
    132, 184, 46, 106, 158, 210, 237, 264, 291, 318, 340, 378, 0, 60, 
    120, 172, 216, 243, 270, 297, 324, 362, 8, 68, 128, 180, 224, 251, 
    278, 305, 332, 370, 29, 89, 41, 101, 153, 205, 232, 259, 286, 313, 
    2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 1, 61, 121, 173, 
    217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 225, 252, 279, 306, 
    333, 371, 30, 90, 428, 46, 106, 158, 210, 237, 264, 291, 318, 340, 
    378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 362, 8, 68, 128, 
    180, 224, 251, 278, 305, 332, 370, 29, 89, 431, 37, 97, 149, 201, 
    2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 1, 61, 121, 173, 
    217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 225, 252, 279, 306, 
    333, 371, 30, 90, 279, 306, 37, 97, 149, 201, 49, 109, 161, 54, 
    114, 166, 391, 271, 298, 325, 359, 9, 69, 129, 181, 434, 326, 360, 
    1, 61, 121, 173, 217, 244, 225, 252, 122, 174, 57, 117, 169, 213, 
    240, 267, 294, 321, 343, 381, 4, 64, 124, 176, 220, 247, 274, 301, 
    328, 366, 25, 85, 145, 197, 228, 255, 282, 309, 336, 374, 33, 93, 
    423, 218, 245, 272, 299, 37, 46, 106, 158, 210, 237, 264, 291, 318, 
    340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 362, 8, 68, 
    128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 346, 417, 279, 306, 
    420, 271, 298, 325, 359, 9, 69, 129, 181, 326, 360, 1, 61, 121, 
    173, 217, 244, 225, 252, 122, 174, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool MipsInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case Mips::ADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (ADDu GPR32Opnd:$dst, GPR32Opnd:$src, ZERO)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::BC1F:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1F FCC0, brtarget:$offset)
      AsmString = "bc1f $\x02";
      break;
    }
    return false;
  case Mips::BC1FL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1FL FCC0, brtarget:$offset)
      AsmString = "bc1fl $\x02";
      break;
    }
    return false;
  case Mips::BC1T:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1T FCC0, brtarget:$offset)
      AsmString = "bc1t $\x02";
      break;
    }
    return false;
  case Mips::BC1TL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1TL FCC0, brtarget:$offset)
      AsmString = "bc1tl $\x02";
      break;
    }
    return false;
  case Mips::BREAK:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK 0, 0)
      AsmString = "break";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK uimm10:$imm, 0)
      AsmString = "break $\x01";
      break;
    }
    return false;
  case Mips::DADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (DADDu GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::DI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::EI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::JALR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR ZERO, GPR32Opnd:$rs)
      AsmString = "jr $\x02";
      break;
    }
    return false;
  case Mips::JALR64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO_64 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR64 ZERO_64, GPR64Opnd:$rs)
      AsmString = "jr $\x02";
      break;
    }
    return false;
  case Mips::JALR_HB:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR_HB RA, GPR32Opnd:$rs)
      AsmString = "jalr.hb $\x02";
      break;
    }
    return false;
  case Mips::SDBBP:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SDBBP_R6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP_R6 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SLL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUB GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    return false;
  case Mips::SUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBu GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "negu $\x01, $\x03";
      break;
    }
    return false;
  case Mips::SYNC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC 0)
      AsmString = "sync";
      break;
    }
    return false;
  case Mips::SYSCALL:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYSCALL 0)
      AsmString = "syscall";
      break;
    }
    return false;
  case Mips::TEQ:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TEQ GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "teq $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tge $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGEU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGEU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tgeu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLT:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLT GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tlt $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLTU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLTU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tltu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TNE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TNE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tne $\x01, $\x02";
      break;
    }
    return false;
  case Mips::WAIT_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (WAIT_MM 0)
      AsmString = "wait";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '	' &&
         AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void MipsInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx, raw_ostream &OS) {
  llvm_unreachable("Unknown PrintMethod kind");
}

#endif // PRINT_ALIAS_INSTR
