/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void AArch64AppleInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    11121U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    11114U,	// BUNDLE
    11131U,	// LIFETIME_START
    11101U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    17404U,	// ABSv16i8
    67152305U,	// ABSv1i64
    24696U,	// ABSv2i32
    19950U,	// ABSv2i64
    21249U,	// ABSv4i16
    26581U,	// ABSv4i32
    22582U,	// ABSv8i16
    18353U,	// ABSv8i8
    2214635977U,	// ADCSWr
    2214635977U,	// ADCSXr
    2214627622U,	// ADCWr
    2214627622U,	// ADCXr
    2147507969U,	// ADDHNv2i64_v2i32
    2281759472U,	// ADDHNv2i64_v4i32
    2147504609U,	// ADDHNv4i32_v4i16
    2281755799U,	// ADDHNv4i32_v8i16
    2281750749U,	// ADDHNv8i16_v16i8
    2147501741U,	// ADDHNv8i16_v8i8
    2147500917U,	// ADDPv16i8
    2147508120U,	// ADDPv2i32
    2147503422U,	// ADDPv2i64
    36158U,	// ADDPv2i64p
    2147504739U,	// ADDPv4i16
    2147510005U,	// ADDPv4i32
    2147506072U,	// ADDPv8i16
    2147501879U,	// ADDPv8i8
    2214635989U,	// ADDSWri
    0U,	// ADDSWrr
    2214635989U,	// ADDSWrs
    2214635989U,	// ADDSWrx
    2214635989U,	// ADDSXri
    0U,	// ADDSXrr
    2214635989U,	// ADDSXrs
    2214635989U,	// ADDSXrx
    2214635989U,	// ADDSXrx64
    33905U,	// ADDVv16i8v
    37705U,	// ADDVv4i16v
    43192U,	// ADDVv4i32v
    39038U,	// ADDVv8i16v
    34842U,	// ADDVv8i8v
    2214629171U,	// ADDWri
    0U,	// ADDWrr
    2214629171U,	// ADDWrs
    2214629171U,	// ADDWrx
    2214629171U,	// ADDXri
    0U,	// ADDXrr
    2214629171U,	// ADDXrs
    2214629171U,	// ADDXrx
    2214629171U,	// ADDXrx64
    2147500607U,	// ADDv16i8
    2214629171U,	// ADDv1i64
    2147507569U,	// ADDv2i32
    2147502916U,	// ADDv2i64
    2147504352U,	// ADDv4i16
    2147509350U,	// ADDv4i32
    2147505639U,	// ADDv8i16
    2147501493U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    67148694U,	// ADR
    201366315U,	// ADRP
    134267531U,	// AESDrr
    134267561U,	// AESErr
    16913U,	// AESIMCrr
    16925U,	// AESMCrr
    2214635995U,	// ANDSWri
    0U,	// ANDSWrr
    2214635995U,	// ANDSWrs
    2214635995U,	// ANDSXri
    0U,	// ANDSXrr
    2214635995U,	// ANDSXrs
    2214629207U,	// ANDWri
    0U,	// ANDWrr
    2214629207U,	// ANDWrs
    2214629207U,	// ANDXri
    0U,	// ANDXrr
    2214629207U,	// ANDXrs
    2147500674U,	// ANDv16i8
    2147501554U,	// ANDv8i8
    2214632404U,	// ASRVWr
    2214632404U,	// ASRVXr
    65675U,	// B
    2415958623U,	// BFMWri
    2415958623U,	// BFMXri
    0U,	// BICSWrr
    2214635983U,	// BICSWrs
    0U,	// BICSXrr
    2214635983U,	// BICSXrs
    0U,	// BICWrr
    2214627627U,	// BICWrs
    0U,	// BICXrr
    2214627627U,	// BICXrs
    2147500552U,	// BICv16i8
    335600973U,	// BICv2i32
    335597763U,	// BICv4i16
    335602754U,	// BICv4i32
    335599050U,	// BICv8i16
    2147501464U,	// BICv8i8
    2147500723U,	// BIFv16i8
    2147501580U,	// BIFv8i8
    2281751596U,	// BITv16i8
    2281752540U,	// BITv8i8
    72143U,	// BL
    1088442U,	// BLR
    1088402U,	// BR
    88506U,	// BRK
    2281751365U,	// BSLv16i8
    2281752208U,	// BSLv8i8
    109402U,	// Bcc
    402697004U,	// CBNZW
    402697004U,	// CBNZX
    402696989U,	// CBZW
    402696989U,	// CBZX
    2214632085U,	// CCMNWi
    2214632085U,	// CCMNWr
    2214632085U,	// CCMNXi
    2214632085U,	// CCMNXr
    2214632211U,	// CCMPWi
    2214632211U,	// CCMPWr
    2214632211U,	// CCMPXi
    2214632211U,	// CCMPXr
    1092351U,	// CLREX
    67152359U,	// CLSWr
    67152359U,	// CLSXr
    17423U,	// CLSv16i8
    24723U,	// CLSv2i32
    21266U,	// CLSv4i16
    26608U,	// CLSv4i32
    22599U,	// CLSv8i16
    18370U,	// CLSv8i8
    67152679U,	// CLZWr
    67152679U,	// CLZXr
    17619U,	// CLZv16i8
    24989U,	// CLZv2i32
    21410U,	// CLZv4i16
    27029U,	// CLZv4i32
    22783U,	// CLZv8i16
    18547U,	// CLZv8i8
    2147500980U,	// CMEQv16i8
    17332U,	// CMEQv16i8rz
    2214632302U,	// CMEQv1i64
    67148654U,	// CMEQv1i64rz
    2147508277U,	// CMEQv2i32
    24629U,	// CMEQv2i32rz
    2147503539U,	// CMEQv2i64
    19891U,	// CMEQv2i64rz
    2147504840U,	// CMEQv4i16
    21192U,	// CMEQv4i16rz
    2147510162U,	// CMEQv4i32
    26514U,	// CMEQv4i32rz
    2147506173U,	// CMEQv8i16
    22525U,	// CMEQv8i16rz
    2147501936U,	// CMEQv8i8
    18288U,	// CMEQv8i8rz
    2147500693U,	// CMGEv16i8
    17045U,	// CMGEv16i8rz
    2214629220U,	// CMGEv1i64
    67145572U,	// CMGEv1i64rz
    2147507652U,	// CMGEv2i32
    24004U,	// CMGEv2i32rz
    2147502957U,	// CMGEv2i64
    19309U,	// CMGEv2i64rz
    2147504413U,	// CMGEv4i16
    20765U,	// CMGEv4i16rz
    2147509433U,	// CMGEv4i32
    25785U,	// CMGEv4i32rz
    2147505700U,	// CMGEv8i16
    22052U,	// CMGEv8i16rz
    2147501562U,	// CMGEv8i8
    17914U,	// CMGEv8i8rz
    2147501089U,	// CMGTv16i8
    17441U,	// CMGTv16i8rz
    2214636084U,	// CMGTv1i64
    67152436U,	// CMGTv1i64rz
    2147508466U,	// CMGTv2i32
    24818U,	// CMGTv2i32rz
    2147503712U,	// CMGTv2i64
    20064U,	// CMGTv2i64rz
    2147504930U,	// CMGTv4i16
    21282U,	// CMGTv4i16rz
    2147510351U,	// CMGTv4i32
    26703U,	// CMGTv4i32rz
    2147506263U,	// CMGTv8i16
    22615U,	// CMGTv8i16rz
    2147502034U,	// CMGTv8i8
    18386U,	// CMGTv8i8rz
    2147500743U,	// CMHIv16i8
    2214631836U,	// CMHIv1i64
    2147507781U,	// CMHIv2i32
    2147503038U,	// CMHIv2i64
    2147504466U,	// CMHIv4i16
    2147509574U,	// CMHIv4i32
    2147505753U,	// CMHIv8i16
    2147501598U,	// CMHIv8i8
    2147501061U,	// CMHSv16i8
    2214636001U,	// CMHSv1i64
    2147508362U,	// CMHSv2i32
    2147503616U,	// CMHSv2i64
    2147504905U,	// CMHSv4i16
    2147510247U,	// CMHSv4i32
    2147506238U,	// CMHSv8i16
    2147502009U,	// CMHSv8i8
    17055U,	// CMLEv16i8rz
    67145579U,	// CMLEv1i64rz
    24014U,	// CMLEv2i32rz
    19319U,	// CMLEv2i64rz
    20774U,	// CMLEv4i16rz
    25795U,	// CMLEv4i32rz
    22061U,	// CMLEv8i16rz
    17923U,	// CMLEv8i8rz
    17461U,	// CMLTv16i8rz
    67152454U,	// CMLTv1i64rz
    24828U,	// CMLTv2i32rz
    20074U,	// CMLTv2i64rz
    21291U,	// CMLTv4i16rz
    26713U,	// CMLTv4i32rz
    22624U,	// CMLTv8i16rz
    18404U,	// CMLTv8i8rz
    2147501137U,	// CMTSTv16i8
    2214636115U,	// CMTSTv1i64
    2147508495U,	// CMTSTv2i32
    2147503741U,	// CMTSTv2i64
    2147504948U,	// CMTSTv4i16
    2147510380U,	// CMTSTv4i32
    2147506281U,	// CMTSTv8i16
    2147502077U,	// CMTSTv8i8
    17471U,	// CNTv16i8
    18413U,	// CNTv8i8
    2147527343U,	// CPYi16
    2147527343U,	// CPYi32
    2147527343U,	// CPYi64
    2147527343U,	// CPYi8
    2214625438U,	// CRC32Brr
    2214627451U,	// CRC32CBrr
    2214631687U,	// CRC32CHrr
    2214636220U,	// CRC32CWrr
    2214636278U,	// CRC32CXrr
    2214629385U,	// CRC32Hrr
    2214636212U,	// CRC32Wrr
    2214636259U,	// CRC32Xrr
    2214631924U,	// CSELWr
    2214631924U,	// CSELXr
    2214627637U,	// CSINCWr
    2214627637U,	// CSINCXr
    2214636199U,	// CSINVWr
    2214636199U,	// CSINVXr
    2214629292U,	// CSNEGWr
    2214629292U,	// CSNEGXr
    81926U,	// DCPS1
    81975U,	// DCPS2
    81992U,	// DCPS3
    116868U,	// DMB
    11146U,	// DRPS
    116957U,	// DSB
    67126165U,	// DUPv16i8gpr
    2147500949U,	// DUPv16i8lane
    67133454U,	// DUPv2i32gpr
    2147508238U,	// DUPv2i32lane
    67128736U,	// DUPv2i64gpr
    2147503520U,	// DUPv2i64lane
    67130028U,	// DUPv4i16gpr
    2147504812U,	// DUPv4i16lane
    67135339U,	// DUPv4i32gpr
    2147510123U,	// DUPv4i32lane
    67131361U,	// DUPv8i16gpr
    2147506145U,	// DUPv8i16lane
    67127124U,	// DUPv8i8gpr
    2147501908U,	// DUPv8i8lane
    0U,	// EONWrr
    2214632091U,	// EONWrs
    0U,	// EONXrr
    2214632091U,	// EONXrs
    2214632389U,	// EORWri
    0U,	// EORWrr
    2214632389U,	// EORWrs
    2214632389U,	// EORXri
    0U,	// EORXrr
    2214632389U,	// EORXrs
    2147501032U,	// EORv16i8
    2147501983U,	// EORv8i8
    11151U,	// ERET
    2214632436U,	// EXTRWrri
    2214632436U,	// EXTRXrri
    2147501148U,	// EXTv16i8
    2147502087U,	// EXTv8i8
    0U,	// F128CSEL
    2214629164U,	// FABD32
    2214629164U,	// FABD64
    2147507541U,	// FABDv2f32
    2147502906U,	// FABDv2f64
    2147509322U,	// FABDv4f32
    67152304U,	// FABSDr
    67152304U,	// FABSSr
    24695U,	// FABSv2f32
    19949U,	// FABSv2f64
    26580U,	// FABSv4f32
    2214629212U,	// FACGE32
    2214629212U,	// FACGE64
    2147507641U,	// FACGEv2f32
    2147502946U,	// FACGEv2f64
    2147509422U,	// FACGEv4f32
    2214636076U,	// FACGT32
    2214636076U,	// FACGT64
    2147508455U,	// FACGTv2f32
    2147503701U,	// FACGTv2f64
    2147510340U,	// FACGTv4f32
    2214629170U,	// FADDDrr
    2147508119U,	// FADDPv2f32
    2147503421U,	// FADDPv2f64
    40855U,	// FADDPv2i32p
    36157U,	// FADDPv2i64p
    2147510004U,	// FADDPv4f32
    2214629170U,	// FADDSrr
    2147507568U,	// FADDv2f32
    2147502915U,	// FADDv2f64
    2147509349U,	// FADDv4f32
    2214632210U,	// FCCMPDrr
    2214629241U,	// FCCMPEDrr
    2214629241U,	// FCCMPESrr
    2214632210U,	// FCCMPSrr
    2214632301U,	// FCMEQ32
    2214632301U,	// FCMEQ64
    67148653U,	// FCMEQv1i32rz
    67148653U,	// FCMEQv1i64rz
    2147508276U,	// FCMEQv2f32
    2147503538U,	// FCMEQv2f64
    24628U,	// FCMEQv2i32rz
    19890U,	// FCMEQv2i64rz
    2147510161U,	// FCMEQv4f32
    26513U,	// FCMEQv4i32rz
    2214629219U,	// FCMGE32
    2214629219U,	// FCMGE64
    67145571U,	// FCMGEv1i32rz
    67145571U,	// FCMGEv1i64rz
    2147507651U,	// FCMGEv2f32
    2147502956U,	// FCMGEv2f64
    24003U,	// FCMGEv2i32rz
    19308U,	// FCMGEv2i64rz
    2147509432U,	// FCMGEv4f32
    25784U,	// FCMGEv4i32rz
    2214636083U,	// FCMGT32
    2214636083U,	// FCMGT64
    67152435U,	// FCMGTv1i32rz
    67152435U,	// FCMGTv1i64rz
    2147508465U,	// FCMGTv2f32
    2147503711U,	// FCMGTv2f64
    24817U,	// FCMGTv2i32rz
    20063U,	// FCMGTv2i64rz
    2147510350U,	// FCMGTv4f32
    26702U,	// FCMGTv4i32rz
    67145578U,	// FCMLEv1i32rz
    67145578U,	// FCMLEv1i64rz
    24013U,	// FCMLEv2i32rz
    19318U,	// FCMLEv2i64rz
    25794U,	// FCMLEv4i32rz
    67152453U,	// FCMLTv1i32rz
    67152453U,	// FCMLTv1i64rz
    24827U,	// FCMLTv2i32rz
    20073U,	// FCMLTv2i64rz
    26712U,	// FCMLTv4i32rz
    2136857U,	// FCMPDri
    67148569U,	// FCMPDrr
    2133889U,	// FCMPEDri
    67145601U,	// FCMPEDrr
    2133889U,	// FCMPESri
    67145601U,	// FCMPESrr
    2136857U,	// FCMPSri
    67148569U,	// FCMPSrr
    2214631923U,	// FCSELDrrr
    2214631923U,	// FCSELSrrr
    67152296U,	// FCVTASUWDr
    67152296U,	// FCVTASUWSr
    67152296U,	// FCVTASUXDr
    67152296U,	// FCVTASUXSr
    67152296U,	// FCVTASv1i32
    67152296U,	// FCVTASv1i64
    24684U,	// FCVTASv2f32
    19938U,	// FCVTASv2f64
    26569U,	// FCVTASv4f32
    67152480U,	// FCVTAUUWDr
    67152480U,	// FCVTAUUWSr
    67152480U,	// FCVTAUUXDr
    67152480U,	// FCVTAUUXSr
    67152480U,	// FCVTAUv1i32
    67152480U,	// FCVTAUv1i64
    24857U,	// FCVTAUv2f32
    20103U,	// FCVTAUv2f64
    26742U,	// FCVTAUv4f32
    67152474U,	// FCVTDHr
    67152474U,	// FCVTDSr
    67152474U,	// FCVTHDr
    67152474U,	// FCVTHSr
    472930890U,	// FCVTLv2i32
    2151701066U,	// FCVTLv4i16
    540033054U,	// FCVTLv4i32
    4210718U,	// FCVTLv8i16
    67152364U,	// FCVTMSUWDr
    67152364U,	// FCVTMSUWSr
    67152364U,	// FCVTMSUXDr
    67152364U,	// FCVTMSUXSr
    67152364U,	// FCVTMSv1i32
    67152364U,	// FCVTMSv1i64
    24740U,	// FCVTMSv2f32
    19986U,	// FCVTMSv2f64
    26625U,	// FCVTMSv4f32
    67152496U,	// FCVTMUUWDr
    67152496U,	// FCVTMUUWSr
    67152496U,	// FCVTMUUXDr
    67152496U,	// FCVTMUUXSr
    67152496U,	// FCVTMUv1i32
    67152496U,	// FCVTMUv1i64
    24879U,	// FCVTMUv2f32
    20125U,	// FCVTMUv2f64
    26764U,	// FCVTMUv4f32
    67152372U,	// FCVTNSUWDr
    67152372U,	// FCVTNSUWSr
    67152372U,	// FCVTNSUXDr
    67152372U,	// FCVTNSUXSr
    67152372U,	// FCVTNSv1i32
    67152372U,	// FCVTNSv1i64
    24751U,	// FCVTNSv2f32
    19997U,	// FCVTNSv2f64
    26636U,	// FCVTNSv4f32
    67152504U,	// FCVTNUUWDr
    67152504U,	// FCVTNUUWSr
    67152504U,	// FCVTNUUXDr
    67152504U,	// FCVTNUUXSr
    67152504U,	// FCVTNUv1i32
    67152504U,	// FCVTNUv1i64
    24890U,	// FCVTNUv2f32
    20136U,	// FCVTNUv2f64
    26775U,	// FCVTNUv4f32
    5266127U,	// FCVTNv2i32
    6314703U,	// FCVTNv4i16
    2285944870U,	// FCVTNv4i32
    7389222U,	// FCVTNv8i16
    67152388U,	// FCVTPSUWDr
    67152388U,	// FCVTPSUWSr
    67152388U,	// FCVTPSUXDr
    67152388U,	// FCVTPSUXSr
    67152388U,	// FCVTPSv1i32
    67152388U,	// FCVTPSv1i64
    24773U,	// FCVTPSv2f32
    20019U,	// FCVTPSv2f64
    26658U,	// FCVTPSv4f32
    67152512U,	// FCVTPUUWDr
    67152512U,	// FCVTPUUWSr
    67152512U,	// FCVTPUUXDr
    67152512U,	// FCVTPUUXSr
    67152512U,	// FCVTPUv1i32
    67152512U,	// FCVTPUv1i64
    24901U,	// FCVTPUv2f32
    20147U,	// FCVTPUv2f64
    26786U,	// FCVTPUv4f32
    67152474U,	// FCVTSDr
    67152474U,	// FCVTSHr
    67148549U,	// FCVTXNv1i64
    5266181U,	// FCVTXNv2f32
    2285944878U,	// FCVTXNv4f32
    2214636063U,	// FCVTZSSWDri
    2214636063U,	// FCVTZSSWSri
    2214636063U,	// FCVTZSSXDri
    2214636063U,	// FCVTZSSXSri
    67152415U,	// FCVTZSUWDr
    67152415U,	// FCVTZSUWSr
    67152415U,	// FCVTZSUXDr
    67152415U,	// FCVTZSUXSr
    2214636063U,	// FCVTZS_IntSWDri
    2214636063U,	// FCVTZS_IntSWSri
    2214636063U,	// FCVTZS_IntSXDri
    2214636063U,	// FCVTZS_IntSXSri
    67152415U,	// FCVTZS_IntUWDr
    67152415U,	// FCVTZS_IntUWSr
    67152415U,	// FCVTZS_IntUXDr
    67152415U,	// FCVTZS_IntUXSr
    24796U,	// FCVTZS_Intv2f32
    20042U,	// FCVTZS_Intv2f64
    26681U,	// FCVTZS_Intv4f32
    2214636063U,	// FCVTZSd
    2214636063U,	// FCVTZSs
    67152415U,	// FCVTZSv1i32
    67152415U,	// FCVTZSv1i64
    24796U,	// FCVTZSv2f32
    20042U,	// FCVTZSv2f64
    2147508444U,	// FCVTZSv2i32_shift
    2147503690U,	// FCVTZSv2i64_shift
    26681U,	// FCVTZSv4f32
    2147510329U,	// FCVTZSv4i32_shift
    2214636168U,	// FCVTZUSWDri
    2214636168U,	// FCVTZUSWSri
    2214636168U,	// FCVTZUSXDri
    2214636168U,	// FCVTZUSXSri
    67152520U,	// FCVTZUUWDr
    67152520U,	// FCVTZUUWSr
    67152520U,	// FCVTZUUXDr
    67152520U,	// FCVTZUUXSr
    2214636168U,	// FCVTZU_IntSWDri
    2214636168U,	// FCVTZU_IntSWSri
    2214636168U,	// FCVTZU_IntSXDri
    2214636168U,	// FCVTZU_IntSXSri
    67152520U,	// FCVTZU_IntUWDr
    67152520U,	// FCVTZU_IntUWSr
    67152520U,	// FCVTZU_IntUXDr
    67152520U,	// FCVTZU_IntUXSr
    24912U,	// FCVTZU_Intv2f32
    20158U,	// FCVTZU_Intv2f64
    26797U,	// FCVTZU_Intv4f32
    2214636168U,	// FCVTZUd
    2214636168U,	// FCVTZUs
    67152520U,	// FCVTZUv1i32
    67152520U,	// FCVTZUv1i64
    24912U,	// FCVTZUv2f32
    20158U,	// FCVTZUv2f64
    2147508560U,	// FCVTZUv2i32_shift
    2147503806U,	// FCVTZUv2i64_shift
    26797U,	// FCVTZUv4f32
    2147510445U,	// FCVTZUv4i32_shift
    2214636181U,	// FDIVDrr
    2214636181U,	// FDIVSrr
    2147508571U,	// FDIVv2f32
    2147503817U,	// FDIVv2f64
    2147510465U,	// FDIVv4f32
    2214629176U,	// FMADDDrrr
    2214629176U,	// FMADDSrrr
    2214636267U,	// FMAXDrr
    2214632056U,	// FMAXNMDrr
    2147508185U,	// FMAXNMPv2f32
    2147503487U,	// FMAXNMPv2f64
    40921U,	// FMAXNMPv2i32p
    36223U,	// FMAXNMPv2i64p
    2147510070U,	// FMAXNMPv4f32
    2214632056U,	// FMAXNMSrr
    43244U,	// FMAXNMVv4i32v
    2147507935U,	// FMAXNMv2f32
    2147503379U,	// FMAXNMv2f64
    2147509934U,	// FMAXNMv4f32
    2147508246U,	// FMAXPv2f32
    2147503528U,	// FMAXPv2f64
    40982U,	// FMAXPv2i32p
    36264U,	// FMAXPv2i64p
    2147510131U,	// FMAXPv4f32
    2214636267U,	// FMAXSrr
    43295U,	// FMAXVv4i32v
    2147508589U,	// FMAXv2f32
    2147503875U,	// FMAXv2f64
    2147510629U,	// FMAXv4f32
    2214632079U,	// FMINDrr
    2214632048U,	// FMINNMDrr
    2147508173U,	// FMINNMPv2f32
    2147503475U,	// FMINNMPv2f64
    40909U,	// FMINNMPv2i32p
    36211U,	// FMINNMPv2i64p
    2147510058U,	// FMINNMPv4f32
    2214632048U,	// FMINNMSrr
    43232U,	// FMINNMVv4i32v
    2147507924U,	// FMINNMv2f32
    2147503368U,	// FMINNMv2f64
    2147509923U,	// FMINNMv4f32
    2147508197U,	// FMINPv2f32
    2147503499U,	// FMINPv2f64
    40933U,	// FMINPv2i32p
    36235U,	// FMINPv2i64p
    2147510082U,	// FMINPv4f32
    2214632079U,	// FMINSrr
    43256U,	// FMINVv4i32v
    2147507979U,	// FMINv2f32
    2147503401U,	// FMINv2f64
    2147509956U,	// FMINv4f32
    2416057376U,	// FMLAv1i32_indexed
    2416052550U,	// FMLAv1i64_indexed
    2281757922U,	// FMLAv2f32
    2281753315U,	// FMLAv2f64
    2281757922U,	// FMLAv2i32_indexed
    2281753315U,	// FMLAv2i64_indexed
    2281759693U,	// FMLAv4f32
    2281759693U,	// FMLAv4i32_indexed
    2416057448U,	// FMLSv1i32_indexed
    2416052566U,	// FMLSv1i64_indexed
    2281758875U,	// FMLSv2f32
    2281754121U,	// FMLSv2f64
    2281758875U,	// FMLSv2i32_indexed
    2281754121U,	// FMLSv2i64_indexed
    2281760760U,	// FMLSv4f32
    2281760760U,	// FMLSv4i32_indexed
    2147518821U,	// FMOVDXHighr
    67152558U,	// FMOVDXr
    604023470U,	// FMOVDi
    67152558U,	// FMOVDr
    67152558U,	// FMOVSWr
    604023470U,	// FMOVSi
    67152558U,	// FMOVSr
    67152558U,	// FMOVWSr
    75516261U,	// FMOVXDHighr
    67152558U,	// FMOVXDr
    604004708U,	// FMOVv2f32_ns
    603999954U,	// FMOVv2f64_ns
    604006678U,	// FMOVv4f32_ns
    2214627588U,	// FMSUBDrrr
    2214627588U,	// FMSUBSrrr
    2214632017U,	// FMULDrr
    2214632017U,	// FMULSrr
    2214636294U,	// FMULX32
    2214636294U,	// FMULX64
    2214632583U,	// FMULXv1i32_indexed
    2214627701U,	// FMULXv1i64_indexed
    2147508616U,	// FMULXv2f32
    2147503884U,	// FMULXv2f64
    2147508616U,	// FMULXv2i32_indexed
    2147503884U,	// FMULXv2i64_indexed
    2147510656U,	// FMULXv4f32
    2147510656U,	// FMULXv4i32_indexed
    2214632544U,	// FMULv1i32_indexed
    2214627662U,	// FMULv1i64_indexed
    2147507915U,	// FMULv2f32
    2147503359U,	// FMULv2f64
    2147507915U,	// FMULv2i32_indexed
    2147503359U,	// FMULv2i64_indexed
    2147509904U,	// FMULv4f32
    2147509904U,	// FMULv4i32_indexed
    67145631U,	// FNEGDr
    67145631U,	// FNEGSr
    24089U,	// FNEGv2f32
    19371U,	// FNEGv2f64
    25870U,	// FNEGv4f32
    2214629183U,	// FNMADDDrrr
    2214629183U,	// FNMADDSrrr
    2214627595U,	// FNMSUBDrrr
    2214627595U,	// FNMSUBSrrr
    2214632023U,	// FNMULDrr
    2214632023U,	// FNMULSrr
    67145585U,	// FRECPEv1i32
    67145585U,	// FRECPEv1i64
    24023U,	// FRECPEv2f32
    19328U,	// FRECPEv2f64
    25804U,	// FRECPEv4f32
    2214636028U,	// FRECPS32
    2214636028U,	// FRECPS64
    2147508410U,	// FRECPSv2f32
    2147503656U,	// FRECPSv2f64
    2147510295U,	// FRECPSv4f32
    67152653U,	// FRECPXv1i32
    67152653U,	// FRECPXv1i64
    67141759U,	// FRINTADr
    67141759U,	// FRINTASr
    23825U,	// FRINTAv2f32
    19218U,	// FRINTAv2f64
    25596U,	// FRINTAv4f32
    67148204U,	// FRINTIDr
    67148204U,	// FRINTISr
    24167U,	// FRINTIv2f32
    19415U,	// FRINTIv2f64
    25960U,	// FRINTIv4f32
    67148416U,	// FRINTMDr
    67148416U,	// FRINTMSr
    24298U,	// FRINTMv2f32
    19742U,	// FRINTMv2f64
    26297U,	// FRINTMv4f32
    67148487U,	// FRINTNDr
    67148487U,	// FRINTNSr
    24404U,	// FRINTNv2f32
    19762U,	// FRINTNv2f64
    26335U,	// FRINTNv4f32
    67148593U,	// FRINTPDr
    67148593U,	// FRINTPSr
    24579U,	// FRINTPv2f32
    19861U,	// FRINTPv2f64
    26464U,	// FRINTPv4f32
    67152661U,	// FRINTXDr
    67152661U,	// FRINTXSr
    24978U,	// FRINTXv2f32
    20246U,	// FRINTXv2f64
    27018U,	// FRINTXv4f32
    67152696U,	// FRINTZDr
    67152696U,	// FRINTZSr
    24997U,	// FRINTZv2f32
    20257U,	// FRINTZv2f64
    27037U,	// FRINTZv4f32
    67145608U,	// FRSQRTEv1i32
    67145608U,	// FRSQRTEv1i64
    24045U,	// FRSQRTEv2f32
    19339U,	// FRSQRTEv2f64
    25826U,	// FRSQRTEv4f32
    2214636049U,	// FRSQRTS32
    2214636049U,	// FRSQRTS64
    2147508432U,	// FRSQRTSv2f32
    2147503678U,	// FRSQRTSv2f64
    2147510317U,	// FRSQRTSv4f32
    67152460U,	// FSQRTDr
    67152460U,	// FSQRTSr
    24837U,	// FSQRTv2f32
    20083U,	// FSQRTv2f64
    26722U,	// FSQRTv4f32
    2214627582U,	// FSUBDrr
    2214627582U,	// FSUBSrr
    2147507484U,	// FSUBv2f32
    2147502877U,	// FSUBv2f64
    2147509255U,	// FSUBv4f32
    93012U,	// HINT
    92736U,	// HLT
    84284U,	// HVC
    679530475U,	// INSvi16gpr
    746639339U,	// INSvi16lane
    679533680U,	// INSvi32gpr
    746642544U,	// INSvi32lane
    679528798U,	// INSvi64gpr
    746637662U,	// INSvi64lane
    679526535U,	// INSvi8gpr
    746635399U,	// INSvi8lane
    116962U,	// ISB
    147457U,	// LD1Fourv16b
    9601025U,	// LD1Fourv16b_POST
    180225U,	// LD1Fourv1d
    10682369U,	// LD1Fourv1d_POST
    212993U,	// LD1Fourv2d
    9666561U,	// LD1Fourv2d_POST
    245761U,	// LD1Fourv2s
    10747905U,	// LD1Fourv2s_POST
    278529U,	// LD1Fourv4h
    10780673U,	// LD1Fourv4h_POST
    311297U,	// LD1Fourv4s
    9764865U,	// LD1Fourv4s_POST
    344065U,	// LD1Fourv8b
    10846209U,	// LD1Fourv8b_POST
    376833U,	// LD1Fourv8h
    9830401U,	// LD1Fourv8h_POST
    147457U,	// LD1Onev16b
    11698177U,	// LD1Onev16b_POST
    180225U,	// LD1Onev1d
    12779521U,	// LD1Onev1d_POST
    212993U,	// LD1Onev2d
    11763713U,	// LD1Onev2d_POST
    245761U,	// LD1Onev2s
    12845057U,	// LD1Onev2s_POST
    278529U,	// LD1Onev4h
    12877825U,	// LD1Onev4h_POST
    311297U,	// LD1Onev4s
    11862017U,	// LD1Onev4s_POST
    344065U,	// LD1Onev8b
    12943361U,	// LD1Onev8b_POST
    376833U,	// LD1Onev8h
    11927553U,	// LD1Onev8h_POST
    154484U,	// LD1Rv16b
    13802356U,	// LD1Rv16b_POST
    187252U,	// LD1Rv1d
    12786548U,	// LD1Rv1d_POST
    220020U,	// LD1Rv2d
    12819316U,	// LD1Rv2d_POST
    252788U,	// LD1Rv2s
    14949236U,	// LD1Rv2s_POST
    285556U,	// LD1Rv4h
    16030580U,	// LD1Rv4h_POST
    318324U,	// LD1Rv4s
    15014772U,	// LD1Rv4s_POST
    351092U,	// LD1Rv8b
    13998964U,	// LD1Rv8b_POST
    383860U,	// LD1Rv8h
    16128884U,	// LD1Rv8h_POST
    147457U,	// LD1Threev16b
    16941057U,	// LD1Threev16b_POST
    180225U,	// LD1Threev1d
    18022401U,	// LD1Threev1d_POST
    212993U,	// LD1Threev2d
    17006593U,	// LD1Threev2d_POST
    245761U,	// LD1Threev2s
    18087937U,	// LD1Threev2s_POST
    278529U,	// LD1Threev4h
    18120705U,	// LD1Threev4h_POST
    311297U,	// LD1Threev4s
    17104897U,	// LD1Threev4s_POST
    344065U,	// LD1Threev8b
    18186241U,	// LD1Threev8b_POST
    376833U,	// LD1Threev8h
    17170433U,	// LD1Threev8h_POST
    147457U,	// LD1Twov16b
    10649601U,	// LD1Twov16b_POST
    180225U,	// LD1Twov1d
    11730945U,	// LD1Twov1d_POST
    212993U,	// LD1Twov2d
    10715137U,	// LD1Twov2d_POST
    245761U,	// LD1Twov2s
    11796481U,	// LD1Twov2s_POST
    278529U,	// LD1Twov4h
    11829249U,	// LD1Twov4h_POST
    311297U,	// LD1Twov4s
    10813441U,	// LD1Twov4s_POST
    344065U,	// LD1Twov8b
    11894785U,	// LD1Twov8b_POST
    376833U,	// LD1Twov8h
    10878977U,	// LD1Twov8h_POST
    19283969U,	// LD1i16
    20348929U,	// LD1i16_POST
    19316737U,	// LD1i32
    21430273U,	// LD1i32_POST
    19349505U,	// LD1i64
    22511617U,	// LD1i64_POST
    19382273U,	// LD1i8
    23592961U,	// LD1i8_POST
    154490U,	// LD2Rv16b
    15899514U,	// LD2Rv16b_POST
    187258U,	// LD2Rv1d
    11737978U,	// LD2Rv1d_POST
    220026U,	// LD2Rv2d
    11770746U,	// LD2Rv2d_POST
    252794U,	// LD2Rv2s
    12852090U,	// LD2Rv2s_POST
    285562U,	// LD2Rv4h
    14982010U,	// LD2Rv4h_POST
    318330U,	// LD2Rv4s
    12917626U,	// LD2Rv4s_POST
    351098U,	// LD2Rv8b
    16096122U,	// LD2Rv8b_POST
    383866U,	// LD2Rv8h
    15080314U,	// LD2Rv8h_POST
    147481U,	// LD2Twov16b
    10649625U,	// LD2Twov16b_POST
    213017U,	// LD2Twov2d
    10715161U,	// LD2Twov2d_POST
    245785U,	// LD2Twov2s
    11796505U,	// LD2Twov2s_POST
    278553U,	// LD2Twov4h
    11829273U,	// LD2Twov4h_POST
    311321U,	// LD2Twov4s
    10813465U,	// LD2Twov4s_POST
    344089U,	// LD2Twov8b
    11894809U,	// LD2Twov8b_POST
    376857U,	// LD2Twov8h
    10879001U,	// LD2Twov8h_POST
    19283993U,	// LD2i16
    21397529U,	// LD2i16_POST
    19316761U,	// LD2i32
    22478873U,	// LD2i32_POST
    19349529U,	// LD2i64
    24608793U,	// LD2i64_POST
    19382297U,	// LD2i8
    20447257U,	// LD2i8_POST
    154496U,	// LD3Rv16b
    25336704U,	// LD3Rv16b_POST
    187264U,	// LD3Rv1d
    18029440U,	// LD3Rv1d_POST
    220032U,	// LD3Rv2d
    18062208U,	// LD3Rv2d_POST
    252800U,	// LD3Rv2s
    26483584U,	// LD3Rv2s_POST
    285568U,	// LD3Rv4h
    27564928U,	// LD3Rv4h_POST
    318336U,	// LD3Rv4s
    26549120U,	// LD3Rv4s_POST
    351104U,	// LD3Rv8b
    25533312U,	// LD3Rv8b_POST
    383872U,	// LD3Rv8h
    27663232U,	// LD3Rv8h_POST
    147523U,	// LD3Threev16b
    16941123U,	// LD3Threev16b_POST
    213059U,	// LD3Threev2d
    17006659U,	// LD3Threev2d_POST
    245827U,	// LD3Threev2s
    18088003U,	// LD3Threev2s_POST
    278595U,	// LD3Threev4h
    18120771U,	// LD3Threev4h_POST
    311363U,	// LD3Threev4s
    17104963U,	// LD3Threev4s_POST
    344131U,	// LD3Threev8b
    18186307U,	// LD3Threev8b_POST
    376899U,	// LD3Threev8h
    17170499U,	// LD3Threev8h_POST
    19284035U,	// LD3i16
    28737603U,	// LD3i16_POST
    19316803U,	// LD3i32
    29818947U,	// LD3i32_POST
    19349571U,	// LD3i64
    30900291U,	// LD3i64_POST
    19382339U,	// LD3i8
    31981635U,	// LD3i8_POST
    147540U,	// LD4Fourv16b
    9601108U,	// LD4Fourv16b_POST
    213076U,	// LD4Fourv2d
    9666644U,	// LD4Fourv2d_POST
    245844U,	// LD4Fourv2s
    10747988U,	// LD4Fourv2s_POST
    278612U,	// LD4Fourv4h
    10780756U,	// LD4Fourv4h_POST
    311380U,	// LD4Fourv4s
    9764948U,	// LD4Fourv4s_POST
    344148U,	// LD4Fourv8b
    10846292U,	// LD4Fourv8b_POST
    376916U,	// LD4Fourv8h
    9830484U,	// LD4Fourv8h_POST
    154502U,	// LD4Rv16b
    14850950U,	// LD4Rv16b_POST
    187270U,	// LD4Rv1d
    10689414U,	// LD4Rv1d_POST
    220038U,	// LD4Rv2d
    10722182U,	// LD4Rv2d_POST
    252806U,	// LD4Rv2s
    11803526U,	// LD4Rv2s_POST
    285574U,	// LD4Rv4h
    12884870U,	// LD4Rv4h_POST
    318342U,	// LD4Rv4s
    11869062U,	// LD4Rv4s_POST
    351110U,	// LD4Rv8b
    15047558U,	// LD4Rv8b_POST
    383878U,	// LD4Rv8h
    12983174U,	// LD4Rv8h_POST
    19284052U,	// LD4i16
    22446164U,	// LD4i16_POST
    19316820U,	// LD4i32
    24576084U,	// LD4i32_POST
    19349588U,	// LD4i64
    32997460U,	// LD4i64_POST
    19382356U,	// LD4i8
    21495892U,	// LD4i8_POST
    100698249U,	// LDARB
    100702513U,	// LDARH
    100703116U,	// LDARW
    100703116U,	// LDARX
    2214632254U,	// LDAXPW
    2214632254U,	// LDAXPX
    100698303U,	// LDAXRB
    100702567U,	// LDAXRH
    100703238U,	// LDAXRW
    100703238U,	// LDAXRX
    2214632223U,	// LDNPDi
    2214632223U,	// LDNPQi
    2214632223U,	// LDNPSi
    2214632223U,	// LDNPWi
    2214632223U,	// LDNPXi
    2214632205U,	// LDPDi
    2416057101U,	// LDPDpost
    2416057101U,	// LDPDpre
    2214632205U,	// LDPQi
    2416057101U,	// LDPQpost
    2416057101U,	// LDPQpre
    2214636229U,	// LDPSWi
    2416061125U,	// LDPSWpost
    2416061125U,	// LDPSWpre
    2214632205U,	// LDPSi
    2416057101U,	// LDPSpost
    2416057101U,	// LDPSpre
    2214632205U,	// LDPWi
    2416057101U,	// LDPWpost
    2416057101U,	// LDPWpre
    2214632205U,	// LDPXi
    2416057101U,	// LDPXpost
    2416057101U,	// LDPXpre
    302123152U,	// LDRBBpost
    2449606800U,	// LDRBBpre
    2248181904U,	// LDRBBroW
    2248181904U,	// LDRBBroX
    2248181904U,	// LDRBBui
    302128027U,	// LDRBpost
    2449611675U,	// LDRBpre
    2248186779U,	// LDRBroW
    2248186779U,	// LDRBroX
    2248186779U,	// LDRBui
    402693019U,	// LDRDl
    302128027U,	// LDRDpost
    2449611675U,	// LDRDpre
    2248186779U,	// LDRDroW
    2248186779U,	// LDRDroX
    2248186779U,	// LDRDui
    302127416U,	// LDRHHpost
    2449611064U,	// LDRHHpre
    2248186168U,	// LDRHHroW
    2248186168U,	// LDRHHroX
    2248186168U,	// LDRHHui
    302128027U,	// LDRHpost
    2449611675U,	// LDRHpre
    2248186779U,	// LDRHroW
    2248186779U,	// LDRHroX
    2248186779U,	// LDRHui
    402693019U,	// LDRQl
    302128027U,	// LDRQpost
    2449611675U,	// LDRQpre
    2248186779U,	// LDRQroW
    2248186779U,	// LDRQroX
    2248186779U,	// LDRQui
    302123239U,	// LDRSBWpost
    2449606887U,	// LDRSBWpre
    2248181991U,	// LDRSBWroW
    2248181991U,	// LDRSBWroX
    2248181991U,	// LDRSBWui
    302123239U,	// LDRSBXpost
    2449606887U,	// LDRSBXpre
    2248181991U,	// LDRSBXroW
    2248181991U,	// LDRSBXroX
    2248181991U,	// LDRSBXui
    302127493U,	// LDRSHWpost
    2449611141U,	// LDRSHWpre
    2248186245U,	// LDRSHWroW
    2248186245U,	// LDRSHWroX
    2248186245U,	// LDRSHWui
    302127493U,	// LDRSHXpost
    2449611141U,	// LDRSHXpre
    2248186245U,	// LDRSHXroW
    2248186245U,	// LDRSHXroX
    2248186245U,	// LDRSHXui
    402696908U,	// LDRSWl
    302131916U,	// LDRSWpost
    2449615564U,	// LDRSWpre
    2248190668U,	// LDRSWroW
    2248190668U,	// LDRSWroX
    2248190668U,	// LDRSWui
    402693019U,	// LDRSl
    302128027U,	// LDRSpost
    2449611675U,	// LDRSpre
    2248186779U,	// LDRSroW
    2248186779U,	// LDRSroX
    2248186779U,	// LDRSui
    402693019U,	// LDRWl
    302128027U,	// LDRWpost
    2449611675U,	// LDRWpre
    2248186779U,	// LDRWroW
    2248186779U,	// LDRWroX
    2248186779U,	// LDRWui
    402693019U,	// LDRXl
    302128027U,	// LDRXpost
    2449611675U,	// LDRXpre
    2248186779U,	// LDRXroW
    2248186779U,	// LDRXroX
    2248186779U,	// LDRXui
    2248181917U,	// LDTRBi
    2248186181U,	// LDTRHi
    2248181998U,	// LDTRSBWi
    2248181998U,	// LDTRSBXi
    2248186252U,	// LDTRSHWi
    2248186252U,	// LDTRSHXi
    2248190675U,	// LDTRSWi
    2248186851U,	// LDTRWi
    2248186851U,	// LDTRXi
    2248181937U,	// LDURBBi
    2248186874U,	// LDURBi
    2248186874U,	// LDURDi
    2248186201U,	// LDURHHi
    2248186874U,	// LDURHi
    2248186874U,	// LDURQi
    2248182006U,	// LDURSBWi
    2248182006U,	// LDURSBXi
    2248186260U,	// LDURSHWi
    2248186260U,	// LDURSHXi
    2248190683U,	// LDURSWi
    2248186874U,	// LDURSi
    2248186874U,	// LDURWi
    2248186874U,	// LDURXi
    2214632261U,	// LDXPW
    2214632261U,	// LDXPX
    100698311U,	// LDXRB
    100702575U,	// LDXRH
    100703245U,	// LDXRW
    100703245U,	// LDXRX
    0U,	// LOADgot
    2214631999U,	// LSLVWr
    2214631999U,	// LSLVXr
    2214632409U,	// LSRVWr
    2214632409U,	// LSRVXr
    2214629177U,	// MADDWrrr
    2214629177U,	// MADDXrrr
    2281750953U,	// MLAv16i8
    2281757923U,	// MLAv2i32
    2281757923U,	// MLAv2i32_indexed
    2281754733U,	// MLAv4i16
    2281754733U,	// MLAv4i16_indexed
    2281759694U,	// MLAv4i32
    2281759694U,	// MLAv4i32_indexed
    2281756020U,	// MLAv8i16
    2281756020U,	// MLAv8i16_indexed
    2281751874U,	// MLAv8i8
    2281751576U,	// MLSv16i8
    2281758876U,	// MLSv2i32
    2281758876U,	// MLSv2i32_indexed
    2281755418U,	// MLSv4i16
    2281755418U,	// MLSv4i16_indexed
    2281760761U,	// MLSv4i32
    2281760761U,	// MLSv4i32_indexed
    2281756751U,	// MLSv8i16
    2281756751U,	// MLSv8i16_indexed
    2281752522U,	// MLSv8i8
    805345716U,	// MOVID
    872432355U,	// MOVIv16b_ns
    805325794U,	// MOVIv2d_ns
    3019923058U,	// MOVIv2i32
    3019923058U,	// MOVIv2s_msl
    3019919732U,	// MOVIv4i16
    3019924851U,	// MOVIv4i32
    3019924851U,	// MOVIv4s_msl
    872433207U,	// MOVIv8b_ns
    3019921019U,	// MOVIv8i16
    335583679U,	// MOVKWi
    335583679U,	// MOVKXi
    3019938559U,	// MOVNWi
    3019938559U,	// MOVNXi
    3019942720U,	// MOVZWi
    3019942720U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    939567628U,	// MRS
    547806U,	// MSR
    564190U,	// MSRpstate
    2214627589U,	// MSUBWrrr
    2214627589U,	// MSUBXrrr
    2147500879U,	// MULv16i8
    2147507916U,	// MULv2i32
    2147507916U,	// MULv2i32_indexed
    2147504589U,	// MULv4i16
    2147504589U,	// MULv4i16_indexed
    2147509905U,	// MULv4i32
    2147509905U,	// MULv4i32_indexed
    2147506046U,	// MULv8i16
    2147506046U,	// MULv8i16_indexed
    2147501721U,	// MULv8i8
    3019923030U,	// MVNIv2i32
    3019923030U,	// MVNIv2s_msl
    3019919715U,	// MVNIv4i16
    3019924823U,	// MVNIv4i32
    3019924823U,	// MVNIv4s_msl
    3019921002U,	// MVNIv8i16
    17086U,	// NEGv16i8
    67145632U,	// NEGv1i64
    24090U,	// NEGv2i32
    19372U,	// NEGv2i64
    20785U,	// NEGv4i16
    25871U,	// NEGv4i32
    22072U,	// NEGv8i16
    17942U,	// NEGv8i8
    17480U,	// NOTv16i8
    18421U,	// NOTv8i8
    0U,	// ORNWrr
    2214632130U,	// ORNWrs
    0U,	// ORNXrr
    2214632130U,	// ORNXrs
    2147500908U,	// ORNv16i8
    2147501815U,	// ORNv8i8
    2214632399U,	// ORRWri
    0U,	// ORRWrr
    2214632399U,	// ORRWrs
    2214632399U,	// ORRXri
    0U,	// ORRXrr
    2214632399U,	// ORRXrs
    2147501041U,	// ORRv16i8
    335601764U,	// ORRv2i32
    335598327U,	// ORRv4i16
    335603649U,	// ORRv4i32
    335599660U,	// ORRv8i16
    2147501991U,	// ORRv8i8
    2147505235U,	// PMULLv16i8
    2147507043U,	// PMULLv1i64
    2147507032U,	// PMULLv2i64
    2147505996U,	// PMULLv8i8
    2147500878U,	// PMULv16i8
    2147501720U,	// PMULv8i8
    403233386U,	// PRFMl
    2248727146U,	// PRFMroW
    2248727146U,	// PRFMroX
    2248727146U,	// PRFMui
    2248727176U,	// PRFUMi
    2147507968U,	// RADDHNv2i64_v2i32
    2281759471U,	// RADDHNv2i64_v4i32
    2147504608U,	// RADDHNv4i32_v4i16
    2281755798U,	// RADDHNv4i32_v8i16
    2281750748U,	// RADDHNv8i16_v16i8
    2147501740U,	// RADDHNv8i16_v8i8
    67152442U,	// RBITWr
    67152442U,	// RBITXr
    17451U,	// RBITv16i8
    18395U,	// RBITv8i8
    1092135U,	// RET
    0U,	// RET_ReallyLR
    67141726U,	// REV16Wr
    67141726U,	// REV16Xr
    16778U,	// REV16v16i8
    17702U,	// REV16v8i8
    67141650U,	// REV32Xr
    16580U,	// REV32v16i8
    20524U,	// REV32v4i16
    21445U,	// REV32v8i16
    17655U,	// REV32v8i8
    16767U,	// REV64v16i8
    23750U,	// REV64v2i32
    20561U,	// REV64v4i16
    25521U,	// REV64v4i32
    21848U,	// REV64v8i16
    17692U,	// REV64v8i8
    67152528U,	// REVWr
    67152528U,	// REVXr
    2214632394U,	// RORVWr
    2214632394U,	// RORVXr
    2281750789U,	// RSHRNv16i8_shift
    2147508030U,	// RSHRNv2i32_shift
    2147504661U,	// RSHRNv4i16_shift
    2281759509U,	// RSHRNv4i32_shift
    2281755836U,	// RSHRNv8i16_shift
    2147501793U,	// RSHRNv8i8_shift
    2147507957U,	// RSUBHNv2i64_v2i32
    2281759459U,	// RSUBHNv2i64_v4i32
    2147504597U,	// RSUBHNv4i32_v4i16
    2281755786U,	// RSUBHNv4i32_v8i16
    2281750735U,	// RSUBHNv8i16_v16i8
    2147501729U,	// RSUBHNv8i16_v8i8
    2281755599U,	// SABALv16i8_v8i16
    2281753579U,	// SABALv2i32_v2i64
    2281760124U,	// SABALv4i16_v4i32
    2281753029U,	// SABALv4i32_v2i64
    2281759244U,	// SABALv8i16_v4i32
    2281756292U,	// SABALv8i8_v8i16
    2281750933U,	// SABAv16i8
    2281757904U,	// SABAv2i32
    2281754715U,	// SABAv4i16
    2281759675U,	// SABAv4i32
    2281756002U,	// SABAv8i16
    2281751856U,	// SABAv8i8
    2147505169U,	// SABDLv16i8_v8i16
    2147503155U,	// SABDLv2i32_v2i64
    2147509700U,	// SABDLv4i16_v4i32
    2147502612U,	// SABDLv4i32_v2i64
    2147508827U,	// SABDLv8i16_v4i32
    2147505856U,	// SABDLv8i8_v8i16
    2147500584U,	// SABDv16i8
    2147507550U,	// SABDv2i32
    2147504331U,	// SABDv4i16
    2147509331U,	// SABDv4i32
    2147505618U,	// SABDv8i16
    2147501472U,	// SABDv8i8
    134272929U,	// SADALPv16i8_v8i16
    134269310U,	// SADALPv2i32_v1i64
    134274977U,	// SADALPv4i16_v2i32
    134270279U,	// SADALPv4i32_v2i64
    134276862U,	// SADALPv8i16_v4i32
    134271596U,	// SADALPv8i8_v4i16
    22455U,	// SADDLPv16i8_v8i16
    18836U,	// SADDLPv2i32_v1i64
    24503U,	// SADDLPv4i16_v2i32
    19805U,	// SADDLPv4i32_v2i64
    26388U,	// SADDLPv8i16_v4i32
    21122U,	// SADDLPv8i8_v4i16
    33915U,	// SADDLVv16i8v
    37714U,	// SADDLVv4i16v
    43210U,	// SADDLVv4i32v
    39047U,	// SADDLVv8i16v
    34851U,	// SADDLVv8i8v
    2147505191U,	// SADDLv16i8_v8i16
    2147503175U,	// SADDLv2i32_v2i64
    2147509720U,	// SADDLv4i16_v4i32
    2147502634U,	// SADDLv4i32_v2i64
    2147508849U,	// SADDLv8i16_v4i32
    2147505876U,	// SADDLv8i8_v8i16
    2147505474U,	// SADDWv16i8_v8i16
    2147503855U,	// SADDWv2i32_v2i64
    2147510609U,	// SADDWv4i16_v4i32
    2147502797U,	// SADDWv4i32_v2i64
    2147509147U,	// SADDWv8i16_v4i32
    2147506393U,	// SADDWv8i8_v8i16
    2214635971U,	// SBCSWr
    2214635971U,	// SBCSXr
    2214627617U,	// SBCWr
    2214627617U,	// SBCXr
    2214632030U,	// SBFMWri
    2214632030U,	// SBFMXri
    2214629265U,	// SCVTFSWDri
    2214629265U,	// SCVTFSWSri
    2214629265U,	// SCVTFSXDri
    2214629265U,	// SCVTFSXSri
    67145617U,	// SCVTFUWDri
    67145617U,	// SCVTFUWSri
    67145617U,	// SCVTFUXDri
    67145617U,	// SCVTFUXSri
    2214629265U,	// SCVTFd
    2214629265U,	// SCVTFs
    67145617U,	// SCVTFv1i32
    67145617U,	// SCVTFv1i64
    24069U,	// SCVTFv2f32
    19351U,	// SCVTFv2f64
    2147507717U,	// SCVTFv2i32_shift
    2147502999U,	// SCVTFv2i64_shift
    25850U,	// SCVTFv4f32
    2147509498U,	// SCVTFv4i32_shift
    2214636187U,	// SDIVWr
    2214636187U,	// SDIVXr
    2214636187U,	// SDIV_IntWr
    2214636187U,	// SDIV_IntXr
    2416059448U,	// SHA1Crrr
    67145730U,	// SHA1Hrr
    2416060057U,	// SHA1Mrrr
    2416060138U,	// SHA1Prrr
    2281759152U,	// SHA1SU0rrr
    134275557U,	// SHA1SU1rr
    2416058879U,	// SHA256H2rrr
    2416059681U,	// SHA256Hrrr
    134275516U,	// SHA256SU0rr
    2281759217U,	// SHA256SU1rrr
    2147500628U,	// SHADDv16i8
    2147507599U,	// SHADDv2i32
    2147504371U,	// SHADDv4i16
    2147509380U,	// SHADDv4i32
    2147505658U,	// SHADDv8i16
    2147501512U,	// SHADDv8i8
    21566U,	// SHLLv16i8
    2147503276U,	// SHLLv2i32
    26173U,	// SHLLv4i16
    2147502657U,	// SHLLv4i32
    25224U,	// SHLLv8i16
    22329U,	// SHLLv8i8
    2214631932U,	// SHLd
    2147500783U,	// SHLv16i8_shift
    2147507837U,	// SHLv2i32_shift
    2147503197U,	// SHLv2i64_shift
    2147504511U,	// SHLv4i16_shift
    2147509742U,	// SHLv4i32_shift
    2147505898U,	// SHLv8i16_shift
    2147501634U,	// SHLv8i8_shift
    2281750763U,	// SHRNv16i8_shift
    2147508008U,	// SHRNv2i32_shift
    2147504639U,	// SHRNv4i16_shift
    2281759485U,	// SHRNv4i32_shift
    2281755812U,	// SHRNv8i16_shift
    2147501771U,	// SHRNv8i8_shift
    2147500508U,	// SHSUBv16i8
    2147507493U,	// SHSUBv2i32
    2147504283U,	// SHSUBv4i16
    2147509264U,	// SHSUBv4i32
    2147505570U,	// SHSUBv8i16
    2147501424U,	// SHSUBv8i8
    2416056738U,	// SLId
    2281751249U,	// SLIv16i8_shift
    2281758286U,	// SLIv2i32_shift
    2281753543U,	// SLIv2i64_shift
    2281754971U,	// SLIv4i16_shift
    2281760079U,	// SLIv4i32_shift
    2281756258U,	// SLIv8i16_shift
    2281752103U,	// SLIv8i8_shift
    2214631907U,	// SMADDLrrr
    2147500958U,	// SMAXPv16i8
    2147508256U,	// SMAXPv2i32
    2147504820U,	// SMAXPv4i16
    2147510141U,	// SMAXPv4i32
    2147506153U,	// SMAXPv8i16
    2147501916U,	// SMAXPv8i8
    33961U,	// SMAXVv16i8v
    37756U,	// SMAXVv4i16v
    43305U,	// SMAXVv4i32v
    39089U,	// SMAXVv8i16v
    34893U,	// SMAXVv8i8v
    2147501247U,	// SMAXv16i8
    2147508598U,	// SMAXv2i32
    2147505040U,	// SMAXv4i16
    2147510638U,	// SMAXv4i32
    2147506413U,	// SMAXv8i16
    2147502177U,	// SMAXv8i8
    84272U,	// SMC
    2147500927U,	// SMINPv16i8
    2147508207U,	// SMINPv2i32
    2147504792U,	// SMINPv4i16
    2147510092U,	// SMINPv4i32
    2147506125U,	// SMINPv8i16
    2147501888U,	// SMINPv8i8
    33939U,	// SMINVv16i8v
    37736U,	// SMINVv4i16v
    43266U,	// SMINVv4i32v
    39069U,	// SMINVv8i16v
    34873U,	// SMINVv8i8v
    2147500888U,	// SMINv16i8
    2147507988U,	// SMINv2i32
    2147504619U,	// SMINv4i16
    2147509965U,	// SMINv4i32
    2147506054U,	// SMINv8i16
    2147501751U,	// SMINv8i8
    2281755621U,	// SMLALv16i8_v8i16
    2281753611U,	// SMLALv2i32_indexed
    2281753611U,	// SMLALv2i32_v2i64
    2281760156U,	// SMLALv4i16_indexed
    2281760156U,	// SMLALv4i16_v4i32
    2281753064U,	// SMLALv4i32_indexed
    2281753064U,	// SMLALv4i32_v2i64
    2281759279U,	// SMLALv8i16_indexed
    2281759279U,	// SMLALv8i16_v4i32
    2281756312U,	// SMLALv8i8_v8i16
    2281755764U,	// SMLSLv16i8_v8i16
    2281753835U,	// SMLSLv2i32_indexed
    2281753835U,	// SMLSLv2i32_v2i64
    2281760380U,	// SMLSLv4i16_indexed
    2281760380U,	// SMLSLv4i16_v4i32
    2281753222U,	// SMLSLv4i32_indexed
    2281753222U,	// SMLSLv4i32_v2i64
    2281759437U,	// SMLSLv8i16_indexed
    2281759437U,	// SMLSLv8i16_v4i32
    2281756522U,	// SMLSLv8i8_v8i16
    2147520498U,	// SMOVvi16to32
    2147520498U,	// SMOVvi16to64
    2147523703U,	// SMOVvi32to64
    2147516558U,	// SMOVvi8to32
    2147516558U,	// SMOVvi8to64
    2214631891U,	// SMSUBLrrr
    2214631715U,	// SMULHrr
    2147505246U,	// SMULLv16i8_v8i16
    2147503307U,	// SMULLv2i32_indexed
    2147503307U,	// SMULLv2i32_v2i64
    2147509852U,	// SMULLv4i16_indexed
    2147509852U,	// SMULLv4i16_v4i32
    2147502691U,	// SMULLv4i32_indexed
    2147502691U,	// SMULLv4i32_v2i64
    2147508906U,	// SMULLv8i16_indexed
    2147508906U,	// SMULLv8i16_v4i32
    2147506006U,	// SMULLv8i8_v8i16
    17402U,	// SQABSv16i8
    67152310U,	// SQABSv1i16
    67152310U,	// SQABSv1i32
    67152310U,	// SQABSv1i64
    67152310U,	// SQABSv1i8
    24704U,	// SQABSv2i32
    19958U,	// SQABSv2i64
    21247U,	// SQABSv4i16
    26589U,	// SQABSv4i32
    22580U,	// SQABSv8i16
    18351U,	// SQABSv8i8
    2147500651U,	// SQADDv16i8
    2214629192U,	// SQADDv1i16
    2214629192U,	// SQADDv1i32
    2214629192U,	// SQADDv1i64
    2214629192U,	// SQADDv1i8
    2147507620U,	// SQADDv2i32
    2147502925U,	// SQADDv2i64
    2147504392U,	// SQADDv4i16
    2147509401U,	// SQADDv4i32
    2147505679U,	// SQADDv8i16
    2147501533U,	// SQADDv8i8
    2416056773U,	// SQDMLALi16
    2416056773U,	// SQDMLALi32
    2416054218U,	// SQDMLALv1i32_indexed
    2416057407U,	// SQDMLALv1i64_indexed
    2281753599U,	// SQDMLALv2i32_indexed
    2281753599U,	// SQDMLALv2i32_v2i64
    2281760144U,	// SQDMLALv4i16_indexed
    2281760144U,	// SQDMLALv4i16_v4i32
    2281753051U,	// SQDMLALv4i32_indexed
    2281753051U,	// SQDMLALv4i32_v2i64
    2281759266U,	// SQDMLALv8i16_indexed
    2281759266U,	// SQDMLALv8i16_v4i32
    2416056891U,	// SQDMLSLi16
    2416056891U,	// SQDMLSLi32
    2416054240U,	// SQDMLSLv1i32_indexed
    2416057429U,	// SQDMLSLv1i64_indexed
    2281753823U,	// SQDMLSLv2i32_indexed
    2281753823U,	// SQDMLSLv2i32_v2i64
    2281760368U,	// SQDMLSLv4i16_indexed
    2281760368U,	// SQDMLSLv4i16_v4i32
    2281753209U,	// SQDMLSLv4i32_indexed
    2281753209U,	// SQDMLSLv4i32_v2i64
    2281759424U,	// SQDMLSLv8i16_indexed
    2281759424U,	// SQDMLSLv8i16_v4i32
    2214631696U,	// SQDMULHv1i16
    2214629299U,	// SQDMULHv1i16_indexed
    2214631696U,	// SQDMULHv1i32
    2214632488U,	// SQDMULHv1i32_indexed
    2147507756U,	// SQDMULHv2i32
    2147507756U,	// SQDMULHv2i32_indexed
    2147504441U,	// SQDMULHv4i16
    2147504441U,	// SQDMULHv4i16_indexed
    2147509549U,	// SQDMULHv4i32
    2147509549U,	// SQDMULHv4i32_indexed
    2147505728U,	// SQDMULHv8i16
    2147505728U,	// SQDMULHv8i16_indexed
    2214631986U,	// SQDMULLi16
    2214631986U,	// SQDMULLi32
    2214629333U,	// SQDMULLv1i32_indexed
    2214632522U,	// SQDMULLv1i64_indexed
    2147503295U,	// SQDMULLv2i32_indexed
    2147503295U,	// SQDMULLv2i32_v2i64
    2147509840U,	// SQDMULLv4i16_indexed
    2147509840U,	// SQDMULLv4i16_v4i32
    2147502678U,	// SQDMULLv4i32_indexed
    2147502678U,	// SQDMULLv4i32_v2i64
    2147508893U,	// SQDMULLv8i16_indexed
    2147508893U,	// SQDMULLv8i16_v4i32
    17084U,	// SQNEGv16i8
    67145637U,	// SQNEGv1i16
    67145637U,	// SQNEGv1i32
    67145637U,	// SQNEGv1i64
    67145637U,	// SQNEGv1i8
    24098U,	// SQNEGv2i32
    19380U,	// SQNEGv2i64
    20783U,	// SQNEGv4i16
    25879U,	// SQNEGv4i32
    22070U,	// SQNEGv8i16
    17940U,	// SQNEGv8i8
    2214631705U,	// SQRDMULHv1i16
    2214629310U,	// SQRDMULHv1i16_indexed
    2214631705U,	// SQRDMULHv1i32
    2214632499U,	// SQRDMULHv1i32_indexed
    2147507768U,	// SQRDMULHv2i32
    2147507768U,	// SQRDMULHv2i32_indexed
    2147504453U,	// SQRDMULHv4i16
    2147504453U,	// SQRDMULHv4i16_indexed
    2147509561U,	// SQRDMULHv4i32
    2147509561U,	// SQRDMULHv4i32_indexed
    2147505740U,	// SQRDMULHv8i16
    2147505740U,	// SQRDMULHv8i16_indexed
    2147500803U,	// SQRSHLv16i8
    2214631944U,	// SQRSHLv1i16
    2214631944U,	// SQRSHLv1i32
    2214631944U,	// SQRSHLv1i64
    2214631944U,	// SQRSHLv1i8
    2147507855U,	// SQRSHLv2i32
    2147503215U,	// SQRSHLv2i64
    2147504529U,	// SQRSHLv4i16
    2147509760U,	// SQRSHLv4i32
    2147505916U,	// SQRSHLv8i16
    2147501652U,	// SQRSHLv8i8
    2214632112U,	// SQRSHRNb
    2214632112U,	// SQRSHRNh
    2214632112U,	// SQRSHRNs
    2281750787U,	// SQRSHRNv16i8_shift
    2147508028U,	// SQRSHRNv2i32_shift
    2147504659U,	// SQRSHRNv4i16_shift
    2281759507U,	// SQRSHRNv4i32_shift
    2281755834U,	// SQRSHRNv8i16_shift
    2147501791U,	// SQRSHRNv8i8_shift
    2214632173U,	// SQRSHRUNb
    2214632173U,	// SQRSHRUNh
    2214632173U,	// SQRSHRUNs
    2281750863U,	// SQRSHRUNv16i8_shift
    2147508095U,	// SQRSHRUNv2i32_shift
    2147504715U,	// SQRSHRUNv4i16_shift
    2281759577U,	// SQRSHRUNv4i32_shift
    2281755904U,	// SQRSHRUNv8i16_shift
    2147501855U,	// SQRSHRUNv8i8_shift
    2214636136U,	// SQSHLUb
    2214636136U,	// SQSHLUd
    2214636136U,	// SQSHLUh
    2214636136U,	// SQSHLUs
    2147501157U,	// SQSHLUv16i8_shift
    2147508516U,	// SQSHLUv2i32_shift
    2147503762U,	// SQSHLUv2i64_shift
    2147504958U,	// SQSHLUv4i16_shift
    2147510401U,	// SQSHLUv4i32_shift
    2147506291U,	// SQSHLUv8i16_shift
    2147502095U,	// SQSHLUv8i8_shift
    2214631930U,	// SQSHLb
    2214631930U,	// SQSHLd
    2214631930U,	// SQSHLh
    2214631930U,	// SQSHLs
    2147500781U,	// SQSHLv16i8
    2147500781U,	// SQSHLv16i8_shift
    2214631930U,	// SQSHLv1i16
    2214631930U,	// SQSHLv1i32
    2214631930U,	// SQSHLv1i64
    2214631930U,	// SQSHLv1i8
    2147507835U,	// SQSHLv2i32
    2147507835U,	// SQSHLv2i32_shift
    2147503195U,	// SQSHLv2i64
    2147503195U,	// SQSHLv2i64_shift
    2147504509U,	// SQSHLv4i16
    2147504509U,	// SQSHLv4i16_shift
    2147509740U,	// SQSHLv4i32
    2147509740U,	// SQSHLv4i32_shift
    2147505896U,	// SQSHLv8i16
    2147505896U,	// SQSHLv8i16_shift
    2147501632U,	// SQSHLv8i8
    2147501632U,	// SQSHLv8i8_shift
    2214632096U,	// SQSHRNb
    2214632096U,	// SQSHRNh
    2214632096U,	// SQSHRNs
    2281750761U,	// SQSHRNv16i8_shift
    2147508006U,	// SQSHRNv2i32_shift
    2147504637U,	// SQSHRNv4i16_shift
    2281759483U,	// SQSHRNv4i32_shift
    2281755810U,	// SQSHRNv8i16_shift
    2147501769U,	// SQSHRNv8i8_shift
    2214632164U,	// SQSHRUNb
    2214632164U,	// SQSHRUNh
    2214632164U,	// SQSHRUNs
    2281750849U,	// SQSHRUNv16i8_shift
    2147508083U,	// SQSHRUNv2i32_shift
    2147504703U,	// SQSHRUNv4i16_shift
    2281759564U,	// SQSHRUNv4i32_shift
    2281755891U,	// SQSHRUNv8i16_shift
    2147501843U,	// SQSHRUNv8i8_shift
    2147500530U,	// SQSUBv16i8
    2214627603U,	// SQSUBv1i16
    2214627603U,	// SQSUBv1i32
    2214627603U,	// SQSUBv1i64
    2214627603U,	// SQSUBv1i8
    2147507513U,	// SQSUBv2i32
    2147502886U,	// SQSUBv2i64
    2147504303U,	// SQSUBv4i16
    2147509284U,	// SQSUBv4i32
    2147505590U,	// SQSUBv8i16
    2147501444U,	// SQSUBv8i8
    134267177U,	// SQXTNv16i8
    67148502U,	// SQXTNv1i16
    67148502U,	// SQXTNv1i32
    67148502U,	// SQXTNv1i8
    24415U,	// SQXTNv2i32
    21035U,	// SQXTNv4i16
    134275894U,	// SQXTNv4i32
    134272221U,	// SQXTNv8i16
    18175U,	// SQXTNv8i8
    134267230U,	// SQXTUNv16i8
    67148535U,	// SQXTUNv1i16
    67148535U,	// SQXTUNv1i32
    67148535U,	// SQXTUNv1i8
    24460U,	// SQXTUNv2i32
    21080U,	// SQXTUNv4i16
    134275943U,	// SQXTUNv4i32
    134272270U,	// SQXTUNv8i16
    18220U,	// SQXTUNv8i8
    2147500604U,	// SRHADDv16i8
    2147507577U,	// SRHADDv2i32
    2147504349U,	// SRHADDv4i16
    2147509358U,	// SRHADDv4i32
    2147505636U,	// SRHADDv8i16
    2147501490U,	// SRHADDv8i8
    2416056743U,	// SRId
    2281751258U,	// SRIv16i8_shift
    2281758303U,	// SRIv2i32_shift
    2281753551U,	// SRIv2i64_shift
    2281754988U,	// SRIv4i16_shift
    2281760096U,	// SRIv4i32_shift
    2281756275U,	// SRIv8i16_shift
    2281752111U,	// SRIv8i8_shift
    2147500827U,	// SRSHLv16i8
    2214631960U,	// SRSHLv1i64
    2147507877U,	// SRSHLv2i32
    2147503237U,	// SRSHLv2i64
    2147504551U,	// SRSHLv4i16
    2147509782U,	// SRSHLv4i32
    2147505938U,	// SRSHLv8i16
    2147501674U,	// SRSHLv8i8
    2214632352U,	// SRSHRd
    2147500990U,	// SRSHRv16i8_shift
    2147508286U,	// SRSHRv2i32_shift
    2147503548U,	// SRSHRv2i64_shift
    2147504849U,	// SRSHRv4i16_shift
    2147510171U,	// SRSHRv4i32_shift
    2147506182U,	// SRSHRv8i16_shift
    2147501945U,	// SRSHRv8i8_shift
    2416050277U,	// SRSRAd
    2281750962U,	// SRSRAv16i8_shift
    2281757931U,	// SRSRAv2i32_shift
    2281753324U,	// SRSRAv2i64_shift
    2281754741U,	// SRSRAv4i16_shift
    2281759702U,	// SRSRAv4i32_shift
    2281756028U,	// SRSRAv8i16_shift
    2281751882U,	// SRSRAv8i8_shift
    2147505213U,	// SSHLLv16i8_shift
    2147503275U,	// SSHLLv2i32_shift
    2147509820U,	// SSHLLv4i16_shift
    2147502656U,	// SSHLLv4i32_shift
    2147508871U,	// SSHLLv8i16_shift
    2147505976U,	// SSHLLv8i8_shift
    2147500849U,	// SSHLv16i8
    2214631974U,	// SSHLv1i64
    2147507897U,	// SSHLv2i32
    2147503257U,	// SSHLv2i64
    2147504571U,	// SSHLv4i16
    2147509802U,	// SSHLv4i32
    2147505958U,	// SSHLv8i16
    2147501694U,	// SSHLv8i8
    2214632366U,	// SSHRd
    2147501012U,	// SSHRv16i8_shift
    2147508306U,	// SSHRv2i32_shift
    2147503568U,	// SSHRv2i64_shift
    2147504869U,	// SSHRv4i16_shift
    2147510191U,	// SSHRv4i32_shift
    2147506202U,	// SSHRv8i16_shift
    2147501965U,	// SSHRv8i8_shift
    2416050291U,	// SSRAd
    2281750984U,	// SSRAv16i8_shift
    2281757951U,	// SSRAv2i32_shift
    2281753344U,	// SSRAv2i64_shift
    2281754761U,	// SSRAv4i16_shift
    2281759722U,	// SSRAv4i32_shift
    2281756048U,	// SSRAv8i16_shift
    2281751902U,	// SSRAv8i8_shift
    2147505147U,	// SSUBLv16i8_v8i16
    2147503135U,	// SSUBLv2i32_v2i64
    2147509680U,	// SSUBLv4i16_v4i32
    2147502590U,	// SSUBLv4i32_v2i64
    2147508805U,	// SSUBLv8i16_v4i32
    2147505836U,	// SSUBLv8i8_v8i16
    2147505452U,	// SSUBWv16i8_v8i16
    2147503835U,	// SSUBWv2i32_v2i64
    2147510589U,	// SSUBWv4i16_v4i32
    2147502775U,	// SSUBWv4i32_v2i64
    2147509125U,	// SSUBWv8i16_v4i32
    2147506373U,	// SSUBWv8i8_v8i16
    147469U,	// ST1Fourv16b
    9601037U,	// ST1Fourv16b_POST
    180237U,	// ST1Fourv1d
    10682381U,	// ST1Fourv1d_POST
    213005U,	// ST1Fourv2d
    9666573U,	// ST1Fourv2d_POST
    245773U,	// ST1Fourv2s
    10747917U,	// ST1Fourv2s_POST
    278541U,	// ST1Fourv4h
    10780685U,	// ST1Fourv4h_POST
    311309U,	// ST1Fourv4s
    9764877U,	// ST1Fourv4s_POST
    344077U,	// ST1Fourv8b
    10846221U,	// ST1Fourv8b_POST
    376845U,	// ST1Fourv8h
    9830413U,	// ST1Fourv8h_POST
    147469U,	// ST1Onev16b
    11698189U,	// ST1Onev16b_POST
    180237U,	// ST1Onev1d
    12779533U,	// ST1Onev1d_POST
    213005U,	// ST1Onev2d
    11763725U,	// ST1Onev2d_POST
    245773U,	// ST1Onev2s
    12845069U,	// ST1Onev2s_POST
    278541U,	// ST1Onev4h
    12877837U,	// ST1Onev4h_POST
    311309U,	// ST1Onev4s
    11862029U,	// ST1Onev4s_POST
    344077U,	// ST1Onev8b
    12943373U,	// ST1Onev8b_POST
    376845U,	// ST1Onev8h
    11927565U,	// ST1Onev8h_POST
    147469U,	// ST1Threev16b
    16941069U,	// ST1Threev16b_POST
    180237U,	// ST1Threev1d
    18022413U,	// ST1Threev1d_POST
    213005U,	// ST1Threev2d
    17006605U,	// ST1Threev2d_POST
    245773U,	// ST1Threev2s
    18087949U,	// ST1Threev2s_POST
    278541U,	// ST1Threev4h
    18120717U,	// ST1Threev4h_POST
    311309U,	// ST1Threev4s
    17104909U,	// ST1Threev4s_POST
    344077U,	// ST1Threev8b
    18186253U,	// ST1Threev8b_POST
    376845U,	// ST1Threev8h
    17170445U,	// ST1Threev8h_POST
    147469U,	// ST1Twov16b
    10649613U,	// ST1Twov16b_POST
    180237U,	// ST1Twov1d
    11730957U,	// ST1Twov1d_POST
    213005U,	// ST1Twov2d
    10715149U,	// ST1Twov2d_POST
    245773U,	// ST1Twov2s
    11796493U,	// ST1Twov2s_POST
    278541U,	// ST1Twov4h
    11829261U,	// ST1Twov4h_POST
    311309U,	// ST1Twov4s
    10813453U,	// ST1Twov4s_POST
    344077U,	// ST1Twov8b
    11894797U,	// ST1Twov8b_POST
    376845U,	// ST1Twov8h
    10878989U,	// ST1Twov8h_POST
    589837U,	// ST1i16
    1041645581U,	// ST1i16_POST
    606221U,	// ST1i32
    1108787213U,	// ST1i32_POST
    622605U,	// ST1i64
    1175928845U,	// ST1i64_POST
    638989U,	// ST1i8
    1243070477U,	// ST1i8_POST
    147518U,	// ST2Twov16b
    10649662U,	// ST2Twov16b_POST
    213054U,	// ST2Twov2d
    10715198U,	// ST2Twov2d_POST
    245822U,	// ST2Twov2s
    11796542U,	// ST2Twov2s_POST
    278590U,	// ST2Twov4h
    11829310U,	// ST2Twov4h_POST
    311358U,	// ST2Twov4s
    10813502U,	// ST2Twov4s_POST
    344126U,	// ST2Twov8b
    11894846U,	// ST2Twov8b_POST
    376894U,	// ST2Twov8h
    10879038U,	// ST2Twov8h_POST
    589886U,	// ST2i16
    1108754494U,	// ST2i16_POST
    606270U,	// ST2i32
    1175896126U,	// ST2i32_POST
    622654U,	// ST2i64
    1310146622U,	// ST2i64_POST
    639038U,	// ST2i8
    1041743934U,	// ST2i8_POST
    147535U,	// ST3Threev16b
    16941135U,	// ST3Threev16b_POST
    213071U,	// ST3Threev2d
    17006671U,	// ST3Threev2d_POST
    245839U,	// ST3Threev2s
    18088015U,	// ST3Threev2s_POST
    278607U,	// ST3Threev4h
    18120783U,	// ST3Threev4h_POST
    311375U,	// ST3Threev4s
    17104975U,	// ST3Threev4s_POST
    344143U,	// ST3Threev8b
    18186319U,	// ST3Threev8b_POST
    376911U,	// ST3Threev8h
    17170511U,	// ST3Threev8h_POST
    589903U,	// ST3i16
    1377189967U,	// ST3i16_POST
    606287U,	// ST3i32
    1444331599U,	// ST3i32_POST
    622671U,	// ST3i64
    1511473231U,	// ST3i64_POST
    639055U,	// ST3i8
    1578614863U,	// ST3i8_POST
    147545U,	// ST4Fourv16b
    9601113U,	// ST4Fourv16b_POST
    213081U,	// ST4Fourv2d
    9666649U,	// ST4Fourv2d_POST
    245849U,	// ST4Fourv2s
    10747993U,	// ST4Fourv2s_POST
    278617U,	// ST4Fourv4h
    10780761U,	// ST4Fourv4h_POST
    311385U,	// ST4Fourv4s
    9764953U,	// ST4Fourv4s_POST
    344153U,	// ST4Fourv8b
    10846297U,	// ST4Fourv8b_POST
    376921U,	// ST4Fourv8h
    9830489U,	// ST4Fourv8h_POST
    589913U,	// ST4i16
    1175863385U,	// ST4i16_POST
    606297U,	// ST4i32
    1310113881U,	// ST4i32_POST
    622681U,	// ST4i64
    1645690969U,	// ST4i64_POST
    639065U,	// ST4i8
    1108852825U,	// ST4i8_POST
    100698262U,	// STLRB
    100702526U,	// STLRH
    100703167U,	// STLRW
    100703167U,	// STLRX
    2214632267U,	// STLXPW
    2214632267U,	// STLXPX
    2214627534U,	// STLXRB
    2214631798U,	// STLXRH
    2214632467U,	// STLXRW
    2214632467U,	// STLXRX
    2214632229U,	// STNPDi
    2214632229U,	// STNPQi
    2214632229U,	// STNPSi
    2214632229U,	// STNPWi
    2214632229U,	// STNPXi
    2214632249U,	// STPDi
    2416057145U,	// STPDpost
    2416057145U,	// STPDpre
    2214632249U,	// STPQi
    2416057145U,	// STPQpost
    2416057145U,	// STPQpre
    2214632249U,	// STPSi
    2416057145U,	// STPSpost
    2416057145U,	// STPSpre
    2214632249U,	// STPWi
    2416057145U,	// STPWpost
    2416057145U,	// STPWpre
    2214632249U,	// STPXi
    2416057145U,	// STPXpost
    2416057145U,	// STPXpre
    302123172U,	// STRBBpost
    2449606820U,	// STRBBpre
    2248181924U,	// STRBBroW
    2248181924U,	// STRBBroX
    2248181924U,	// STRBBui
    302128105U,	// STRBpost
    2449611753U,	// STRBpre
    2248186857U,	// STRBroW
    2248186857U,	// STRBroX
    2248186857U,	// STRBui
    302128105U,	// STRDpost
    2449611753U,	// STRDpre
    2248186857U,	// STRDroW
    2248186857U,	// STRDroX
    2248186857U,	// STRDui
    302127436U,	// STRHHpost
    2449611084U,	// STRHHpre
    2248186188U,	// STRHHroW
    2248186188U,	// STRHHroX
    2248186188U,	// STRHHui
    302128105U,	// STRHpost
    2449611753U,	// STRHpre
    2248186857U,	// STRHroW
    2248186857U,	// STRHroX
    2248186857U,	// STRHui
    302128105U,	// STRQpost
    2449611753U,	// STRQpre
    2248186857U,	// STRQroW
    2248186857U,	// STRQroX
    2248186857U,	// STRQui
    302128105U,	// STRSpost
    2449611753U,	// STRSpre
    2248186857U,	// STRSroW
    2248186857U,	// STRSroX
    2248186857U,	// STRSui
    302128105U,	// STRWpost
    2449611753U,	// STRWpre
    2248186857U,	// STRWroW
    2248186857U,	// STRWroX
    2248186857U,	// STRWui
    302128105U,	// STRXpost
    2449611753U,	// STRXpre
    2248186857U,	// STRXroW
    2248186857U,	// STRXroX
    2248186857U,	// STRXui
    2248181930U,	// STTRBi
    2248186194U,	// STTRHi
    2248186862U,	// STTRWi
    2248186862U,	// STTRXi
    2248181944U,	// STURBBi
    2248186880U,	// STURBi
    2248186880U,	// STURDi
    2248186208U,	// STURHHi
    2248186880U,	// STURHi
    2248186880U,	// STURQi
    2248186880U,	// STURSi
    2248186880U,	// STURWi
    2248186880U,	// STURXi
    2214632274U,	// STXPW
    2214632274U,	// STXPX
    2214627542U,	// STXRB
    2214631806U,	// STXRH
    2214632474U,	// STXRW
    2214632474U,	// STXRX
    2147507958U,	// SUBHNv2i64_v2i32
    2281759460U,	// SUBHNv2i64_v4i32
    2147504598U,	// SUBHNv4i32_v4i16
    2281755787U,	// SUBHNv4i32_v8i16
    2281750736U,	// SUBHNv8i16_v16i8
    2147501730U,	// SUBHNv8i16_v8i8
    2214635965U,	// SUBSWri
    0U,	// SUBSWrr
    2214635965U,	// SUBSWrs
    2214635965U,	// SUBSWrx
    2214635965U,	// SUBSXri
    0U,	// SUBSXrr
    2214635965U,	// SUBSXrs
    2214635965U,	// SUBSXrx
    2214635965U,	// SUBSXrx64
    2214627583U,	// SUBWri
    0U,	// SUBWrr
    2214627583U,	// SUBWrs
    2214627583U,	// SUBWrx
    2214627583U,	// SUBXri
    0U,	// SUBXrr
    2214627583U,	// SUBXrs
    2214627583U,	// SUBXrx
    2214627583U,	// SUBXrx64
    2147500510U,	// SUBv16i8
    2214627583U,	// SUBv1i64
    2147507485U,	// SUBv2i32
    2147502878U,	// SUBv2i64
    2147504285U,	// SUBv4i16
    2147509256U,	// SUBv4i32
    2147505572U,	// SUBv8i16
    2147501426U,	// SUBv8i8
    134267510U,	// SUQADDv16i8
    268570447U,	// SUQADDv1i16
    268570447U,	// SUQADDv1i32
    268570447U,	// SUQADDv1i64
    268570447U,	// SUQADDv1i8
    134274478U,	// SUQADDv2i32
    134269783U,	// SUQADDv2i64
    134271250U,	// SUQADDv4i16
    134276259U,	// SUQADDv4i32
    134272537U,	// SUQADDv8i16
    134268391U,	// SUQADDv8i8
    84289U,	// SVC
    2214632004U,	// SYSLxt
    1677765146U,	// SYSxt
    3927988686U,	// TBLv16i8Four
    3927988686U,	// TBLv16i8One
    3927988686U,	// TBLv16i8Three
    3927988686U,	// TBLv16i8Two
    1781553614U,	// TBLv8i8Four
    1781553614U,	// TBLv8i8One
    1781553614U,	// TBLv8i8Three
    1781553614U,	// TBLv8i8Two
    2214636338U,	// TBNZW
    2214636338U,	// TBNZX
    3995134705U,	// TBXv16i8Four
    3995134705U,	// TBXv16i8One
    3995134705U,	// TBXv16i8Three
    3995134705U,	// TBXv16i8Two
    1848699633U,	// TBXv8i8Four
    1848699633U,	// TBXv8i8One
    1848699633U,	// TBXv8i8Three
    1848699633U,	// TBXv8i8Two
    2214636322U,	// TBZW
    2214636322U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    1092422U,	// TLSDESCCALL
    0U,	// TLSDESC_BLR
    2147500198U,	// TRN1v16i8
    2147507344U,	// TRN1v2i32
    2147502506U,	// TRN1v2i64
    2147504145U,	// TRN1v4i16
    2147508682U,	// TRN1v4i32
    2147505066U,	// TRN1v8i16
    2147501276U,	// TRN1v8i8
    2147500319U,	// TRN2v16i8
    2147507371U,	// TRN2v2i32
    2147502748U,	// TRN2v2i64
    2147504182U,	// TRN2v4i16
    2147509037U,	// TRN2v4i32
    2147505364U,	// TRN2v8i16
    2147501313U,	// TRN2v8i8
    2281755610U,	// UABALv16i8_v8i16
    2281753589U,	// UABALv2i32_v2i64
    2281760134U,	// UABALv4i16_v4i32
    2281753040U,	// UABALv4i32_v2i64
    2281759255U,	// UABALv8i16_v4i32
    2281756302U,	// UABALv8i8_v8i16
    2281750943U,	// UABAv16i8
    2281757913U,	// UABAv2i32
    2281754724U,	// UABAv4i16
    2281759684U,	// UABAv4i32
    2281756011U,	// UABAv8i16
    2281751865U,	// UABAv8i8
    2147505180U,	// UABDLv16i8_v8i16
    2147503165U,	// UABDLv2i32_v2i64
    2147509710U,	// UABDLv4i16_v4i32
    2147502623U,	// UABDLv4i32_v2i64
    2147508838U,	// UABDLv8i16_v4i32
    2147505866U,	// UABDLv8i8_v8i16
    2147500594U,	// UABDv16i8
    2147507559U,	// UABDv2i32
    2147504340U,	// UABDv4i16
    2147509340U,	// UABDv4i32
    2147505627U,	// UABDv8i16
    2147501481U,	// UABDv8i8
    134272940U,	// UADALPv16i8_v8i16
    134269321U,	// UADALPv2i32_v1i64
    134274988U,	// UADALPv4i16_v2i32
    134270290U,	// UADALPv4i32_v2i64
    134276873U,	// UADALPv8i16_v4i32
    134271607U,	// UADALPv8i8_v4i16
    22466U,	// UADDLPv16i8_v8i16
    18847U,	// UADDLPv2i32_v1i64
    24514U,	// UADDLPv4i16_v2i32
    19816U,	// UADDLPv4i32_v2i64
    26399U,	// UADDLPv8i16_v4i32
    21133U,	// UADDLPv8i8_v4i16
    33927U,	// UADDLVv16i8v
    37725U,	// UADDLVv4i16v
    43221U,	// UADDLVv4i32v
    39058U,	// UADDLVv8i16v
    34862U,	// UADDLVv8i8v
    2147505202U,	// UADDLv16i8_v8i16
    2147503185U,	// UADDLv2i32_v2i64
    2147509730U,	// UADDLv4i16_v4i32
    2147502645U,	// UADDLv4i32_v2i64
    2147508860U,	// UADDLv8i16_v4i32
    2147505886U,	// UADDLv8i8_v8i16
    2147505485U,	// UADDWv16i8_v8i16
    2147503865U,	// UADDWv2i32_v2i64
    2147510619U,	// UADDWv4i16_v4i32
    2147502808U,	// UADDWv4i32_v2i64
    2147509158U,	// UADDWv8i16_v4i32
    2147506403U,	// UADDWv8i8_v8i16
    2214632036U,	// UBFMWri
    2214632036U,	// UBFMXri
    2214629272U,	// UCVTFSWDri
    2214629272U,	// UCVTFSWSri
    2214629272U,	// UCVTFSXDri
    2214629272U,	// UCVTFSXSri
    67145624U,	// UCVTFUWDri
    67145624U,	// UCVTFUWSri
    67145624U,	// UCVTFUXDri
    67145624U,	// UCVTFUXSri
    2214629272U,	// UCVTFd
    2214629272U,	// UCVTFs
    67145624U,	// UCVTFv1i32
    67145624U,	// UCVTFv1i64
    24079U,	// UCVTFv2f32
    19361U,	// UCVTFv2f64
    2147507727U,	// UCVTFv2i32_shift
    2147503009U,	// UCVTFv2i64_shift
    25860U,	// UCVTFv4f32
    2147509508U,	// UCVTFv4i32_shift
    2214636193U,	// UDIVWr
    2214636193U,	// UDIVXr
    2214636193U,	// UDIV_IntWr
    2214636193U,	// UDIV_IntXr
    2147500639U,	// UHADDv16i8
    2147507609U,	// UHADDv2i32
    2147504381U,	// UHADDv4i16
    2147509390U,	// UHADDv4i32
    2147505668U,	// UHADDv8i16
    2147501522U,	// UHADDv8i8
    2147500519U,	// UHSUBv16i8
    2147507503U,	// UHSUBv2i32
    2147504293U,	// UHSUBv4i16
    2147509274U,	// UHSUBv4i32
    2147505580U,	// UHSUBv8i16
    2147501434U,	// UHSUBv8i8
    2214631915U,	// UMADDLrrr
    2147500969U,	// UMAXPv16i8
    2147508266U,	// UMAXPv2i32
    2147504830U,	// UMAXPv4i16
    2147510151U,	// UMAXPv4i32
    2147506163U,	// UMAXPv8i16
    2147501926U,	// UMAXPv8i8
    33972U,	// UMAXVv16i8v
    37766U,	// UMAXVv4i16v
    43315U,	// UMAXVv4i32v
    39099U,	// UMAXVv8i16v
    34903U,	// UMAXVv8i8v
    2147501257U,	// UMAXv16i8
    2147508607U,	// UMAXv2i32
    2147505049U,	// UMAXv4i16
    2147510647U,	// UMAXv4i32
    2147506422U,	// UMAXv8i16
    2147502186U,	// UMAXv8i8
    2147500938U,	// UMINPv16i8
    2147508217U,	// UMINPv2i32
    2147504802U,	// UMINPv4i16
    2147510102U,	// UMINPv4i32
    2147506135U,	// UMINPv8i16
    2147501898U,	// UMINPv8i8
    33950U,	// UMINVv16i8v
    37746U,	// UMINVv4i16v
    43276U,	// UMINVv4i32v
    39079U,	// UMINVv8i16v
    34883U,	// UMINVv8i8v
    2147500898U,	// UMINv16i8
    2147507997U,	// UMINv2i32
    2147504628U,	// UMINv4i16
    2147509974U,	// UMINv4i32
    2147506063U,	// UMINv8i16
    2147501760U,	// UMINv8i8
    2281755632U,	// UMLALv16i8_v8i16
    2281753621U,	// UMLALv2i32_indexed
    2281753621U,	// UMLALv2i32_v2i64
    2281760166U,	// UMLALv4i16_indexed
    2281760166U,	// UMLALv4i16_v4i32
    2281753075U,	// UMLALv4i32_indexed
    2281753075U,	// UMLALv4i32_v2i64
    2281759290U,	// UMLALv8i16_indexed
    2281759290U,	// UMLALv8i16_v4i32
    2281756322U,	// UMLALv8i8_v8i16
    2281755775U,	// UMLSLv16i8_v8i16
    2281753845U,	// UMLSLv2i32_indexed
    2281753845U,	// UMLSLv2i32_v2i64
    2281760390U,	// UMLSLv4i16_indexed
    2281760390U,	// UMLSLv4i16_v4i32
    2281753233U,	// UMLSLv4i32_indexed
    2281753233U,	// UMLSLv4i32_v2i64
    2281759448U,	// UMLSLv8i16_indexed
    2281759448U,	// UMLSLv8i16_v4i32
    2281756532U,	// UMLSLv8i8_v8i16
    2147520506U,	// UMOVvi16
    2147523711U,	// UMOVvi32
    2147518829U,	// UMOVvi64
    2147516566U,	// UMOVvi8
    2214631899U,	// UMSUBLrrr
    2214631722U,	// UMULHrr
    2147505257U,	// UMULLv16i8_v8i16
    2147503317U,	// UMULLv2i32_indexed
    2147503317U,	// UMULLv2i32_v2i64
    2147509862U,	// UMULLv4i16_indexed
    2147509862U,	// UMULLv4i16_v4i32
    2147502702U,	// UMULLv4i32_indexed
    2147502702U,	// UMULLv4i32_v2i64
    2147508917U,	// UMULLv8i16_indexed
    2147508917U,	// UMULLv8i16_v4i32
    2147506016U,	// UMULLv8i8_v8i16
    2147500663U,	// UQADDv16i8
    2214629200U,	// UQADDv1i16
    2214629200U,	// UQADDv1i32
    2214629200U,	// UQADDv1i64
    2214629200U,	// UQADDv1i8
    2147507631U,	// UQADDv2i32
    2147502936U,	// UQADDv2i64
    2147504403U,	// UQADDv4i16
    2147509412U,	// UQADDv4i32
    2147505690U,	// UQADDv8i16
    2147501544U,	// UQADDv8i8
    2147500815U,	// UQRSHLv16i8
    2214631952U,	// UQRSHLv1i16
    2214631952U,	// UQRSHLv1i32
    2214631952U,	// UQRSHLv1i64
    2214631952U,	// UQRSHLv1i8
    2147507866U,	// UQRSHLv2i32
    2147503226U,	// UQRSHLv2i64
    2147504540U,	// UQRSHLv4i16
    2147509771U,	// UQRSHLv4i32
    2147505927U,	// UQRSHLv8i16
    2147501663U,	// UQRSHLv8i8
    2214632121U,	// UQRSHRNb
    2214632121U,	// UQRSHRNh
    2214632121U,	// UQRSHRNs
    2281750801U,	// UQRSHRNv16i8_shift
    2147508040U,	// UQRSHRNv2i32_shift
    2147504671U,	// UQRSHRNv4i16_shift
    2281759520U,	// UQRSHRNv4i32_shift
    2281755847U,	// UQRSHRNv8i16_shift
    2147501803U,	// UQRSHRNv8i8_shift
    2214631937U,	// UQSHLb
    2214631937U,	// UQSHLd
    2214631937U,	// UQSHLh
    2214631937U,	// UQSHLs
    2147500792U,	// UQSHLv16i8
    2147500792U,	// UQSHLv16i8_shift
    2214631937U,	// UQSHLv1i16
    2214631937U,	// UQSHLv1i32
    2214631937U,	// UQSHLv1i64
    2214631937U,	// UQSHLv1i8
    2147507845U,	// UQSHLv2i32
    2147507845U,	// UQSHLv2i32_shift
    2147503205U,	// UQSHLv2i64
    2147503205U,	// UQSHLv2i64_shift
    2147504519U,	// UQSHLv4i16
    2147504519U,	// UQSHLv4i16_shift
    2147509750U,	// UQSHLv4i32
    2147509750U,	// UQSHLv4i32_shift
    2147505906U,	// UQSHLv8i16
    2147505906U,	// UQSHLv8i16_shift
    2147501642U,	// UQSHLv8i8
    2147501642U,	// UQSHLv8i8_shift
    2214632104U,	// UQSHRNb
    2214632104U,	// UQSHRNh
    2214632104U,	// UQSHRNs
    2281750774U,	// UQSHRNv16i8_shift
    2147508017U,	// UQSHRNv2i32_shift
    2147504648U,	// UQSHRNv4i16_shift
    2281759495U,	// UQSHRNv4i32_shift
    2281755822U,	// UQSHRNv8i16_shift
    2147501780U,	// UQSHRNv8i8_shift
    2147500541U,	// UQSUBv16i8
    2214627610U,	// UQSUBv1i16
    2214627610U,	// UQSUBv1i32
    2214627610U,	// UQSUBv1i64
    2214627610U,	// UQSUBv1i8
    2147507523U,	// UQSUBv2i32
    2147502896U,	// UQSUBv2i64
    2147504313U,	// UQSUBv4i16
    2147509294U,	// UQSUBv4i32
    2147505600U,	// UQSUBv8i16
    2147501454U,	// UQSUBv8i8
    134267189U,	// UQXTNv16i8
    67148509U,	// UQXTNv1i16
    67148509U,	// UQXTNv1i32
    67148509U,	// UQXTNv1i8
    24425U,	// UQXTNv2i32
    21045U,	// UQXTNv4i16
    134275905U,	// UQXTNv4i32
    134272232U,	// UQXTNv8i16
    18185U,	// UQXTNv8i8
    24034U,	// URECPEv2i32
    25815U,	// URECPEv4i32
    2147500616U,	// URHADDv16i8
    2147507588U,	// URHADDv2i32
    2147504360U,	// URHADDv4i16
    2147509369U,	// URHADDv4i32
    2147505647U,	// URHADDv8i16
    2147501501U,	// URHADDv8i8
    2147500838U,	// URSHLv16i8
    2214631967U,	// URSHLv1i64
    2147507887U,	// URSHLv2i32
    2147503247U,	// URSHLv2i64
    2147504561U,	// URSHLv4i16
    2147509792U,	// URSHLv4i32
    2147505948U,	// URSHLv8i16
    2147501684U,	// URSHLv8i8
    2214632359U,	// URSHRd
    2147501001U,	// URSHRv16i8_shift
    2147508296U,	// URSHRv2i32_shift
    2147503558U,	// URSHRv2i64_shift
    2147504859U,	// URSHRv4i16_shift
    2147510181U,	// URSHRv4i32_shift
    2147506192U,	// URSHRv8i16_shift
    2147501955U,	// URSHRv8i8_shift
    24057U,	// URSQRTEv2i32
    25838U,	// URSQRTEv4i32
    2416050284U,	// URSRAd
    2281750973U,	// URSRAv16i8_shift
    2281757941U,	// URSRAv2i32_shift
    2281753334U,	// URSRAv2i64_shift
    2281754751U,	// URSRAv4i16_shift
    2281759712U,	// URSRAv4i32_shift
    2281756038U,	// URSRAv8i16_shift
    2281751892U,	// URSRAv8i8_shift
    2147505224U,	// USHLLv16i8_shift
    2147503285U,	// USHLLv2i32_shift
    2147509830U,	// USHLLv4i16_shift
    2147502667U,	// USHLLv4i32_shift
    2147508882U,	// USHLLv8i16_shift
    2147505986U,	// USHLLv8i8_shift
    2147500859U,	// USHLv16i8
    2214631980U,	// USHLv1i64
    2147507906U,	// USHLv2i32
    2147503266U,	// USHLv2i64
    2147504580U,	// USHLv4i16
    2147509811U,	// USHLv4i32
    2147505967U,	// USHLv8i16
    2147501703U,	// USHLv8i8
    2214632372U,	// USHRd
    2147501022U,	// USHRv16i8_shift
    2147508315U,	// USHRv2i32_shift
    2147503577U,	// USHRv2i64_shift
    2147504878U,	// USHRv4i16_shift
    2147510200U,	// USHRv4i32_shift
    2147506211U,	// USHRv8i16_shift
    2147501974U,	// USHRv8i8_shift
    134267498U,	// USQADDv16i8
    268570439U,	// USQADDv1i16
    268570439U,	// USQADDv1i32
    268570439U,	// USQADDv1i64
    268570439U,	// USQADDv1i8
    134274467U,	// USQADDv2i32
    134269772U,	// USQADDv2i64
    134271239U,	// USQADDv4i16
    134276248U,	// USQADDv4i32
    134272526U,	// USQADDv8i16
    134268380U,	// USQADDv8i8
    2416050297U,	// USRAd
    2281750994U,	// USRAv16i8_shift
    2281757960U,	// USRAv2i32_shift
    2281753353U,	// USRAv2i64_shift
    2281754770U,	// USRAv4i16_shift
    2281759731U,	// USRAv4i32_shift
    2281756057U,	// USRAv8i16_shift
    2281751911U,	// USRAv8i8_shift
    2147505158U,	// USUBLv16i8_v8i16
    2147503145U,	// USUBLv2i32_v2i64
    2147509690U,	// USUBLv4i16_v4i32
    2147502601U,	// USUBLv4i32_v2i64
    2147508816U,	// USUBLv8i16_v4i32
    2147505846U,	// USUBLv8i8_v8i16
    2147505463U,	// USUBWv16i8_v8i16
    2147503845U,	// USUBWv2i32_v2i64
    2147510599U,	// USUBWv4i16_v4i32
    2147502786U,	// USUBWv4i32_v2i64
    2147509136U,	// USUBWv8i16_v4i32
    2147506383U,	// USUBWv8i8_v8i16
    2147500218U,	// UZP1v16i8
    2147507362U,	// UZP1v2i32
    2147502524U,	// UZP1v2i64
    2147504163U,	// UZP1v4i16
    2147508700U,	// UZP1v4i32
    2147505084U,	// UZP1v8i16
    2147501294U,	// UZP1v8i8
    2147500405U,	// UZP2v16i8
    2147507389U,	// UZP2v2i32
    2147502766U,	// UZP2v2i64
    2147504200U,	// UZP2v4i16
    2147509116U,	// UZP2v4i32
    2147505443U,	// UZP2v8i16
    2147501331U,	// UZP2v8i8
    134267179U,	// XTNv16i8
    24417U,	// XTNv2i32
    21037U,	// XTNv4i16
    134275896U,	// XTNv4i32
    134272223U,	// XTNv8i16
    18177U,	// XTNv8i8
    2147500208U,	// ZIP1v16i8
    2147507353U,	// ZIP1v2i32
    2147502515U,	// ZIP1v2i64
    2147504154U,	// ZIP1v4i16
    2147508691U,	// ZIP1v4i32
    2147505075U,	// ZIP1v8i16
    2147501285U,	// ZIP1v8i8
    2147500395U,	// ZIP2v16i8
    2147507380U,	// ZIP2v2i32
    2147502757U,	// ZIP2v2i64
    2147504191U,	// ZIP2v4i16
    2147509107U,	// ZIP2v4i32
    2147505434U,	// ZIP2v8i16
    2147501322U,	// ZIP2v8i8
    0U
  };

  static const uint32_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// ABSv16i8
    0U,	// ABSv1i64
    0U,	// ABSv2i32
    0U,	// ABSv2i64
    0U,	// ABSv4i16
    0U,	// ABSv4i32
    0U,	// ABSv8i16
    0U,	// ABSv8i8
    0U,	// ADCSWr
    0U,	// ADCSXr
    0U,	// ADCWr
    0U,	// ADCXr
    16U,	// ADDHNv2i64_v2i32
    32U,	// ADDHNv2i64_v4i32
    16U,	// ADDHNv4i32_v4i16
    32U,	// ADDHNv4i32_v8i16
    32U,	// ADDHNv8i16_v16i8
    16U,	// ADDHNv8i16_v8i8
    16U,	// ADDPv16i8
    16U,	// ADDPv2i32
    16U,	// ADDPv2i64
    0U,	// ADDPv2i64p
    16U,	// ADDPv4i16
    16U,	// ADDPv4i32
    16U,	// ADDPv8i16
    16U,	// ADDPv8i8
    48U,	// ADDSWri
    0U,	// ADDSWrr
    64U,	// ADDSWrs
    80U,	// ADDSWrx
    48U,	// ADDSXri
    0U,	// ADDSXrr
    64U,	// ADDSXrs
    80U,	// ADDSXrx
    256U,	// ADDSXrx64
    0U,	// ADDVv16i8v
    0U,	// ADDVv4i16v
    0U,	// ADDVv4i32v
    0U,	// ADDVv8i16v
    0U,	// ADDVv8i8v
    48U,	// ADDWri
    0U,	// ADDWrr
    64U,	// ADDWrs
    80U,	// ADDWrx
    48U,	// ADDXri
    0U,	// ADDXrr
    64U,	// ADDXrs
    80U,	// ADDXrx
    256U,	// ADDXrx64
    16U,	// ADDv16i8
    0U,	// ADDv1i64
    16U,	// ADDv2i32
    16U,	// ADDv2i64
    16U,	// ADDv4i16
    16U,	// ADDv4i32
    16U,	// ADDv8i16
    16U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADR
    0U,	// ADRP
    0U,	// AESDrr
    0U,	// AESErr
    0U,	// AESIMCrr
    0U,	// AESMCrr
    96U,	// ANDSWri
    0U,	// ANDSWrr
    64U,	// ANDSWrs
    112U,	// ANDSXri
    0U,	// ANDSXrr
    64U,	// ANDSXrs
    96U,	// ANDWri
    0U,	// ANDWrr
    64U,	// ANDWrs
    112U,	// ANDXri
    0U,	// ANDXrr
    64U,	// ANDXrs
    16U,	// ANDv16i8
    16U,	// ANDv8i8
    0U,	// ASRVWr
    0U,	// ASRVXr
    0U,	// B
    640U,	// BFMWri
    640U,	// BFMXri
    0U,	// BICSWrr
    64U,	// BICSWrs
    0U,	// BICSXrr
    64U,	// BICSXrs
    0U,	// BICWrr
    64U,	// BICWrs
    0U,	// BICXrr
    64U,	// BICXrs
    16U,	// BICv16i8
    0U,	// BICv2i32
    0U,	// BICv4i16
    0U,	// BICv4i32
    0U,	// BICv8i16
    16U,	// BICv8i8
    16U,	// BIFv16i8
    16U,	// BIFv8i8
    32U,	// BITv16i8
    32U,	// BITv8i8
    0U,	// BL
    0U,	// BLR
    0U,	// BR
    0U,	// BRK
    32U,	// BSLv16i8
    32U,	// BSLv8i8
    0U,	// Bcc
    0U,	// CBNZW
    0U,	// CBNZX
    0U,	// CBZW
    0U,	// CBZX
    4608U,	// CCMNWi
    4608U,	// CCMNWr
    4608U,	// CCMNXi
    4608U,	// CCMNXr
    4608U,	// CCMPWi
    4608U,	// CCMPWr
    4608U,	// CCMPXi
    4608U,	// CCMPXr
    0U,	// CLREX
    0U,	// CLSWr
    0U,	// CLSXr
    0U,	// CLSv16i8
    0U,	// CLSv2i32
    0U,	// CLSv4i16
    0U,	// CLSv4i32
    0U,	// CLSv8i16
    0U,	// CLSv8i8
    0U,	// CLZWr
    0U,	// CLZXr
    0U,	// CLZv16i8
    0U,	// CLZv2i32
    0U,	// CLZv4i16
    0U,	// CLZv4i32
    0U,	// CLZv8i16
    0U,	// CLZv8i8
    16U,	// CMEQv16i8
    1U,	// CMEQv16i8rz
    0U,	// CMEQv1i64
    1U,	// CMEQv1i64rz
    16U,	// CMEQv2i32
    1U,	// CMEQv2i32rz
    16U,	// CMEQv2i64
    1U,	// CMEQv2i64rz
    16U,	// CMEQv4i16
    1U,	// CMEQv4i16rz
    16U,	// CMEQv4i32
    1U,	// CMEQv4i32rz
    16U,	// CMEQv8i16
    1U,	// CMEQv8i16rz
    16U,	// CMEQv8i8
    1U,	// CMEQv8i8rz
    16U,	// CMGEv16i8
    1U,	// CMGEv16i8rz
    0U,	// CMGEv1i64
    1U,	// CMGEv1i64rz
    16U,	// CMGEv2i32
    1U,	// CMGEv2i32rz
    16U,	// CMGEv2i64
    1U,	// CMGEv2i64rz
    16U,	// CMGEv4i16
    1U,	// CMGEv4i16rz
    16U,	// CMGEv4i32
    1U,	// CMGEv4i32rz
    16U,	// CMGEv8i16
    1U,	// CMGEv8i16rz
    16U,	// CMGEv8i8
    1U,	// CMGEv8i8rz
    16U,	// CMGTv16i8
    1U,	// CMGTv16i8rz
    0U,	// CMGTv1i64
    1U,	// CMGTv1i64rz
    16U,	// CMGTv2i32
    1U,	// CMGTv2i32rz
    16U,	// CMGTv2i64
    1U,	// CMGTv2i64rz
    16U,	// CMGTv4i16
    1U,	// CMGTv4i16rz
    16U,	// CMGTv4i32
    1U,	// CMGTv4i32rz
    16U,	// CMGTv8i16
    1U,	// CMGTv8i16rz
    16U,	// CMGTv8i8
    1U,	// CMGTv8i8rz
    16U,	// CMHIv16i8
    0U,	// CMHIv1i64
    16U,	// CMHIv2i32
    16U,	// CMHIv2i64
    16U,	// CMHIv4i16
    16U,	// CMHIv4i32
    16U,	// CMHIv8i16
    16U,	// CMHIv8i8
    16U,	// CMHSv16i8
    0U,	// CMHSv1i64
    16U,	// CMHSv2i32
    16U,	// CMHSv2i64
    16U,	// CMHSv4i16
    16U,	// CMHSv4i32
    16U,	// CMHSv8i16
    16U,	// CMHSv8i8
    1U,	// CMLEv16i8rz
    1U,	// CMLEv1i64rz
    1U,	// CMLEv2i32rz
    1U,	// CMLEv2i64rz
    1U,	// CMLEv4i16rz
    1U,	// CMLEv4i32rz
    1U,	// CMLEv8i16rz
    1U,	// CMLEv8i8rz
    1U,	// CMLTv16i8rz
    1U,	// CMLTv1i64rz
    1U,	// CMLTv2i32rz
    1U,	// CMLTv2i64rz
    1U,	// CMLTv4i16rz
    1U,	// CMLTv4i32rz
    1U,	// CMLTv8i16rz
    1U,	// CMLTv8i8rz
    16U,	// CMTSTv16i8
    0U,	// CMTSTv1i64
    16U,	// CMTSTv2i32
    16U,	// CMTSTv2i64
    16U,	// CMTSTv4i16
    16U,	// CMTSTv4i32
    16U,	// CMTSTv8i16
    16U,	// CMTSTv8i8
    0U,	// CNTv16i8
    0U,	// CNTv8i8
    1U,	// CPYi16
    1U,	// CPYi32
    1U,	// CPYi64
    1U,	// CPYi8
    0U,	// CRC32Brr
    0U,	// CRC32CBrr
    0U,	// CRC32CHrr
    0U,	// CRC32CWrr
    0U,	// CRC32CXrr
    0U,	// CRC32Hrr
    0U,	// CRC32Wrr
    0U,	// CRC32Xrr
    4608U,	// CSELWr
    4608U,	// CSELXr
    4608U,	// CSINCWr
    4608U,	// CSINCXr
    4608U,	// CSINVWr
    4608U,	// CSINVXr
    4608U,	// CSNEGWr
    4608U,	// CSNEGXr
    0U,	// DCPS1
    0U,	// DCPS2
    0U,	// DCPS3
    0U,	// DMB
    0U,	// DRPS
    0U,	// DSB
    0U,	// DUPv16i8gpr
    1U,	// DUPv16i8lane
    0U,	// DUPv2i32gpr
    1U,	// DUPv2i32lane
    0U,	// DUPv2i64gpr
    1U,	// DUPv2i64lane
    0U,	// DUPv4i16gpr
    1U,	// DUPv4i16lane
    0U,	// DUPv4i32gpr
    1U,	// DUPv4i32lane
    0U,	// DUPv8i16gpr
    1U,	// DUPv8i16lane
    0U,	// DUPv8i8gpr
    1U,	// DUPv8i8lane
    0U,	// EONWrr
    64U,	// EONWrs
    0U,	// EONXrr
    64U,	// EONXrs
    96U,	// EORWri
    0U,	// EORWrr
    64U,	// EORWrs
    112U,	// EORXri
    0U,	// EORXrr
    64U,	// EORXrs
    16U,	// EORv16i8
    16U,	// EORv8i8
    0U,	// ERET
    8704U,	// EXTRWrri
    8704U,	// EXTRXrri
    8720U,	// EXTv16i8
    8720U,	// EXTv8i8
    0U,	// F128CSEL
    0U,	// FABD32
    0U,	// FABD64
    16U,	// FABDv2f32
    16U,	// FABDv2f64
    16U,	// FABDv4f32
    0U,	// FABSDr
    0U,	// FABSSr
    0U,	// FABSv2f32
    0U,	// FABSv2f64
    0U,	// FABSv4f32
    0U,	// FACGE32
    0U,	// FACGE64
    16U,	// FACGEv2f32
    16U,	// FACGEv2f64
    16U,	// FACGEv4f32
    0U,	// FACGT32
    0U,	// FACGT64
    16U,	// FACGTv2f32
    16U,	// FACGTv2f64
    16U,	// FACGTv4f32
    0U,	// FADDDrr
    16U,	// FADDPv2f32
    16U,	// FADDPv2f64
    0U,	// FADDPv2i32p
    0U,	// FADDPv2i64p
    16U,	// FADDPv4f32
    0U,	// FADDSrr
    16U,	// FADDv2f32
    16U,	// FADDv2f64
    16U,	// FADDv4f32
    4608U,	// FCCMPDrr
    4608U,	// FCCMPEDrr
    4608U,	// FCCMPESrr
    4608U,	// FCCMPSrr
    0U,	// FCMEQ32
    0U,	// FCMEQ64
    2U,	// FCMEQv1i32rz
    2U,	// FCMEQv1i64rz
    16U,	// FCMEQv2f32
    16U,	// FCMEQv2f64
    2U,	// FCMEQv2i32rz
    2U,	// FCMEQv2i64rz
    16U,	// FCMEQv4f32
    2U,	// FCMEQv4i32rz
    0U,	// FCMGE32
    0U,	// FCMGE64
    2U,	// FCMGEv1i32rz
    2U,	// FCMGEv1i64rz
    16U,	// FCMGEv2f32
    16U,	// FCMGEv2f64
    2U,	// FCMGEv2i32rz
    2U,	// FCMGEv2i64rz
    16U,	// FCMGEv4f32
    2U,	// FCMGEv4i32rz
    0U,	// FCMGT32
    0U,	// FCMGT64
    2U,	// FCMGTv1i32rz
    2U,	// FCMGTv1i64rz
    16U,	// FCMGTv2f32
    16U,	// FCMGTv2f64
    2U,	// FCMGTv2i32rz
    2U,	// FCMGTv2i64rz
    16U,	// FCMGTv4f32
    2U,	// FCMGTv4i32rz
    2U,	// FCMLEv1i32rz
    2U,	// FCMLEv1i64rz
    2U,	// FCMLEv2i32rz
    2U,	// FCMLEv2i64rz
    2U,	// FCMLEv4i32rz
    2U,	// FCMLTv1i32rz
    2U,	// FCMLTv1i64rz
    2U,	// FCMLTv2i32rz
    2U,	// FCMLTv2i64rz
    2U,	// FCMLTv4i32rz
    0U,	// FCMPDri
    0U,	// FCMPDrr
    0U,	// FCMPEDri
    0U,	// FCMPEDrr
    0U,	// FCMPESri
    0U,	// FCMPESrr
    0U,	// FCMPSri
    0U,	// FCMPSrr
    4608U,	// FCSELDrrr
    4608U,	// FCSELSrrr
    0U,	// FCVTASUWDr
    0U,	// FCVTASUWSr
    0U,	// FCVTASUXDr
    0U,	// FCVTASUXSr
    0U,	// FCVTASv1i32
    0U,	// FCVTASv1i64
    0U,	// FCVTASv2f32
    0U,	// FCVTASv2f64
    0U,	// FCVTASv4f32
    0U,	// FCVTAUUWDr
    0U,	// FCVTAUUWSr
    0U,	// FCVTAUUXDr
    0U,	// FCVTAUUXSr
    0U,	// FCVTAUv1i32
    0U,	// FCVTAUv1i64
    0U,	// FCVTAUv2f32
    0U,	// FCVTAUv2f64
    0U,	// FCVTAUv4f32
    0U,	// FCVTDHr
    0U,	// FCVTDSr
    0U,	// FCVTHDr
    0U,	// FCVTHSr
    0U,	// FCVTLv2i32
    2U,	// FCVTLv4i16
    0U,	// FCVTLv4i32
    3U,	// FCVTLv8i16
    0U,	// FCVTMSUWDr
    0U,	// FCVTMSUWSr
    0U,	// FCVTMSUXDr
    0U,	// FCVTMSUXSr
    0U,	// FCVTMSv1i32
    0U,	// FCVTMSv1i64
    0U,	// FCVTMSv2f32
    0U,	// FCVTMSv2f64
    0U,	// FCVTMSv4f32
    0U,	// FCVTMUUWDr
    0U,	// FCVTMUUWSr
    0U,	// FCVTMUUXDr
    0U,	// FCVTMUUXSr
    0U,	// FCVTMUv1i32
    0U,	// FCVTMUv1i64
    0U,	// FCVTMUv2f32
    0U,	// FCVTMUv2f64
    0U,	// FCVTMUv4f32
    0U,	// FCVTNSUWDr
    0U,	// FCVTNSUWSr
    0U,	// FCVTNSUXDr
    0U,	// FCVTNSUXSr
    0U,	// FCVTNSv1i32
    0U,	// FCVTNSv1i64
    0U,	// FCVTNSv2f32
    0U,	// FCVTNSv2f64
    0U,	// FCVTNSv4f32
    0U,	// FCVTNUUWDr
    0U,	// FCVTNUUWSr
    0U,	// FCVTNUUXDr
    0U,	// FCVTNUUXSr
    0U,	// FCVTNUv1i32
    0U,	// FCVTNUv1i64
    0U,	// FCVTNUv2f32
    0U,	// FCVTNUv2f64
    0U,	// FCVTNUv4f32
    0U,	// FCVTNv2i32
    0U,	// FCVTNv4i16
    3U,	// FCVTNv4i32
    0U,	// FCVTNv8i16
    0U,	// FCVTPSUWDr
    0U,	// FCVTPSUWSr
    0U,	// FCVTPSUXDr
    0U,	// FCVTPSUXSr
    0U,	// FCVTPSv1i32
    0U,	// FCVTPSv1i64
    0U,	// FCVTPSv2f32
    0U,	// FCVTPSv2f64
    0U,	// FCVTPSv4f32
    0U,	// FCVTPUUWDr
    0U,	// FCVTPUUWSr
    0U,	// FCVTPUUXDr
    0U,	// FCVTPUUXSr
    0U,	// FCVTPUv1i32
    0U,	// FCVTPUv1i64
    0U,	// FCVTPUv2f32
    0U,	// FCVTPUv2f64
    0U,	// FCVTPUv4f32
    0U,	// FCVTSDr
    0U,	// FCVTSHr
    0U,	// FCVTXNv1i64
    0U,	// FCVTXNv2f32
    3U,	// FCVTXNv4f32
    0U,	// FCVTZSSWDri
    0U,	// FCVTZSSWSri
    0U,	// FCVTZSSXDri
    0U,	// FCVTZSSXSri
    0U,	// FCVTZSUWDr
    0U,	// FCVTZSUWSr
    0U,	// FCVTZSUXDr
    0U,	// FCVTZSUXSr
    0U,	// FCVTZS_IntSWDri
    0U,	// FCVTZS_IntSWSri
    0U,	// FCVTZS_IntSXDri
    0U,	// FCVTZS_IntSXSri
    0U,	// FCVTZS_IntUWDr
    0U,	// FCVTZS_IntUWSr
    0U,	// FCVTZS_IntUXDr
    0U,	// FCVTZS_IntUXSr
    0U,	// FCVTZS_Intv2f32
    0U,	// FCVTZS_Intv2f64
    0U,	// FCVTZS_Intv4f32
    0U,	// FCVTZSd
    0U,	// FCVTZSs
    0U,	// FCVTZSv1i32
    0U,	// FCVTZSv1i64
    0U,	// FCVTZSv2f32
    0U,	// FCVTZSv2f64
    0U,	// FCVTZSv2i32_shift
    0U,	// FCVTZSv2i64_shift
    0U,	// FCVTZSv4f32
    0U,	// FCVTZSv4i32_shift
    0U,	// FCVTZUSWDri
    0U,	// FCVTZUSWSri
    0U,	// FCVTZUSXDri
    0U,	// FCVTZUSXSri
    0U,	// FCVTZUUWDr
    0U,	// FCVTZUUWSr
    0U,	// FCVTZUUXDr
    0U,	// FCVTZUUXSr
    0U,	// FCVTZU_IntSWDri
    0U,	// FCVTZU_IntSWSri
    0U,	// FCVTZU_IntSXDri
    0U,	// FCVTZU_IntSXSri
    0U,	// FCVTZU_IntUWDr
    0U,	// FCVTZU_IntUWSr
    0U,	// FCVTZU_IntUXDr
    0U,	// FCVTZU_IntUXSr
    0U,	// FCVTZU_Intv2f32
    0U,	// FCVTZU_Intv2f64
    0U,	// FCVTZU_Intv4f32
    0U,	// FCVTZUd
    0U,	// FCVTZUs
    0U,	// FCVTZUv1i32
    0U,	// FCVTZUv1i64
    0U,	// FCVTZUv2f32
    0U,	// FCVTZUv2f64
    0U,	// FCVTZUv2i32_shift
    0U,	// FCVTZUv2i64_shift
    0U,	// FCVTZUv4f32
    0U,	// FCVTZUv4i32_shift
    0U,	// FDIVDrr
    0U,	// FDIVSrr
    16U,	// FDIVv2f32
    16U,	// FDIVv2f64
    16U,	// FDIVv4f32
    8704U,	// FMADDDrrr
    8704U,	// FMADDSrrr
    0U,	// FMAXDrr
    0U,	// FMAXNMDrr
    16U,	// FMAXNMPv2f32
    16U,	// FMAXNMPv2f64
    0U,	// FMAXNMPv2i32p
    0U,	// FMAXNMPv2i64p
    16U,	// FMAXNMPv4f32
    0U,	// FMAXNMSrr
    0U,	// FMAXNMVv4i32v
    16U,	// FMAXNMv2f32
    16U,	// FMAXNMv2f64
    16U,	// FMAXNMv4f32
    16U,	// FMAXPv2f32
    16U,	// FMAXPv2f64
    0U,	// FMAXPv2i32p
    0U,	// FMAXPv2i64p
    16U,	// FMAXPv4f32
    0U,	// FMAXSrr
    0U,	// FMAXVv4i32v
    16U,	// FMAXv2f32
    16U,	// FMAXv2f64
    16U,	// FMAXv4f32
    0U,	// FMINDrr
    0U,	// FMINNMDrr
    16U,	// FMINNMPv2f32
    16U,	// FMINNMPv2f64
    0U,	// FMINNMPv2i32p
    0U,	// FMINNMPv2i64p
    16U,	// FMINNMPv4f32
    0U,	// FMINNMSrr
    0U,	// FMINNMVv4i32v
    16U,	// FMINNMv2f32
    16U,	// FMINNMv2f64
    16U,	// FMINNMv4f32
    16U,	// FMINPv2f32
    16U,	// FMINPv2f64
    0U,	// FMINPv2i32p
    0U,	// FMINPv2i64p
    16U,	// FMINPv4f32
    0U,	// FMINSrr
    0U,	// FMINVv4i32v
    16U,	// FMINv2f32
    16U,	// FMINv2f64
    16U,	// FMINv4f32
    800U,	// FMLAv1i32_indexed
    800U,	// FMLAv1i64_indexed
    32U,	// FMLAv2f32
    32U,	// FMLAv2f64
    800U,	// FMLAv2i32_indexed
    800U,	// FMLAv2i64_indexed
    32U,	// FMLAv4f32
    800U,	// FMLAv4i32_indexed
    800U,	// FMLSv1i32_indexed
    800U,	// FMLSv1i64_indexed
    32U,	// FMLSv2f32
    32U,	// FMLSv2f64
    800U,	// FMLSv2i32_indexed
    800U,	// FMLSv2i64_indexed
    32U,	// FMLSv4f32
    800U,	// FMLSv4i32_indexed
    1U,	// FMOVDXHighr
    0U,	// FMOVDXr
    0U,	// FMOVDi
    0U,	// FMOVDr
    0U,	// FMOVSWr
    0U,	// FMOVSi
    0U,	// FMOVSr
    0U,	// FMOVWSr
    0U,	// FMOVXDHighr
    0U,	// FMOVXDr
    0U,	// FMOVv2f32_ns
    0U,	// FMOVv2f64_ns
    0U,	// FMOVv4f32_ns
    8704U,	// FMSUBDrrr
    8704U,	// FMSUBSrrr
    0U,	// FMULDrr
    0U,	// FMULSrr
    0U,	// FMULX32
    0U,	// FMULX64
    1040U,	// FMULXv1i32_indexed
    1040U,	// FMULXv1i64_indexed
    16U,	// FMULXv2f32
    16U,	// FMULXv2f64
    1040U,	// FMULXv2i32_indexed
    1040U,	// FMULXv2i64_indexed
    16U,	// FMULXv4f32
    1040U,	// FMULXv4i32_indexed
    1040U,	// FMULv1i32_indexed
    1040U,	// FMULv1i64_indexed
    16U,	// FMULv2f32
    16U,	// FMULv2f64
    1040U,	// FMULv2i32_indexed
    1040U,	// FMULv2i64_indexed
    16U,	// FMULv4f32
    1040U,	// FMULv4i32_indexed
    0U,	// FNEGDr
    0U,	// FNEGSr
    0U,	// FNEGv2f32
    0U,	// FNEGv2f64
    0U,	// FNEGv4f32
    8704U,	// FNMADDDrrr
    8704U,	// FNMADDSrrr
    8704U,	// FNMSUBDrrr
    8704U,	// FNMSUBSrrr
    0U,	// FNMULDrr
    0U,	// FNMULSrr
    0U,	// FRECPEv1i32
    0U,	// FRECPEv1i64
    0U,	// FRECPEv2f32
    0U,	// FRECPEv2f64
    0U,	// FRECPEv4f32
    0U,	// FRECPS32
    0U,	// FRECPS64
    16U,	// FRECPSv2f32
    16U,	// FRECPSv2f64
    16U,	// FRECPSv4f32
    0U,	// FRECPXv1i32
    0U,	// FRECPXv1i64
    0U,	// FRINTADr
    0U,	// FRINTASr
    0U,	// FRINTAv2f32
    0U,	// FRINTAv2f64
    0U,	// FRINTAv4f32
    0U,	// FRINTIDr
    0U,	// FRINTISr
    0U,	// FRINTIv2f32
    0U,	// FRINTIv2f64
    0U,	// FRINTIv4f32
    0U,	// FRINTMDr
    0U,	// FRINTMSr
    0U,	// FRINTMv2f32
    0U,	// FRINTMv2f64
    0U,	// FRINTMv4f32
    0U,	// FRINTNDr
    0U,	// FRINTNSr
    0U,	// FRINTNv2f32
    0U,	// FRINTNv2f64
    0U,	// FRINTNv4f32
    0U,	// FRINTPDr
    0U,	// FRINTPSr
    0U,	// FRINTPv2f32
    0U,	// FRINTPv2f64
    0U,	// FRINTPv4f32
    0U,	// FRINTXDr
    0U,	// FRINTXSr
    0U,	// FRINTXv2f32
    0U,	// FRINTXv2f64
    0U,	// FRINTXv4f32
    0U,	// FRINTZDr
    0U,	// FRINTZSr
    0U,	// FRINTZv2f32
    0U,	// FRINTZv2f64
    0U,	// FRINTZv4f32
    0U,	// FRSQRTEv1i32
    0U,	// FRSQRTEv1i64
    0U,	// FRSQRTEv2f32
    0U,	// FRSQRTEv2f64
    0U,	// FRSQRTEv4f32
    0U,	// FRSQRTS32
    0U,	// FRSQRTS64
    16U,	// FRSQRTSv2f32
    16U,	// FRSQRTSv2f64
    16U,	// FRSQRTSv4f32
    0U,	// FSQRTDr
    0U,	// FSQRTSr
    0U,	// FSQRTv2f32
    0U,	// FSQRTv2f64
    0U,	// FSQRTv4f32
    0U,	// FSUBDrr
    0U,	// FSUBSrr
    16U,	// FSUBv2f32
    16U,	// FSUBv2f64
    16U,	// FSUBv4f32
    0U,	// HINT
    0U,	// HLT
    0U,	// HVC
    0U,	// INSvi16gpr
    0U,	// INSvi16lane
    0U,	// INSvi32gpr
    0U,	// INSvi32lane
    0U,	// INSvi64gpr
    0U,	// INSvi64lane
    0U,	// INSvi8gpr
    0U,	// INSvi8lane
    0U,	// ISB
    0U,	// LD1Fourv16b
    0U,	// LD1Fourv16b_POST
    0U,	// LD1Fourv1d
    0U,	// LD1Fourv1d_POST
    0U,	// LD1Fourv2d
    0U,	// LD1Fourv2d_POST
    0U,	// LD1Fourv2s
    0U,	// LD1Fourv2s_POST
    0U,	// LD1Fourv4h
    0U,	// LD1Fourv4h_POST
    0U,	// LD1Fourv4s
    0U,	// LD1Fourv4s_POST
    0U,	// LD1Fourv8b
    0U,	// LD1Fourv8b_POST
    0U,	// LD1Fourv8h
    0U,	// LD1Fourv8h_POST
    0U,	// LD1Onev16b
    0U,	// LD1Onev16b_POST
    0U,	// LD1Onev1d
    0U,	// LD1Onev1d_POST
    0U,	// LD1Onev2d
    0U,	// LD1Onev2d_POST
    0U,	// LD1Onev2s
    0U,	// LD1Onev2s_POST
    0U,	// LD1Onev4h
    0U,	// LD1Onev4h_POST
    0U,	// LD1Onev4s
    0U,	// LD1Onev4s_POST
    0U,	// LD1Onev8b
    0U,	// LD1Onev8b_POST
    0U,	// LD1Onev8h
    0U,	// LD1Onev8h_POST
    0U,	// LD1Rv16b
    0U,	// LD1Rv16b_POST
    0U,	// LD1Rv1d
    0U,	// LD1Rv1d_POST
    0U,	// LD1Rv2d
    0U,	// LD1Rv2d_POST
    0U,	// LD1Rv2s
    0U,	// LD1Rv2s_POST
    0U,	// LD1Rv4h
    0U,	// LD1Rv4h_POST
    0U,	// LD1Rv4s
    0U,	// LD1Rv4s_POST
    0U,	// LD1Rv8b
    0U,	// LD1Rv8b_POST
    0U,	// LD1Rv8h
    0U,	// LD1Rv8h_POST
    0U,	// LD1Threev16b
    0U,	// LD1Threev16b_POST
    0U,	// LD1Threev1d
    0U,	// LD1Threev1d_POST
    0U,	// LD1Threev2d
    0U,	// LD1Threev2d_POST
    0U,	// LD1Threev2s
    0U,	// LD1Threev2s_POST
    0U,	// LD1Threev4h
    0U,	// LD1Threev4h_POST
    0U,	// LD1Threev4s
    0U,	// LD1Threev4s_POST
    0U,	// LD1Threev8b
    0U,	// LD1Threev8b_POST
    0U,	// LD1Threev8h
    0U,	// LD1Threev8h_POST
    0U,	// LD1Twov16b
    0U,	// LD1Twov16b_POST
    0U,	// LD1Twov1d
    0U,	// LD1Twov1d_POST
    0U,	// LD1Twov2d
    0U,	// LD1Twov2d_POST
    0U,	// LD1Twov2s
    0U,	// LD1Twov2s_POST
    0U,	// LD1Twov4h
    0U,	// LD1Twov4h_POST
    0U,	// LD1Twov4s
    0U,	// LD1Twov4s_POST
    0U,	// LD1Twov8b
    0U,	// LD1Twov8b_POST
    0U,	// LD1Twov8h
    0U,	// LD1Twov8h_POST
    0U,	// LD1i16
    0U,	// LD1i16_POST
    0U,	// LD1i32
    0U,	// LD1i32_POST
    0U,	// LD1i64
    0U,	// LD1i64_POST
    0U,	// LD1i8
    0U,	// LD1i8_POST
    0U,	// LD2Rv16b
    0U,	// LD2Rv16b_POST
    0U,	// LD2Rv1d
    0U,	// LD2Rv1d_POST
    0U,	// LD2Rv2d
    0U,	// LD2Rv2d_POST
    0U,	// LD2Rv2s
    0U,	// LD2Rv2s_POST
    0U,	// LD2Rv4h
    0U,	// LD2Rv4h_POST
    0U,	// LD2Rv4s
    0U,	// LD2Rv4s_POST
    0U,	// LD2Rv8b
    0U,	// LD2Rv8b_POST
    0U,	// LD2Rv8h
    0U,	// LD2Rv8h_POST
    0U,	// LD2Twov16b
    0U,	// LD2Twov16b_POST
    0U,	// LD2Twov2d
    0U,	// LD2Twov2d_POST
    0U,	// LD2Twov2s
    0U,	// LD2Twov2s_POST
    0U,	// LD2Twov4h
    0U,	// LD2Twov4h_POST
    0U,	// LD2Twov4s
    0U,	// LD2Twov4s_POST
    0U,	// LD2Twov8b
    0U,	// LD2Twov8b_POST
    0U,	// LD2Twov8h
    0U,	// LD2Twov8h_POST
    0U,	// LD2i16
    0U,	// LD2i16_POST
    0U,	// LD2i32
    0U,	// LD2i32_POST
    0U,	// LD2i64
    0U,	// LD2i64_POST
    0U,	// LD2i8
    0U,	// LD2i8_POST
    0U,	// LD3Rv16b
    0U,	// LD3Rv16b_POST
    0U,	// LD3Rv1d
    0U,	// LD3Rv1d_POST
    0U,	// LD3Rv2d
    0U,	// LD3Rv2d_POST
    0U,	// LD3Rv2s
    0U,	// LD3Rv2s_POST
    0U,	// LD3Rv4h
    0U,	// LD3Rv4h_POST
    0U,	// LD3Rv4s
    0U,	// LD3Rv4s_POST
    0U,	// LD3Rv8b
    0U,	// LD3Rv8b_POST
    0U,	// LD3Rv8h
    0U,	// LD3Rv8h_POST
    0U,	// LD3Threev16b
    0U,	// LD3Threev16b_POST
    0U,	// LD3Threev2d
    0U,	// LD3Threev2d_POST
    0U,	// LD3Threev2s
    0U,	// LD3Threev2s_POST
    0U,	// LD3Threev4h
    0U,	// LD3Threev4h_POST
    0U,	// LD3Threev4s
    0U,	// LD3Threev4s_POST
    0U,	// LD3Threev8b
    0U,	// LD3Threev8b_POST
    0U,	// LD3Threev8h
    0U,	// LD3Threev8h_POST
    0U,	// LD3i16
    0U,	// LD3i16_POST
    0U,	// LD3i32
    0U,	// LD3i32_POST
    0U,	// LD3i64
    0U,	// LD3i64_POST
    0U,	// LD3i8
    0U,	// LD3i8_POST
    0U,	// LD4Fourv16b
    0U,	// LD4Fourv16b_POST
    0U,	// LD4Fourv2d
    0U,	// LD4Fourv2d_POST
    0U,	// LD4Fourv2s
    0U,	// LD4Fourv2s_POST
    0U,	// LD4Fourv4h
    0U,	// LD4Fourv4h_POST
    0U,	// LD4Fourv4s
    0U,	// LD4Fourv4s_POST
    0U,	// LD4Fourv8b
    0U,	// LD4Fourv8b_POST
    0U,	// LD4Fourv8h
    0U,	// LD4Fourv8h_POST
    0U,	// LD4Rv16b
    0U,	// LD4Rv16b_POST
    0U,	// LD4Rv1d
    0U,	// LD4Rv1d_POST
    0U,	// LD4Rv2d
    0U,	// LD4Rv2d_POST
    0U,	// LD4Rv2s
    0U,	// LD4Rv2s_POST
    0U,	// LD4Rv4h
    0U,	// LD4Rv4h_POST
    0U,	// LD4Rv4s
    0U,	// LD4Rv4s_POST
    0U,	// LD4Rv8b
    0U,	// LD4Rv8b_POST
    0U,	// LD4Rv8h
    0U,	// LD4Rv8h_POST
    0U,	// LD4i16
    0U,	// LD4i16_POST
    0U,	// LD4i32
    0U,	// LD4i32_POST
    0U,	// LD4i64
    0U,	// LD4i64_POST
    0U,	// LD4i8
    0U,	// LD4i8_POST
    4U,	// LDARB
    4U,	// LDARH
    4U,	// LDARW
    4U,	// LDARX
    1284U,	// LDAXPW
    1284U,	// LDAXPX
    4U,	// LDAXRB
    4U,	// LDAXRH
    4U,	// LDAXRW
    4U,	// LDAXRX
    12804U,	// LDNPDi
    16900U,	// LDNPQi
    20996U,	// LDNPSi
    20996U,	// LDNPWi
    12804U,	// LDNPXi
    12804U,	// LDPDi
    26244U,	// LDPDpost
    156292U,	// LDPDpre
    16900U,	// LDPQi
    30340U,	// LDPQpost
    160388U,	// LDPQpre
    20996U,	// LDPSWi
    34436U,	// LDPSWpost
    164484U,	// LDPSWpre
    20996U,	// LDPSi
    34436U,	// LDPSpost
    164484U,	// LDPSpre
    20996U,	// LDPWi
    34436U,	// LDPWpost
    164484U,	// LDPWpre
    12804U,	// LDPXi
    26244U,	// LDPXpost
    156292U,	// LDPXpre
    5U,	// LDRBBpost
    1920U,	// LDRBBpre
    37376U,	// LDRBBroW
    41472U,	// LDRBBroX
    144U,	// LDRBBui
    5U,	// LDRBpost
    1920U,	// LDRBpre
    37376U,	// LDRBroW
    41472U,	// LDRBroX
    144U,	// LDRBui
    0U,	// LDRDl
    5U,	// LDRDpost
    1920U,	// LDRDpre
    45568U,	// LDRDroW
    49664U,	// LDRDroX
    160U,	// LDRDui
    5U,	// LDRHHpost
    1920U,	// LDRHHpre
    53760U,	// LDRHHroW
    57856U,	// LDRHHroX
    176U,	// LDRHHui
    5U,	// LDRHpost
    1920U,	// LDRHpre
    53760U,	// LDRHroW
    57856U,	// LDRHroX
    176U,	// LDRHui
    0U,	// LDRQl
    5U,	// LDRQpost
    1920U,	// LDRQpre
    61952U,	// LDRQroW
    66048U,	// LDRQroX
    192U,	// LDRQui
    5U,	// LDRSBWpost
    1920U,	// LDRSBWpre
    37376U,	// LDRSBWroW
    41472U,	// LDRSBWroX
    144U,	// LDRSBWui
    5U,	// LDRSBXpost
    1920U,	// LDRSBXpre
    37376U,	// LDRSBXroW
    41472U,	// LDRSBXroX
    144U,	// LDRSBXui
    5U,	// LDRSHWpost
    1920U,	// LDRSHWpre
    53760U,	// LDRSHWroW
    57856U,	// LDRSHWroX
    176U,	// LDRSHWui
    5U,	// LDRSHXpost
    1920U,	// LDRSHXpre
    53760U,	// LDRSHXroW
    57856U,	// LDRSHXroX
    176U,	// LDRSHXui
    0U,	// LDRSWl
    5U,	// LDRSWpost
    1920U,	// LDRSWpre
    70144U,	// LDRSWroW
    74240U,	// LDRSWroX
    208U,	// LDRSWui
    0U,	// LDRSl
    5U,	// LDRSpost
    1920U,	// LDRSpre
    70144U,	// LDRSroW
    74240U,	// LDRSroX
    208U,	// LDRSui
    0U,	// LDRWl
    5U,	// LDRWpost
    1920U,	// LDRWpre
    70144U,	// LDRWroW
    74240U,	// LDRWroX
    208U,	// LDRWui
    0U,	// LDRXl
    5U,	// LDRXpost
    1920U,	// LDRXpre
    45568U,	// LDRXroW
    49664U,	// LDRXroX
    160U,	// LDRXui
    1280U,	// LDTRBi
    1280U,	// LDTRHi
    1280U,	// LDTRSBWi
    1280U,	// LDTRSBXi
    1280U,	// LDTRSHWi
    1280U,	// LDTRSHXi
    1280U,	// LDTRSWi
    1280U,	// LDTRWi
    1280U,	// LDTRXi
    1280U,	// LDURBBi
    1280U,	// LDURBi
    1280U,	// LDURDi
    1280U,	// LDURHHi
    1280U,	// LDURHi
    1280U,	// LDURQi
    1280U,	// LDURSBWi
    1280U,	// LDURSBXi
    1280U,	// LDURSHWi
    1280U,	// LDURSHXi
    1280U,	// LDURSWi
    1280U,	// LDURSi
    1280U,	// LDURWi
    1280U,	// LDURXi
    1284U,	// LDXPW
    1284U,	// LDXPX
    4U,	// LDXRB
    4U,	// LDXRH
    4U,	// LDXRW
    4U,	// LDXRX
    0U,	// LOADgot
    0U,	// LSLVWr
    0U,	// LSLVXr
    0U,	// LSRVWr
    0U,	// LSRVXr
    8704U,	// MADDWrrr
    8704U,	// MADDXrrr
    32U,	// MLAv16i8
    32U,	// MLAv2i32
    800U,	// MLAv2i32_indexed
    32U,	// MLAv4i16
    800U,	// MLAv4i16_indexed
    32U,	// MLAv4i32
    800U,	// MLAv4i32_indexed
    32U,	// MLAv8i16
    800U,	// MLAv8i16_indexed
    32U,	// MLAv8i8
    32U,	// MLSv16i8
    32U,	// MLSv2i32
    800U,	// MLSv2i32_indexed
    32U,	// MLSv4i16
    800U,	// MLSv4i16_indexed
    32U,	// MLSv4i32
    800U,	// MLSv4i32_indexed
    32U,	// MLSv8i16
    800U,	// MLSv8i16_indexed
    32U,	// MLSv8i8
    0U,	// MOVID
    0U,	// MOVIv16b_ns
    0U,	// MOVIv2d_ns
    5U,	// MOVIv2i32
    5U,	// MOVIv2s_msl
    5U,	// MOVIv4i16
    5U,	// MOVIv4i32
    5U,	// MOVIv4s_msl
    0U,	// MOVIv8b_ns
    5U,	// MOVIv8i16
    0U,	// MOVKWi
    0U,	// MOVKXi
    5U,	// MOVNWi
    5U,	// MOVNXi
    5U,	// MOVZWi
    5U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    0U,	// MRS
    0U,	// MSR
    0U,	// MSRpstate
    8704U,	// MSUBWrrr
    8704U,	// MSUBXrrr
    16U,	// MULv16i8
    16U,	// MULv2i32
    1040U,	// MULv2i32_indexed
    16U,	// MULv4i16
    1040U,	// MULv4i16_indexed
    16U,	// MULv4i32
    1040U,	// MULv4i32_indexed
    16U,	// MULv8i16
    1040U,	// MULv8i16_indexed
    16U,	// MULv8i8
    5U,	// MVNIv2i32
    5U,	// MVNIv2s_msl
    5U,	// MVNIv4i16
    5U,	// MVNIv4i32
    5U,	// MVNIv4s_msl
    5U,	// MVNIv8i16
    0U,	// NEGv16i8
    0U,	// NEGv1i64
    0U,	// NEGv2i32
    0U,	// NEGv2i64
    0U,	// NEGv4i16
    0U,	// NEGv4i32
    0U,	// NEGv8i16
    0U,	// NEGv8i8
    0U,	// NOTv16i8
    0U,	// NOTv8i8
    0U,	// ORNWrr
    64U,	// ORNWrs
    0U,	// ORNXrr
    64U,	// ORNXrs
    16U,	// ORNv16i8
    16U,	// ORNv8i8
    96U,	// ORRWri
    0U,	// ORRWrr
    64U,	// ORRWrs
    112U,	// ORRXri
    0U,	// ORRXrr
    64U,	// ORRXrs
    16U,	// ORRv16i8
    0U,	// ORRv2i32
    0U,	// ORRv4i16
    0U,	// ORRv4i32
    0U,	// ORRv8i16
    16U,	// ORRv8i8
    16U,	// PMULLv16i8
    16U,	// PMULLv1i64
    16U,	// PMULLv2i64
    16U,	// PMULLv8i8
    16U,	// PMULv16i8
    16U,	// PMULv8i8
    0U,	// PRFMl
    45568U,	// PRFMroW
    49664U,	// PRFMroX
    160U,	// PRFMui
    1280U,	// PRFUMi
    16U,	// RADDHNv2i64_v2i32
    32U,	// RADDHNv2i64_v4i32
    16U,	// RADDHNv4i32_v4i16
    32U,	// RADDHNv4i32_v8i16
    32U,	// RADDHNv8i16_v16i8
    16U,	// RADDHNv8i16_v8i8
    0U,	// RBITWr
    0U,	// RBITXr
    0U,	// RBITv16i8
    0U,	// RBITv8i8
    0U,	// RET
    0U,	// RET_ReallyLR
    0U,	// REV16Wr
    0U,	// REV16Xr
    0U,	// REV16v16i8
    0U,	// REV16v8i8
    0U,	// REV32Xr
    0U,	// REV32v16i8
    0U,	// REV32v4i16
    0U,	// REV32v8i16
    0U,	// REV32v8i8
    0U,	// REV64v16i8
    0U,	// REV64v2i32
    0U,	// REV64v4i16
    0U,	// REV64v4i32
    0U,	// REV64v8i16
    0U,	// REV64v8i8
    0U,	// REVWr
    0U,	// REVXr
    0U,	// RORVWr
    0U,	// RORVXr
    128U,	// RSHRNv16i8_shift
    0U,	// RSHRNv2i32_shift
    0U,	// RSHRNv4i16_shift
    128U,	// RSHRNv4i32_shift
    128U,	// RSHRNv8i16_shift
    0U,	// RSHRNv8i8_shift
    16U,	// RSUBHNv2i64_v2i32
    32U,	// RSUBHNv2i64_v4i32
    16U,	// RSUBHNv4i32_v4i16
    32U,	// RSUBHNv4i32_v8i16
    32U,	// RSUBHNv8i16_v16i8
    16U,	// RSUBHNv8i16_v8i8
    32U,	// SABALv16i8_v8i16
    32U,	// SABALv2i32_v2i64
    32U,	// SABALv4i16_v4i32
    32U,	// SABALv4i32_v2i64
    32U,	// SABALv8i16_v4i32
    32U,	// SABALv8i8_v8i16
    32U,	// SABAv16i8
    32U,	// SABAv2i32
    32U,	// SABAv4i16
    32U,	// SABAv4i32
    32U,	// SABAv8i16
    32U,	// SABAv8i8
    16U,	// SABDLv16i8_v8i16
    16U,	// SABDLv2i32_v2i64
    16U,	// SABDLv4i16_v4i32
    16U,	// SABDLv4i32_v2i64
    16U,	// SABDLv8i16_v4i32
    16U,	// SABDLv8i8_v8i16
    16U,	// SABDv16i8
    16U,	// SABDv2i32
    16U,	// SABDv4i16
    16U,	// SABDv4i32
    16U,	// SABDv8i16
    16U,	// SABDv8i8
    0U,	// SADALPv16i8_v8i16
    0U,	// SADALPv2i32_v1i64
    0U,	// SADALPv4i16_v2i32
    0U,	// SADALPv4i32_v2i64
    0U,	// SADALPv8i16_v4i32
    0U,	// SADALPv8i8_v4i16
    0U,	// SADDLPv16i8_v8i16
    0U,	// SADDLPv2i32_v1i64
    0U,	// SADDLPv4i16_v2i32
    0U,	// SADDLPv4i32_v2i64
    0U,	// SADDLPv8i16_v4i32
    0U,	// SADDLPv8i8_v4i16
    0U,	// SADDLVv16i8v
    0U,	// SADDLVv4i16v
    0U,	// SADDLVv4i32v
    0U,	// SADDLVv8i16v
    0U,	// SADDLVv8i8v
    16U,	// SADDLv16i8_v8i16
    16U,	// SADDLv2i32_v2i64
    16U,	// SADDLv4i16_v4i32
    16U,	// SADDLv4i32_v2i64
    16U,	// SADDLv8i16_v4i32
    16U,	// SADDLv8i8_v8i16
    16U,	// SADDWv16i8_v8i16
    16U,	// SADDWv2i32_v2i64
    16U,	// SADDWv4i16_v4i32
    16U,	// SADDWv4i32_v2i64
    16U,	// SADDWv8i16_v4i32
    16U,	// SADDWv8i8_v8i16
    0U,	// SBCSWr
    0U,	// SBCSXr
    0U,	// SBCWr
    0U,	// SBCXr
    8704U,	// SBFMWri
    8704U,	// SBFMXri
    0U,	// SCVTFSWDri
    0U,	// SCVTFSWSri
    0U,	// SCVTFSXDri
    0U,	// SCVTFSXSri
    0U,	// SCVTFUWDri
    0U,	// SCVTFUWSri
    0U,	// SCVTFUXDri
    0U,	// SCVTFUXSri
    0U,	// SCVTFd
    0U,	// SCVTFs
    0U,	// SCVTFv1i32
    0U,	// SCVTFv1i64
    0U,	// SCVTFv2f32
    0U,	// SCVTFv2f64
    0U,	// SCVTFv2i32_shift
    0U,	// SCVTFv2i64_shift
    0U,	// SCVTFv4f32
    0U,	// SCVTFv4i32_shift
    0U,	// SDIVWr
    0U,	// SDIVXr
    0U,	// SDIV_IntWr
    0U,	// SDIV_IntXr
    32U,	// SHA1Crrr
    0U,	// SHA1Hrr
    32U,	// SHA1Mrrr
    32U,	// SHA1Prrr
    32U,	// SHA1SU0rrr
    0U,	// SHA1SU1rr
    32U,	// SHA256H2rrr
    32U,	// SHA256Hrrr
    0U,	// SHA256SU0rr
    32U,	// SHA256SU1rrr
    16U,	// SHADDv16i8
    16U,	// SHADDv2i32
    16U,	// SHADDv4i16
    16U,	// SHADDv4i32
    16U,	// SHADDv8i16
    16U,	// SHADDv8i8
    6U,	// SHLLv16i8
    6U,	// SHLLv2i32
    7U,	// SHLLv4i16
    6U,	// SHLLv4i32
    7U,	// SHLLv8i16
    6U,	// SHLLv8i8
    0U,	// SHLd
    0U,	// SHLv16i8_shift
    0U,	// SHLv2i32_shift
    0U,	// SHLv2i64_shift
    0U,	// SHLv4i16_shift
    0U,	// SHLv4i32_shift
    0U,	// SHLv8i16_shift
    0U,	// SHLv8i8_shift
    128U,	// SHRNv16i8_shift
    0U,	// SHRNv2i32_shift
    0U,	// SHRNv4i16_shift
    128U,	// SHRNv4i32_shift
    128U,	// SHRNv8i16_shift
    0U,	// SHRNv8i8_shift
    16U,	// SHSUBv16i8
    16U,	// SHSUBv2i32
    16U,	// SHSUBv4i16
    16U,	// SHSUBv4i32
    16U,	// SHSUBv8i16
    16U,	// SHSUBv8i8
    128U,	// SLId
    128U,	// SLIv16i8_shift
    128U,	// SLIv2i32_shift
    128U,	// SLIv2i64_shift
    128U,	// SLIv4i16_shift
    128U,	// SLIv4i32_shift
    128U,	// SLIv8i16_shift
    128U,	// SLIv8i8_shift
    8704U,	// SMADDLrrr
    16U,	// SMAXPv16i8
    16U,	// SMAXPv2i32
    16U,	// SMAXPv4i16
    16U,	// SMAXPv4i32
    16U,	// SMAXPv8i16
    16U,	// SMAXPv8i8
    0U,	// SMAXVv16i8v
    0U,	// SMAXVv4i16v
    0U,	// SMAXVv4i32v
    0U,	// SMAXVv8i16v
    0U,	// SMAXVv8i8v
    16U,	// SMAXv16i8
    16U,	// SMAXv2i32
    16U,	// SMAXv4i16
    16U,	// SMAXv4i32
    16U,	// SMAXv8i16
    16U,	// SMAXv8i8
    0U,	// SMC
    16U,	// SMINPv16i8
    16U,	// SMINPv2i32
    16U,	// SMINPv4i16
    16U,	// SMINPv4i32
    16U,	// SMINPv8i16
    16U,	// SMINPv8i8
    0U,	// SMINVv16i8v
    0U,	// SMINVv4i16v
    0U,	// SMINVv4i32v
    0U,	// SMINVv8i16v
    0U,	// SMINVv8i8v
    16U,	// SMINv16i8
    16U,	// SMINv2i32
    16U,	// SMINv4i16
    16U,	// SMINv4i32
    16U,	// SMINv8i16
    16U,	// SMINv8i8
    32U,	// SMLALv16i8_v8i16
    800U,	// SMLALv2i32_indexed
    32U,	// SMLALv2i32_v2i64
    800U,	// SMLALv4i16_indexed
    32U,	// SMLALv4i16_v4i32
    800U,	// SMLALv4i32_indexed
    32U,	// SMLALv4i32_v2i64
    800U,	// SMLALv8i16_indexed
    32U,	// SMLALv8i16_v4i32
    32U,	// SMLALv8i8_v8i16
    32U,	// SMLSLv16i8_v8i16
    800U,	// SMLSLv2i32_indexed
    32U,	// SMLSLv2i32_v2i64
    800U,	// SMLSLv4i16_indexed
    32U,	// SMLSLv4i16_v4i32
    800U,	// SMLSLv4i32_indexed
    32U,	// SMLSLv4i32_v2i64
    800U,	// SMLSLv8i16_indexed
    32U,	// SMLSLv8i16_v4i32
    32U,	// SMLSLv8i8_v8i16
    1U,	// SMOVvi16to32
    1U,	// SMOVvi16to64
    1U,	// SMOVvi32to64
    1U,	// SMOVvi8to32
    1U,	// SMOVvi8to64
    8704U,	// SMSUBLrrr
    0U,	// SMULHrr
    16U,	// SMULLv16i8_v8i16
    1040U,	// SMULLv2i32_indexed
    16U,	// SMULLv2i32_v2i64
    1040U,	// SMULLv4i16_indexed
    16U,	// SMULLv4i16_v4i32
    1040U,	// SMULLv4i32_indexed
    16U,	// SMULLv4i32_v2i64
    1040U,	// SMULLv8i16_indexed
    16U,	// SMULLv8i16_v4i32
    16U,	// SMULLv8i8_v8i16
    0U,	// SQABSv16i8
    0U,	// SQABSv1i16
    0U,	// SQABSv1i32
    0U,	// SQABSv1i64
    0U,	// SQABSv1i8
    0U,	// SQABSv2i32
    0U,	// SQABSv2i64
    0U,	// SQABSv4i16
    0U,	// SQABSv4i32
    0U,	// SQABSv8i16
    0U,	// SQABSv8i8
    16U,	// SQADDv16i8
    0U,	// SQADDv1i16
    0U,	// SQADDv1i32
    0U,	// SQADDv1i64
    0U,	// SQADDv1i8
    16U,	// SQADDv2i32
    16U,	// SQADDv2i64
    16U,	// SQADDv4i16
    16U,	// SQADDv4i32
    16U,	// SQADDv8i16
    16U,	// SQADDv8i8
    128U,	// SQDMLALi16
    128U,	// SQDMLALi32
    800U,	// SQDMLALv1i32_indexed
    800U,	// SQDMLALv1i64_indexed
    800U,	// SQDMLALv2i32_indexed
    32U,	// SQDMLALv2i32_v2i64
    800U,	// SQDMLALv4i16_indexed
    32U,	// SQDMLALv4i16_v4i32
    800U,	// SQDMLALv4i32_indexed
    32U,	// SQDMLALv4i32_v2i64
    800U,	// SQDMLALv8i16_indexed
    32U,	// SQDMLALv8i16_v4i32
    128U,	// SQDMLSLi16
    128U,	// SQDMLSLi32
    800U,	// SQDMLSLv1i32_indexed
    800U,	// SQDMLSLv1i64_indexed
    800U,	// SQDMLSLv2i32_indexed
    32U,	// SQDMLSLv2i32_v2i64
    800U,	// SQDMLSLv4i16_indexed
    32U,	// SQDMLSLv4i16_v4i32
    800U,	// SQDMLSLv4i32_indexed
    32U,	// SQDMLSLv4i32_v2i64
    800U,	// SQDMLSLv8i16_indexed
    32U,	// SQDMLSLv8i16_v4i32
    0U,	// SQDMULHv1i16
    1040U,	// SQDMULHv1i16_indexed
    0U,	// SQDMULHv1i32
    1040U,	// SQDMULHv1i32_indexed
    16U,	// SQDMULHv2i32
    1040U,	// SQDMULHv2i32_indexed
    16U,	// SQDMULHv4i16
    1040U,	// SQDMULHv4i16_indexed
    16U,	// SQDMULHv4i32
    1040U,	// SQDMULHv4i32_indexed
    16U,	// SQDMULHv8i16
    1040U,	// SQDMULHv8i16_indexed
    0U,	// SQDMULLi16
    0U,	// SQDMULLi32
    1040U,	// SQDMULLv1i32_indexed
    1040U,	// SQDMULLv1i64_indexed
    1040U,	// SQDMULLv2i32_indexed
    16U,	// SQDMULLv2i32_v2i64
    1040U,	// SQDMULLv4i16_indexed
    16U,	// SQDMULLv4i16_v4i32
    1040U,	// SQDMULLv4i32_indexed
    16U,	// SQDMULLv4i32_v2i64
    1040U,	// SQDMULLv8i16_indexed
    16U,	// SQDMULLv8i16_v4i32
    0U,	// SQNEGv16i8
    0U,	// SQNEGv1i16
    0U,	// SQNEGv1i32
    0U,	// SQNEGv1i64
    0U,	// SQNEGv1i8
    0U,	// SQNEGv2i32
    0U,	// SQNEGv2i64
    0U,	// SQNEGv4i16
    0U,	// SQNEGv4i32
    0U,	// SQNEGv8i16
    0U,	// SQNEGv8i8
    0U,	// SQRDMULHv1i16
    1040U,	// SQRDMULHv1i16_indexed
    0U,	// SQRDMULHv1i32
    1040U,	// SQRDMULHv1i32_indexed
    16U,	// SQRDMULHv2i32
    1040U,	// SQRDMULHv2i32_indexed
    16U,	// SQRDMULHv4i16
    1040U,	// SQRDMULHv4i16_indexed
    16U,	// SQRDMULHv4i32
    1040U,	// SQRDMULHv4i32_indexed
    16U,	// SQRDMULHv8i16
    1040U,	// SQRDMULHv8i16_indexed
    16U,	// SQRSHLv16i8
    0U,	// SQRSHLv1i16
    0U,	// SQRSHLv1i32
    0U,	// SQRSHLv1i64
    0U,	// SQRSHLv1i8
    16U,	// SQRSHLv2i32
    16U,	// SQRSHLv2i64
    16U,	// SQRSHLv4i16
    16U,	// SQRSHLv4i32
    16U,	// SQRSHLv8i16
    16U,	// SQRSHLv8i8
    0U,	// SQRSHRNb
    0U,	// SQRSHRNh
    0U,	// SQRSHRNs
    128U,	// SQRSHRNv16i8_shift
    0U,	// SQRSHRNv2i32_shift
    0U,	// SQRSHRNv4i16_shift
    128U,	// SQRSHRNv4i32_shift
    128U,	// SQRSHRNv8i16_shift
    0U,	// SQRSHRNv8i8_shift
    0U,	// SQRSHRUNb
    0U,	// SQRSHRUNh
    0U,	// SQRSHRUNs
    128U,	// SQRSHRUNv16i8_shift
    0U,	// SQRSHRUNv2i32_shift
    0U,	// SQRSHRUNv4i16_shift
    128U,	// SQRSHRUNv4i32_shift
    128U,	// SQRSHRUNv8i16_shift
    0U,	// SQRSHRUNv8i8_shift
    0U,	// SQSHLUb
    0U,	// SQSHLUd
    0U,	// SQSHLUh
    0U,	// SQSHLUs
    0U,	// SQSHLUv16i8_shift
    0U,	// SQSHLUv2i32_shift
    0U,	// SQSHLUv2i64_shift
    0U,	// SQSHLUv4i16_shift
    0U,	// SQSHLUv4i32_shift
    0U,	// SQSHLUv8i16_shift
    0U,	// SQSHLUv8i8_shift
    0U,	// SQSHLb
    0U,	// SQSHLd
    0U,	// SQSHLh
    0U,	// SQSHLs
    16U,	// SQSHLv16i8
    0U,	// SQSHLv16i8_shift
    0U,	// SQSHLv1i16
    0U,	// SQSHLv1i32
    0U,	// SQSHLv1i64
    0U,	// SQSHLv1i8
    16U,	// SQSHLv2i32
    0U,	// SQSHLv2i32_shift
    16U,	// SQSHLv2i64
    0U,	// SQSHLv2i64_shift
    16U,	// SQSHLv4i16
    0U,	// SQSHLv4i16_shift
    16U,	// SQSHLv4i32
    0U,	// SQSHLv4i32_shift
    16U,	// SQSHLv8i16
    0U,	// SQSHLv8i16_shift
    16U,	// SQSHLv8i8
    0U,	// SQSHLv8i8_shift
    0U,	// SQSHRNb
    0U,	// SQSHRNh
    0U,	// SQSHRNs
    128U,	// SQSHRNv16i8_shift
    0U,	// SQSHRNv2i32_shift
    0U,	// SQSHRNv4i16_shift
    128U,	// SQSHRNv4i32_shift
    128U,	// SQSHRNv8i16_shift
    0U,	// SQSHRNv8i8_shift
    0U,	// SQSHRUNb
    0U,	// SQSHRUNh
    0U,	// SQSHRUNs
    128U,	// SQSHRUNv16i8_shift
    0U,	// SQSHRUNv2i32_shift
    0U,	// SQSHRUNv4i16_shift
    128U,	// SQSHRUNv4i32_shift
    128U,	// SQSHRUNv8i16_shift
    0U,	// SQSHRUNv8i8_shift
    16U,	// SQSUBv16i8
    0U,	// SQSUBv1i16
    0U,	// SQSUBv1i32
    0U,	// SQSUBv1i64
    0U,	// SQSUBv1i8
    16U,	// SQSUBv2i32
    16U,	// SQSUBv2i64
    16U,	// SQSUBv4i16
    16U,	// SQSUBv4i32
    16U,	// SQSUBv8i16
    16U,	// SQSUBv8i8
    0U,	// SQXTNv16i8
    0U,	// SQXTNv1i16
    0U,	// SQXTNv1i32
    0U,	// SQXTNv1i8
    0U,	// SQXTNv2i32
    0U,	// SQXTNv4i16
    0U,	// SQXTNv4i32
    0U,	// SQXTNv8i16
    0U,	// SQXTNv8i8
    0U,	// SQXTUNv16i8
    0U,	// SQXTUNv1i16
    0U,	// SQXTUNv1i32
    0U,	// SQXTUNv1i8
    0U,	// SQXTUNv2i32
    0U,	// SQXTUNv4i16
    0U,	// SQXTUNv4i32
    0U,	// SQXTUNv8i16
    0U,	// SQXTUNv8i8
    16U,	// SRHADDv16i8
    16U,	// SRHADDv2i32
    16U,	// SRHADDv4i16
    16U,	// SRHADDv4i32
    16U,	// SRHADDv8i16
    16U,	// SRHADDv8i8
    128U,	// SRId
    128U,	// SRIv16i8_shift
    128U,	// SRIv2i32_shift
    128U,	// SRIv2i64_shift
    128U,	// SRIv4i16_shift
    128U,	// SRIv4i32_shift
    128U,	// SRIv8i16_shift
    128U,	// SRIv8i8_shift
    16U,	// SRSHLv16i8
    0U,	// SRSHLv1i64
    16U,	// SRSHLv2i32
    16U,	// SRSHLv2i64
    16U,	// SRSHLv4i16
    16U,	// SRSHLv4i32
    16U,	// SRSHLv8i16
    16U,	// SRSHLv8i8
    0U,	// SRSHRd
    0U,	// SRSHRv16i8_shift
    0U,	// SRSHRv2i32_shift
    0U,	// SRSHRv2i64_shift
    0U,	// SRSHRv4i16_shift
    0U,	// SRSHRv4i32_shift
    0U,	// SRSHRv8i16_shift
    0U,	// SRSHRv8i8_shift
    128U,	// SRSRAd
    128U,	// SRSRAv16i8_shift
    128U,	// SRSRAv2i32_shift
    128U,	// SRSRAv2i64_shift
    128U,	// SRSRAv4i16_shift
    128U,	// SRSRAv4i32_shift
    128U,	// SRSRAv8i16_shift
    128U,	// SRSRAv8i8_shift
    0U,	// SSHLLv16i8_shift
    0U,	// SSHLLv2i32_shift
    0U,	// SSHLLv4i16_shift
    0U,	// SSHLLv4i32_shift
    0U,	// SSHLLv8i16_shift
    0U,	// SSHLLv8i8_shift
    16U,	// SSHLv16i8
    0U,	// SSHLv1i64
    16U,	// SSHLv2i32
    16U,	// SSHLv2i64
    16U,	// SSHLv4i16
    16U,	// SSHLv4i32
    16U,	// SSHLv8i16
    16U,	// SSHLv8i8
    0U,	// SSHRd
    0U,	// SSHRv16i8_shift
    0U,	// SSHRv2i32_shift
    0U,	// SSHRv2i64_shift
    0U,	// SSHRv4i16_shift
    0U,	// SSHRv4i32_shift
    0U,	// SSHRv8i16_shift
    0U,	// SSHRv8i8_shift
    128U,	// SSRAd
    128U,	// SSRAv16i8_shift
    128U,	// SSRAv2i32_shift
    128U,	// SSRAv2i64_shift
    128U,	// SSRAv4i16_shift
    128U,	// SSRAv4i32_shift
    128U,	// SSRAv8i16_shift
    128U,	// SSRAv8i8_shift
    16U,	// SSUBLv16i8_v8i16
    16U,	// SSUBLv2i32_v2i64
    16U,	// SSUBLv4i16_v4i32
    16U,	// SSUBLv4i32_v2i64
    16U,	// SSUBLv8i16_v4i32
    16U,	// SSUBLv8i8_v8i16
    16U,	// SSUBWv16i8_v8i16
    16U,	// SSUBWv2i32_v2i64
    16U,	// SSUBWv4i16_v4i32
    16U,	// SSUBWv4i32_v2i64
    16U,	// SSUBWv8i16_v4i32
    16U,	// SSUBWv8i8_v8i16
    0U,	// ST1Fourv16b
    0U,	// ST1Fourv16b_POST
    0U,	// ST1Fourv1d
    0U,	// ST1Fourv1d_POST
    0U,	// ST1Fourv2d
    0U,	// ST1Fourv2d_POST
    0U,	// ST1Fourv2s
    0U,	// ST1Fourv2s_POST
    0U,	// ST1Fourv4h
    0U,	// ST1Fourv4h_POST
    0U,	// ST1Fourv4s
    0U,	// ST1Fourv4s_POST
    0U,	// ST1Fourv8b
    0U,	// ST1Fourv8b_POST
    0U,	// ST1Fourv8h
    0U,	// ST1Fourv8h_POST
    0U,	// ST1Onev16b
    0U,	// ST1Onev16b_POST
    0U,	// ST1Onev1d
    0U,	// ST1Onev1d_POST
    0U,	// ST1Onev2d
    0U,	// ST1Onev2d_POST
    0U,	// ST1Onev2s
    0U,	// ST1Onev2s_POST
    0U,	// ST1Onev4h
    0U,	// ST1Onev4h_POST
    0U,	// ST1Onev4s
    0U,	// ST1Onev4s_POST
    0U,	// ST1Onev8b
    0U,	// ST1Onev8b_POST
    0U,	// ST1Onev8h
    0U,	// ST1Onev8h_POST
    0U,	// ST1Threev16b
    0U,	// ST1Threev16b_POST
    0U,	// ST1Threev1d
    0U,	// ST1Threev1d_POST
    0U,	// ST1Threev2d
    0U,	// ST1Threev2d_POST
    0U,	// ST1Threev2s
    0U,	// ST1Threev2s_POST
    0U,	// ST1Threev4h
    0U,	// ST1Threev4h_POST
    0U,	// ST1Threev4s
    0U,	// ST1Threev4s_POST
    0U,	// ST1Threev8b
    0U,	// ST1Threev8b_POST
    0U,	// ST1Threev8h
    0U,	// ST1Threev8h_POST
    0U,	// ST1Twov16b
    0U,	// ST1Twov16b_POST
    0U,	// ST1Twov1d
    0U,	// ST1Twov1d_POST
    0U,	// ST1Twov2d
    0U,	// ST1Twov2d_POST
    0U,	// ST1Twov2s
    0U,	// ST1Twov2s_POST
    0U,	// ST1Twov4h
    0U,	// ST1Twov4h_POST
    0U,	// ST1Twov4s
    0U,	// ST1Twov4s_POST
    0U,	// ST1Twov8b
    0U,	// ST1Twov8b_POST
    0U,	// ST1Twov8h
    0U,	// ST1Twov8h_POST
    0U,	// ST1i16
    0U,	// ST1i16_POST
    0U,	// ST1i32
    0U,	// ST1i32_POST
    0U,	// ST1i64
    0U,	// ST1i64_POST
    0U,	// ST1i8
    0U,	// ST1i8_POST
    0U,	// ST2Twov16b
    0U,	// ST2Twov16b_POST
    0U,	// ST2Twov2d
    0U,	// ST2Twov2d_POST
    0U,	// ST2Twov2s
    0U,	// ST2Twov2s_POST
    0U,	// ST2Twov4h
    0U,	// ST2Twov4h_POST
    0U,	// ST2Twov4s
    0U,	// ST2Twov4s_POST
    0U,	// ST2Twov8b
    0U,	// ST2Twov8b_POST
    0U,	// ST2Twov8h
    0U,	// ST2Twov8h_POST
    0U,	// ST2i16
    0U,	// ST2i16_POST
    0U,	// ST2i32
    0U,	// ST2i32_POST
    0U,	// ST2i64
    0U,	// ST2i64_POST
    0U,	// ST2i8
    0U,	// ST2i8_POST
    0U,	// ST3Threev16b
    0U,	// ST3Threev16b_POST
    0U,	// ST3Threev2d
    0U,	// ST3Threev2d_POST
    0U,	// ST3Threev2s
    0U,	// ST3Threev2s_POST
    0U,	// ST3Threev4h
    0U,	// ST3Threev4h_POST
    0U,	// ST3Threev4s
    0U,	// ST3Threev4s_POST
    0U,	// ST3Threev8b
    0U,	// ST3Threev8b_POST
    0U,	// ST3Threev8h
    0U,	// ST3Threev8h_POST
    0U,	// ST3i16
    0U,	// ST3i16_POST
    0U,	// ST3i32
    0U,	// ST3i32_POST
    0U,	// ST3i64
    0U,	// ST3i64_POST
    0U,	// ST3i8
    0U,	// ST3i8_POST
    0U,	// ST4Fourv16b
    0U,	// ST4Fourv16b_POST
    0U,	// ST4Fourv2d
    0U,	// ST4Fourv2d_POST
    0U,	// ST4Fourv2s
    0U,	// ST4Fourv2s_POST
    0U,	// ST4Fourv4h
    0U,	// ST4Fourv4h_POST
    0U,	// ST4Fourv4s
    0U,	// ST4Fourv4s_POST
    0U,	// ST4Fourv8b
    0U,	// ST4Fourv8b_POST
    0U,	// ST4Fourv8h
    0U,	// ST4Fourv8h_POST
    0U,	// ST4i16
    0U,	// ST4i16_POST
    0U,	// ST4i32
    0U,	// ST4i32_POST
    0U,	// ST4i64
    0U,	// ST4i64_POST
    0U,	// ST4i8
    0U,	// ST4i8_POST
    4U,	// STLRB
    4U,	// STLRH
    4U,	// STLRW
    4U,	// STLRX
    2048U,	// STLXPW
    2048U,	// STLXPX
    1284U,	// STLXRB
    1284U,	// STLXRH
    1284U,	// STLXRW
    1284U,	// STLXRX
    12804U,	// STNPDi
    16900U,	// STNPQi
    20996U,	// STNPSi
    20996U,	// STNPWi
    12804U,	// STNPXi
    12804U,	// STPDi
    26244U,	// STPDpost
    156292U,	// STPDpre
    16900U,	// STPQi
    30340U,	// STPQpost
    160388U,	// STPQpre
    20996U,	// STPSi
    34436U,	// STPSpost
    164484U,	// STPSpre
    20996U,	// STPWi
    34436U,	// STPWpost
    164484U,	// STPWpre
    12804U,	// STPXi
    26244U,	// STPXpost
    156292U,	// STPXpre
    5U,	// STRBBpost
    1920U,	// STRBBpre
    37376U,	// STRBBroW
    41472U,	// STRBBroX
    144U,	// STRBBui
    5U,	// STRBpost
    1920U,	// STRBpre
    37376U,	// STRBroW
    41472U,	// STRBroX
    144U,	// STRBui
    5U,	// STRDpost
    1920U,	// STRDpre
    45568U,	// STRDroW
    49664U,	// STRDroX
    160U,	// STRDui
    5U,	// STRHHpost
    1920U,	// STRHHpre
    53760U,	// STRHHroW
    57856U,	// STRHHroX
    176U,	// STRHHui
    5U,	// STRHpost
    1920U,	// STRHpre
    53760U,	// STRHroW
    57856U,	// STRHroX
    176U,	// STRHui
    5U,	// STRQpost
    1920U,	// STRQpre
    61952U,	// STRQroW
    66048U,	// STRQroX
    192U,	// STRQui
    5U,	// STRSpost
    1920U,	// STRSpre
    70144U,	// STRSroW
    74240U,	// STRSroX
    208U,	// STRSui
    5U,	// STRWpost
    1920U,	// STRWpre
    70144U,	// STRWroW
    74240U,	// STRWroX
    208U,	// STRWui
    5U,	// STRXpost
    1920U,	// STRXpre
    45568U,	// STRXroW
    49664U,	// STRXroX
    160U,	// STRXui
    1280U,	// STTRBi
    1280U,	// STTRHi
    1280U,	// STTRWi
    1280U,	// STTRXi
    1280U,	// STURBBi
    1280U,	// STURBi
    1280U,	// STURDi
    1280U,	// STURHHi
    1280U,	// STURHi
    1280U,	// STURQi
    1280U,	// STURSi
    1280U,	// STURWi
    1280U,	// STURXi
    2048U,	// STXPW
    2048U,	// STXPX
    1284U,	// STXRB
    1284U,	// STXRH
    1284U,	// STXRW
    1284U,	// STXRX
    16U,	// SUBHNv2i64_v2i32
    32U,	// SUBHNv2i64_v4i32
    16U,	// SUBHNv4i32_v4i16
    32U,	// SUBHNv4i32_v8i16
    32U,	// SUBHNv8i16_v16i8
    16U,	// SUBHNv8i16_v8i8
    48U,	// SUBSWri
    0U,	// SUBSWrr
    64U,	// SUBSWrs
    80U,	// SUBSWrx
    48U,	// SUBSXri
    0U,	// SUBSXrr
    64U,	// SUBSXrs
    80U,	// SUBSXrx
    256U,	// SUBSXrx64
    48U,	// SUBWri
    0U,	// SUBWrr
    64U,	// SUBWrs
    80U,	// SUBWrx
    48U,	// SUBXri
    0U,	// SUBXrr
    64U,	// SUBXrs
    80U,	// SUBXrx
    256U,	// SUBXrx64
    16U,	// SUBv16i8
    0U,	// SUBv1i64
    16U,	// SUBv2i32
    16U,	// SUBv2i64
    16U,	// SUBv4i16
    16U,	// SUBv4i32
    16U,	// SUBv8i16
    16U,	// SUBv8i8
    0U,	// SUQADDv16i8
    0U,	// SUQADDv1i16
    0U,	// SUQADDv1i32
    0U,	// SUQADDv1i64
    0U,	// SUQADDv1i8
    0U,	// SUQADDv2i32
    0U,	// SUQADDv2i64
    0U,	// SUQADDv4i16
    0U,	// SUQADDv4i32
    0U,	// SUQADDv8i16
    0U,	// SUQADDv8i8
    0U,	// SVC
    224U,	// SYSLxt
    0U,	// SYSxt
    7U,	// TBLv16i8Four
    7U,	// TBLv16i8One
    7U,	// TBLv16i8Three
    7U,	// TBLv16i8Two
    8U,	// TBLv8i8Four
    8U,	// TBLv8i8One
    8U,	// TBLv8i8Three
    8U,	// TBLv8i8Two
    240U,	// TBNZW
    240U,	// TBNZX
    7U,	// TBXv16i8Four
    7U,	// TBXv16i8One
    7U,	// TBXv16i8Three
    7U,	// TBXv16i8Two
    8U,	// TBXv8i8Four
    8U,	// TBXv8i8One
    8U,	// TBXv8i8Three
    8U,	// TBXv8i8Two
    240U,	// TBZW
    240U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    0U,	// TLSDESCCALL
    0U,	// TLSDESC_BLR
    16U,	// TRN1v16i8
    16U,	// TRN1v2i32
    16U,	// TRN1v2i64
    16U,	// TRN1v4i16
    16U,	// TRN1v4i32
    16U,	// TRN1v8i16
    16U,	// TRN1v8i8
    16U,	// TRN2v16i8
    16U,	// TRN2v2i32
    16U,	// TRN2v2i64
    16U,	// TRN2v4i16
    16U,	// TRN2v4i32
    16U,	// TRN2v8i16
    16U,	// TRN2v8i8
    32U,	// UABALv16i8_v8i16
    32U,	// UABALv2i32_v2i64
    32U,	// UABALv4i16_v4i32
    32U,	// UABALv4i32_v2i64
    32U,	// UABALv8i16_v4i32
    32U,	// UABALv8i8_v8i16
    32U,	// UABAv16i8
    32U,	// UABAv2i32
    32U,	// UABAv4i16
    32U,	// UABAv4i32
    32U,	// UABAv8i16
    32U,	// UABAv8i8
    16U,	// UABDLv16i8_v8i16
    16U,	// UABDLv2i32_v2i64
    16U,	// UABDLv4i16_v4i32
    16U,	// UABDLv4i32_v2i64
    16U,	// UABDLv8i16_v4i32
    16U,	// UABDLv8i8_v8i16
    16U,	// UABDv16i8
    16U,	// UABDv2i32
    16U,	// UABDv4i16
    16U,	// UABDv4i32
    16U,	// UABDv8i16
    16U,	// UABDv8i8
    0U,	// UADALPv16i8_v8i16
    0U,	// UADALPv2i32_v1i64
    0U,	// UADALPv4i16_v2i32
    0U,	// UADALPv4i32_v2i64
    0U,	// UADALPv8i16_v4i32
    0U,	// UADALPv8i8_v4i16
    0U,	// UADDLPv16i8_v8i16
    0U,	// UADDLPv2i32_v1i64
    0U,	// UADDLPv4i16_v2i32
    0U,	// UADDLPv4i32_v2i64
    0U,	// UADDLPv8i16_v4i32
    0U,	// UADDLPv8i8_v4i16
    0U,	// UADDLVv16i8v
    0U,	// UADDLVv4i16v
    0U,	// UADDLVv4i32v
    0U,	// UADDLVv8i16v
    0U,	// UADDLVv8i8v
    16U,	// UADDLv16i8_v8i16
    16U,	// UADDLv2i32_v2i64
    16U,	// UADDLv4i16_v4i32
    16U,	// UADDLv4i32_v2i64
    16U,	// UADDLv8i16_v4i32
    16U,	// UADDLv8i8_v8i16
    16U,	// UADDWv16i8_v8i16
    16U,	// UADDWv2i32_v2i64
    16U,	// UADDWv4i16_v4i32
    16U,	// UADDWv4i32_v2i64
    16U,	// UADDWv8i16_v4i32
    16U,	// UADDWv8i8_v8i16
    8704U,	// UBFMWri
    8704U,	// UBFMXri
    0U,	// UCVTFSWDri
    0U,	// UCVTFSWSri
    0U,	// UCVTFSXDri
    0U,	// UCVTFSXSri
    0U,	// UCVTFUWDri
    0U,	// UCVTFUWSri
    0U,	// UCVTFUXDri
    0U,	// UCVTFUXSri
    0U,	// UCVTFd
    0U,	// UCVTFs
    0U,	// UCVTFv1i32
    0U,	// UCVTFv1i64
    0U,	// UCVTFv2f32
    0U,	// UCVTFv2f64
    0U,	// UCVTFv2i32_shift
    0U,	// UCVTFv2i64_shift
    0U,	// UCVTFv4f32
    0U,	// UCVTFv4i32_shift
    0U,	// UDIVWr
    0U,	// UDIVXr
    0U,	// UDIV_IntWr
    0U,	// UDIV_IntXr
    16U,	// UHADDv16i8
    16U,	// UHADDv2i32
    16U,	// UHADDv4i16
    16U,	// UHADDv4i32
    16U,	// UHADDv8i16
    16U,	// UHADDv8i8
    16U,	// UHSUBv16i8
    16U,	// UHSUBv2i32
    16U,	// UHSUBv4i16
    16U,	// UHSUBv4i32
    16U,	// UHSUBv8i16
    16U,	// UHSUBv8i8
    8704U,	// UMADDLrrr
    16U,	// UMAXPv16i8
    16U,	// UMAXPv2i32
    16U,	// UMAXPv4i16
    16U,	// UMAXPv4i32
    16U,	// UMAXPv8i16
    16U,	// UMAXPv8i8
    0U,	// UMAXVv16i8v
    0U,	// UMAXVv4i16v
    0U,	// UMAXVv4i32v
    0U,	// UMAXVv8i16v
    0U,	// UMAXVv8i8v
    16U,	// UMAXv16i8
    16U,	// UMAXv2i32
    16U,	// UMAXv4i16
    16U,	// UMAXv4i32
    16U,	// UMAXv8i16
    16U,	// UMAXv8i8
    16U,	// UMINPv16i8
    16U,	// UMINPv2i32
    16U,	// UMINPv4i16
    16U,	// UMINPv4i32
    16U,	// UMINPv8i16
    16U,	// UMINPv8i8
    0U,	// UMINVv16i8v
    0U,	// UMINVv4i16v
    0U,	// UMINVv4i32v
    0U,	// UMINVv8i16v
    0U,	// UMINVv8i8v
    16U,	// UMINv16i8
    16U,	// UMINv2i32
    16U,	// UMINv4i16
    16U,	// UMINv4i32
    16U,	// UMINv8i16
    16U,	// UMINv8i8
    32U,	// UMLALv16i8_v8i16
    800U,	// UMLALv2i32_indexed
    32U,	// UMLALv2i32_v2i64
    800U,	// UMLALv4i16_indexed
    32U,	// UMLALv4i16_v4i32
    800U,	// UMLALv4i32_indexed
    32U,	// UMLALv4i32_v2i64
    800U,	// UMLALv8i16_indexed
    32U,	// UMLALv8i16_v4i32
    32U,	// UMLALv8i8_v8i16
    32U,	// UMLSLv16i8_v8i16
    800U,	// UMLSLv2i32_indexed
    32U,	// UMLSLv2i32_v2i64
    800U,	// UMLSLv4i16_indexed
    32U,	// UMLSLv4i16_v4i32
    800U,	// UMLSLv4i32_indexed
    32U,	// UMLSLv4i32_v2i64
    800U,	// UMLSLv8i16_indexed
    32U,	// UMLSLv8i16_v4i32
    32U,	// UMLSLv8i8_v8i16
    1U,	// UMOVvi16
    1U,	// UMOVvi32
    1U,	// UMOVvi64
    1U,	// UMOVvi8
    8704U,	// UMSUBLrrr
    0U,	// UMULHrr
    16U,	// UMULLv16i8_v8i16
    1040U,	// UMULLv2i32_indexed
    16U,	// UMULLv2i32_v2i64
    1040U,	// UMULLv4i16_indexed
    16U,	// UMULLv4i16_v4i32
    1040U,	// UMULLv4i32_indexed
    16U,	// UMULLv4i32_v2i64
    1040U,	// UMULLv8i16_indexed
    16U,	// UMULLv8i16_v4i32
    16U,	// UMULLv8i8_v8i16
    16U,	// UQADDv16i8
    0U,	// UQADDv1i16
    0U,	// UQADDv1i32
    0U,	// UQADDv1i64
    0U,	// UQADDv1i8
    16U,	// UQADDv2i32
    16U,	// UQADDv2i64
    16U,	// UQADDv4i16
    16U,	// UQADDv4i32
    16U,	// UQADDv8i16
    16U,	// UQADDv8i8
    16U,	// UQRSHLv16i8
    0U,	// UQRSHLv1i16
    0U,	// UQRSHLv1i32
    0U,	// UQRSHLv1i64
    0U,	// UQRSHLv1i8
    16U,	// UQRSHLv2i32
    16U,	// UQRSHLv2i64
    16U,	// UQRSHLv4i16
    16U,	// UQRSHLv4i32
    16U,	// UQRSHLv8i16
    16U,	// UQRSHLv8i8
    0U,	// UQRSHRNb
    0U,	// UQRSHRNh
    0U,	// UQRSHRNs
    128U,	// UQRSHRNv16i8_shift
    0U,	// UQRSHRNv2i32_shift
    0U,	// UQRSHRNv4i16_shift
    128U,	// UQRSHRNv4i32_shift
    128U,	// UQRSHRNv8i16_shift
    0U,	// UQRSHRNv8i8_shift
    0U,	// UQSHLb
    0U,	// UQSHLd
    0U,	// UQSHLh
    0U,	// UQSHLs
    16U,	// UQSHLv16i8
    0U,	// UQSHLv16i8_shift
    0U,	// UQSHLv1i16
    0U,	// UQSHLv1i32
    0U,	// UQSHLv1i64
    0U,	// UQSHLv1i8
    16U,	// UQSHLv2i32
    0U,	// UQSHLv2i32_shift
    16U,	// UQSHLv2i64
    0U,	// UQSHLv2i64_shift
    16U,	// UQSHLv4i16
    0U,	// UQSHLv4i16_shift
    16U,	// UQSHLv4i32
    0U,	// UQSHLv4i32_shift
    16U,	// UQSHLv8i16
    0U,	// UQSHLv8i16_shift
    16U,	// UQSHLv8i8
    0U,	// UQSHLv8i8_shift
    0U,	// UQSHRNb
    0U,	// UQSHRNh
    0U,	// UQSHRNs
    128U,	// UQSHRNv16i8_shift
    0U,	// UQSHRNv2i32_shift
    0U,	// UQSHRNv4i16_shift
    128U,	// UQSHRNv4i32_shift
    128U,	// UQSHRNv8i16_shift
    0U,	// UQSHRNv8i8_shift
    16U,	// UQSUBv16i8
    0U,	// UQSUBv1i16
    0U,	// UQSUBv1i32
    0U,	// UQSUBv1i64
    0U,	// UQSUBv1i8
    16U,	// UQSUBv2i32
    16U,	// UQSUBv2i64
    16U,	// UQSUBv4i16
    16U,	// UQSUBv4i32
    16U,	// UQSUBv8i16
    16U,	// UQSUBv8i8
    0U,	// UQXTNv16i8
    0U,	// UQXTNv1i16
    0U,	// UQXTNv1i32
    0U,	// UQXTNv1i8
    0U,	// UQXTNv2i32
    0U,	// UQXTNv4i16
    0U,	// UQXTNv4i32
    0U,	// UQXTNv8i16
    0U,	// UQXTNv8i8
    0U,	// URECPEv2i32
    0U,	// URECPEv4i32
    16U,	// URHADDv16i8
    16U,	// URHADDv2i32
    16U,	// URHADDv4i16
    16U,	// URHADDv4i32
    16U,	// URHADDv8i16
    16U,	// URHADDv8i8
    16U,	// URSHLv16i8
    0U,	// URSHLv1i64
    16U,	// URSHLv2i32
    16U,	// URSHLv2i64
    16U,	// URSHLv4i16
    16U,	// URSHLv4i32
    16U,	// URSHLv8i16
    16U,	// URSHLv8i8
    0U,	// URSHRd
    0U,	// URSHRv16i8_shift
    0U,	// URSHRv2i32_shift
    0U,	// URSHRv2i64_shift
    0U,	// URSHRv4i16_shift
    0U,	// URSHRv4i32_shift
    0U,	// URSHRv8i16_shift
    0U,	// URSHRv8i8_shift
    0U,	// URSQRTEv2i32
    0U,	// URSQRTEv4i32
    128U,	// URSRAd
    128U,	// URSRAv16i8_shift
    128U,	// URSRAv2i32_shift
    128U,	// URSRAv2i64_shift
    128U,	// URSRAv4i16_shift
    128U,	// URSRAv4i32_shift
    128U,	// URSRAv8i16_shift
    128U,	// URSRAv8i8_shift
    0U,	// USHLLv16i8_shift
    0U,	// USHLLv2i32_shift
    0U,	// USHLLv4i16_shift
    0U,	// USHLLv4i32_shift
    0U,	// USHLLv8i16_shift
    0U,	// USHLLv8i8_shift
    16U,	// USHLv16i8
    0U,	// USHLv1i64
    16U,	// USHLv2i32
    16U,	// USHLv2i64
    16U,	// USHLv4i16
    16U,	// USHLv4i32
    16U,	// USHLv8i16
    16U,	// USHLv8i8
    0U,	// USHRd
    0U,	// USHRv16i8_shift
    0U,	// USHRv2i32_shift
    0U,	// USHRv2i64_shift
    0U,	// USHRv4i16_shift
    0U,	// USHRv4i32_shift
    0U,	// USHRv8i16_shift
    0U,	// USHRv8i8_shift
    0U,	// USQADDv16i8
    0U,	// USQADDv1i16
    0U,	// USQADDv1i32
    0U,	// USQADDv1i64
    0U,	// USQADDv1i8
    0U,	// USQADDv2i32
    0U,	// USQADDv2i64
    0U,	// USQADDv4i16
    0U,	// USQADDv4i32
    0U,	// USQADDv8i16
    0U,	// USQADDv8i8
    128U,	// USRAd
    128U,	// USRAv16i8_shift
    128U,	// USRAv2i32_shift
    128U,	// USRAv2i64_shift
    128U,	// USRAv4i16_shift
    128U,	// USRAv4i32_shift
    128U,	// USRAv8i16_shift
    128U,	// USRAv8i8_shift
    16U,	// USUBLv16i8_v8i16
    16U,	// USUBLv2i32_v2i64
    16U,	// USUBLv4i16_v4i32
    16U,	// USUBLv4i32_v2i64
    16U,	// USUBLv8i16_v4i32
    16U,	// USUBLv8i8_v8i16
    16U,	// USUBWv16i8_v8i16
    16U,	// USUBWv2i32_v2i64
    16U,	// USUBWv4i16_v4i32
    16U,	// USUBWv4i32_v2i64
    16U,	// USUBWv8i16_v4i32
    16U,	// USUBWv8i8_v8i16
    16U,	// UZP1v16i8
    16U,	// UZP1v2i32
    16U,	// UZP1v2i64
    16U,	// UZP1v4i16
    16U,	// UZP1v4i32
    16U,	// UZP1v8i16
    16U,	// UZP1v8i8
    16U,	// UZP2v16i8
    16U,	// UZP2v2i32
    16U,	// UZP2v2i64
    16U,	// UZP2v4i16
    16U,	// UZP2v4i32
    16U,	// UZP2v8i16
    16U,	// UZP2v8i8
    0U,	// XTNv16i8
    0U,	// XTNv2i32
    0U,	// XTNv4i16
    0U,	// XTNv4i32
    0U,	// XTNv8i16
    0U,	// XTNv8i8
    16U,	// ZIP1v16i8
    16U,	// ZIP1v2i32
    16U,	// ZIP1v2i64
    16U,	// ZIP1v4i16
    16U,	// ZIP1v4i32
    16U,	// ZIP1v8i16
    16U,	// ZIP1v8i8
    16U,	// ZIP2v16i8
    16U,	// ZIP2v2i32
    16U,	// ZIP2v2i64
    16U,	// ZIP2v4i16
    16U,	// ZIP2v4i32
    16U,	// ZIP2v8i16
    16U,	// ZIP2v8i8
    0U
  };

  static const char AsmStrs[] = {
  /* 0 */ 'l', 'd', '1', 9, 0,
  /* 5 */ 'd', 'c', 'p', 's', '1', 9, 0,
  /* 12 */ 's', 't', '1', 9, 0,
  /* 17 */ 'r', 'e', 'v', '3', '2', 9, 0,
  /* 24 */ 'l', 'd', '2', 9, 0,
  /* 29 */ 'f', 'c', 'v', 't', 'l', '2', 9, 0,
  /* 37 */ 'f', 'c', 'v', 't', 'n', '2', 9, 0,
  /* 45 */ 'f', 'c', 'v', 't', 'x', 'n', '2', 9, 0,
  /* 54 */ 'd', 'c', 'p', 's', '2', 9, 0,
  /* 61 */ 's', 't', '2', 9, 0,
  /* 66 */ 'l', 'd', '3', 9, 0,
  /* 71 */ 'd', 'c', 'p', 's', '3', 9, 0,
  /* 78 */ 's', 't', '3', 9, 0,
  /* 83 */ 'l', 'd', '4', 9, 0,
  /* 88 */ 's', 't', '4', 9, 0,
  /* 93 */ 'r', 'e', 'v', '1', '6', 9, 0,
  /* 100 */ 's', 'r', 's', 'r', 'a', 9, 0,
  /* 107 */ 'u', 'r', 's', 'r', 'a', 9, 0,
  /* 114 */ 's', 's', 'r', 'a', 9, 0,
  /* 120 */ 'u', 's', 'r', 'a', 9, 0,
  /* 126 */ 'f', 'r', 'i', 'n', 't', 'a', 9, 0,
  /* 134 */ 'i', 'n', 's', '.', 'b', 9, 0,
  /* 141 */ 's', 'm', 'o', 'v', '.', 'b', 9, 0,
  /* 149 */ 'u', 'm', 'o', 'v', '.', 'b', 9, 0,
  /* 157 */ 'c', 'r', 'c', '3', '2', 'b', 9, 0,
  /* 165 */ 't', 'r', 'n', '1', '.', '1', '6', 'b', 9, 0,
  /* 175 */ 'z', 'i', 'p', '1', '.', '1', '6', 'b', 9, 0,
  /* 185 */ 'u', 'z', 'p', '1', '.', '1', '6', 'b', 9, 0,
  /* 195 */ 'r', 'e', 'v', '3', '2', '.', '1', '6', 'b', 9, 0,
  /* 206 */ 'r', 's', 'u', 'b', 'h', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 219 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 232 */ 's', 'q', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 245 */ 'u', 'q', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 258 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 272 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 286 */ 't', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 296 */ 's', 'q', 'x', 't', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 308 */ 'u', 'q', 'x', 't', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 320 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 334 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 349 */ 's', 'q', 'x', 't', 'u', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 362 */ 'z', 'i', 'p', '2', '.', '1', '6', 'b', 9, 0,
  /* 372 */ 'u', 'z', 'p', '2', '.', '1', '6', 'b', 9, 0,
  /* 382 */ 'r', 'e', 'v', '6', '4', '.', '1', '6', 'b', 9, 0,
  /* 393 */ 'r', 'e', 'v', '1', '6', '.', '1', '6', 'b', 9, 0,
  /* 404 */ 's', 'a', 'b', 'a', '.', '1', '6', 'b', 9, 0,
  /* 414 */ 'u', 'a', 'b', 'a', '.', '1', '6', 'b', 9, 0,
  /* 424 */ 'm', 'l', 'a', '.', '1', '6', 'b', 9, 0,
  /* 433 */ 's', 'r', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 444 */ 'u', 'r', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 455 */ 's', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 465 */ 'u', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 475 */ 's', 'h', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 486 */ 'u', 'h', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 497 */ 's', 'q', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 508 */ 'u', 'q', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 519 */ 'b', 'i', 'c', '.', '1', '6', 'b', 9, 0,
  /* 528 */ 'a', 'e', 's', 'i', 'm', 'c', '.', '1', '6', 'b', 9, 0,
  /* 540 */ 'a', 'e', 's', 'm', 'c', '.', '1', '6', 'b', 9, 0,
  /* 551 */ 's', 'a', 'b', 'd', '.', '1', '6', 'b', 9, 0,
  /* 561 */ 'u', 'a', 'b', 'd', '.', '1', '6', 'b', 9, 0,
  /* 571 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 583 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 595 */ 's', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 606 */ 'u', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 617 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 629 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 641 */ 'a', 'n', 'd', '.', '1', '6', 'b', 9, 0,
  /* 650 */ 'a', 'e', 's', 'd', '.', '1', '6', 'b', 9, 0,
  /* 660 */ 'c', 'm', 'g', 'e', '.', '1', '6', 'b', 9, 0,
  /* 670 */ 'c', 'm', 'l', 'e', '.', '1', '6', 'b', 9, 0,
  /* 680 */ 'a', 'e', 's', 'e', '.', '1', '6', 'b', 9, 0,
  /* 690 */ 'b', 'i', 'f', '.', '1', '6', 'b', 9, 0,
  /* 699 */ 's', 'q', 'n', 'e', 'g', '.', '1', '6', 'b', 9, 0,
  /* 710 */ 'c', 'm', 'h', 'i', '.', '1', '6', 'b', 9, 0,
  /* 720 */ 's', 'l', 'i', '.', '1', '6', 'b', 9, 0,
  /* 729 */ 's', 'r', 'i', '.', '1', '6', 'b', 9, 0,
  /* 738 */ 'm', 'o', 'v', 'i', '.', '1', '6', 'b', 9, 0,
  /* 748 */ 's', 'q', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 759 */ 'u', 'q', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 770 */ 's', 'q', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 782 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 794 */ 's', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 805 */ 'u', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 816 */ 's', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 826 */ 'u', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 836 */ 'b', 's', 'l', '.', '1', '6', 'b', 9, 0,
  /* 845 */ 'p', 'm', 'u', 'l', '.', '1', '6', 'b', 9, 0,
  /* 855 */ 's', 'm', 'i', 'n', '.', '1', '6', 'b', 9, 0,
  /* 865 */ 'u', 'm', 'i', 'n', '.', '1', '6', 'b', 9, 0,
  /* 875 */ 'o', 'r', 'n', '.', '1', '6', 'b', 9, 0,
  /* 884 */ 'a', 'd', 'd', 'p', '.', '1', '6', 'b', 9, 0,
  /* 894 */ 's', 'm', 'i', 'n', 'p', '.', '1', '6', 'b', 9, 0,
  /* 905 */ 'u', 'm', 'i', 'n', 'p', '.', '1', '6', 'b', 9, 0,
  /* 916 */ 'd', 'u', 'p', '.', '1', '6', 'b', 9, 0,
  /* 925 */ 's', 'm', 'a', 'x', 'p', '.', '1', '6', 'b', 9, 0,
  /* 936 */ 'u', 'm', 'a', 'x', 'p', '.', '1', '6', 'b', 9, 0,
  /* 947 */ 'c', 'm', 'e', 'q', '.', '1', '6', 'b', 9, 0,
  /* 957 */ 's', 'r', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 968 */ 'u', 'r', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 979 */ 's', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 989 */ 'u', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 999 */ 'e', 'o', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1008 */ 'o', 'r', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1017 */ 's', 'q', 'a', 'b', 's', '.', '1', '6', 'b', 9, 0,
  /* 1028 */ 'c', 'm', 'h', 's', '.', '1', '6', 'b', 9, 0,
  /* 1038 */ 'c', 'l', 's', '.', '1', '6', 'b', 9, 0,
  /* 1047 */ 'm', 'l', 's', '.', '1', '6', 'b', 9, 0,
  /* 1056 */ 'c', 'm', 'g', 't', '.', '1', '6', 'b', 9, 0,
  /* 1066 */ 'r', 'b', 'i', 't', '.', '1', '6', 'b', 9, 0,
  /* 1076 */ 'c', 'm', 'l', 't', '.', '1', '6', 'b', 9, 0,
  /* 1086 */ 'c', 'n', 't', '.', '1', '6', 'b', 9, 0,
  /* 1095 */ 'n', 'o', 't', '.', '1', '6', 'b', 9, 0,
  /* 1104 */ 'c', 'm', 't', 's', 't', '.', '1', '6', 'b', 9, 0,
  /* 1115 */ 'e', 'x', 't', '.', '1', '6', 'b', 9, 0,
  /* 1124 */ 's', 'q', 's', 'h', 'l', 'u', '.', '1', '6', 'b', 9, 0,
  /* 1136 */ 'a', 'd', 'd', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1146 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1158 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1170 */ 's', 'm', 'i', 'n', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1181 */ 'u', 'm', 'i', 'n', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1192 */ 's', 'm', 'a', 'x', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1203 */ 'u', 'm', 'a', 'x', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1214 */ 's', 'm', 'a', 'x', '.', '1', '6', 'b', 9, 0,
  /* 1224 */ 'u', 'm', 'a', 'x', '.', '1', '6', 'b', 9, 0,
  /* 1234 */ 'c', 'l', 'z', '.', '1', '6', 'b', 9, 0,
  /* 1243 */ 't', 'r', 'n', '1', '.', '8', 'b', 9, 0,
  /* 1252 */ 'z', 'i', 'p', '1', '.', '8', 'b', 9, 0,
  /* 1261 */ 'u', 'z', 'p', '1', '.', '8', 'b', 9, 0,
  /* 1270 */ 'r', 'e', 'v', '3', '2', '.', '8', 'b', 9, 0,
  /* 1280 */ 't', 'r', 'n', '2', '.', '8', 'b', 9, 0,
  /* 1289 */ 'z', 'i', 'p', '2', '.', '8', 'b', 9, 0,
  /* 1298 */ 'u', 'z', 'p', '2', '.', '8', 'b', 9, 0,
  /* 1307 */ 'r', 'e', 'v', '6', '4', '.', '8', 'b', 9, 0,
  /* 1317 */ 'r', 'e', 'v', '1', '6', '.', '8', 'b', 9, 0,
  /* 1327 */ 's', 'a', 'b', 'a', '.', '8', 'b', 9, 0,
  /* 1336 */ 'u', 'a', 'b', 'a', '.', '8', 'b', 9, 0,
  /* 1345 */ 'm', 'l', 'a', '.', '8', 'b', 9, 0,
  /* 1353 */ 's', 'r', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1363 */ 'u', 'r', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1373 */ 's', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1382 */ 'u', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1391 */ 's', 'h', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1401 */ 'u', 'h', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1411 */ 's', 'q', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1421 */ 'u', 'q', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1431 */ 'b', 'i', 'c', '.', '8', 'b', 9, 0,
  /* 1439 */ 's', 'a', 'b', 'd', '.', '8', 'b', 9, 0,
  /* 1448 */ 'u', 'a', 'b', 'd', '.', '8', 'b', 9, 0,
  /* 1457 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1468 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1479 */ 's', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1489 */ 'u', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1499 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1510 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1521 */ 'a', 'n', 'd', '.', '8', 'b', 9, 0,
  /* 1529 */ 'c', 'm', 'g', 'e', '.', '8', 'b', 9, 0,
  /* 1538 */ 'c', 'm', 'l', 'e', '.', '8', 'b', 9, 0,
  /* 1547 */ 'b', 'i', 'f', '.', '8', 'b', 9, 0,
  /* 1555 */ 's', 'q', 'n', 'e', 'g', '.', '8', 'b', 9, 0,
  /* 1565 */ 'c', 'm', 'h', 'i', '.', '8', 'b', 9, 0,
  /* 1574 */ 's', 'l', 'i', '.', '8', 'b', 9, 0,
  /* 1582 */ 's', 'r', 'i', '.', '8', 'b', 9, 0,
  /* 1590 */ 'm', 'o', 'v', 'i', '.', '8', 'b', 9, 0,
  /* 1599 */ 's', 'q', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1609 */ 'u', 'q', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1619 */ 's', 'q', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1630 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1641 */ 's', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1651 */ 'u', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1661 */ 's', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1670 */ 'u', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1679 */ 'b', 's', 'l', '.', '8', 'b', 9, 0,
  /* 1687 */ 'p', 'm', 'u', 'l', '.', '8', 'b', 9, 0,
  /* 1696 */ 'r', 's', 'u', 'b', 'h', 'n', '.', '8', 'b', 9, 0,
  /* 1707 */ 'r', 'a', 'd', 'd', 'h', 'n', '.', '8', 'b', 9, 0,
  /* 1718 */ 's', 'm', 'i', 'n', '.', '8', 'b', 9, 0,
  /* 1727 */ 'u', 'm', 'i', 'n', '.', '8', 'b', 9, 0,
  /* 1736 */ 's', 'q', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1747 */ 'u', 'q', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1758 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1770 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1782 */ 'o', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1790 */ 's', 'q', 'x', 't', 'n', '.', '8', 'b', 9, 0,
  /* 1800 */ 'u', 'q', 'x', 't', 'n', '.', '8', 'b', 9, 0,
  /* 1810 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '.', '8', 'b', 9, 0,
  /* 1822 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '.', '8', 'b', 9, 0,
  /* 1835 */ 's', 'q', 'x', 't', 'u', 'n', '.', '8', 'b', 9, 0,
  /* 1846 */ 'a', 'd', 'd', 'p', '.', '8', 'b', 9, 0,
  /* 1855 */ 's', 'm', 'i', 'n', 'p', '.', '8', 'b', 9, 0,
  /* 1865 */ 'u', 'm', 'i', 'n', 'p', '.', '8', 'b', 9, 0,
  /* 1875 */ 'd', 'u', 'p', '.', '8', 'b', 9, 0,
  /* 1883 */ 's', 'm', 'a', 'x', 'p', '.', '8', 'b', 9, 0,
  /* 1893 */ 'u', 'm', 'a', 'x', 'p', '.', '8', 'b', 9, 0,
  /* 1903 */ 'c', 'm', 'e', 'q', '.', '8', 'b', 9, 0,
  /* 1912 */ 's', 'r', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 1922 */ 'u', 'r', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 1932 */ 's', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 1941 */ 'u', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 1950 */ 'e', 'o', 'r', '.', '8', 'b', 9, 0,
  /* 1958 */ 'o', 'r', 'r', '.', '8', 'b', 9, 0,
  /* 1966 */ 's', 'q', 'a', 'b', 's', '.', '8', 'b', 9, 0,
  /* 1976 */ 'c', 'm', 'h', 's', '.', '8', 'b', 9, 0,
  /* 1985 */ 'c', 'l', 's', '.', '8', 'b', 9, 0,
  /* 1993 */ 'm', 'l', 's', '.', '8', 'b', 9, 0,
  /* 2001 */ 'c', 'm', 'g', 't', '.', '8', 'b', 9, 0,
  /* 2010 */ 'r', 'b', 'i', 't', '.', '8', 'b', 9, 0,
  /* 2019 */ 'c', 'm', 'l', 't', '.', '8', 'b', 9, 0,
  /* 2028 */ 'c', 'n', 't', '.', '8', 'b', 9, 0,
  /* 2036 */ 'n', 'o', 't', '.', '8', 'b', 9, 0,
  /* 2044 */ 'c', 'm', 't', 's', 't', '.', '8', 'b', 9, 0,
  /* 2054 */ 'e', 'x', 't', '.', '8', 'b', 9, 0,
  /* 2062 */ 's', 'q', 's', 'h', 'l', 'u', '.', '8', 'b', 9, 0,
  /* 2073 */ 'a', 'd', 'd', 'v', '.', '8', 'b', 9, 0,
  /* 2082 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '8', 'b', 9, 0,
  /* 2093 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '8', 'b', 9, 0,
  /* 2104 */ 's', 'm', 'i', 'n', 'v', '.', '8', 'b', 9, 0,
  /* 2114 */ 'u', 'm', 'i', 'n', 'v', '.', '8', 'b', 9, 0,
  /* 2124 */ 's', 'm', 'a', 'x', 'v', '.', '8', 'b', 9, 0,
  /* 2134 */ 'u', 'm', 'a', 'x', 'v', '.', '8', 'b', 9, 0,
  /* 2144 */ 's', 'm', 'a', 'x', '.', '8', 'b', 9, 0,
  /* 2153 */ 'u', 'm', 'a', 'x', '.', '8', 'b', 9, 0,
  /* 2162 */ 'c', 'l', 'z', '.', '8', 'b', 9, 0,
  /* 2170 */ 'c', 'r', 'c', '3', '2', 'c', 'b', 9, 0,
  /* 2179 */ 'd', 'm', 'b', 9, 0,
  /* 2184 */ 'l', 'd', 'a', 'r', 'b', 9, 0,
  /* 2191 */ 'l', 'd', 'r', 'b', 9, 0,
  /* 2197 */ 's', 't', 'l', 'r', 'b', 9, 0,
  /* 2204 */ 'l', 'd', 't', 'r', 'b', 9, 0,
  /* 2211 */ 's', 't', 'r', 'b', 9, 0,
  /* 2217 */ 's', 't', 't', 'r', 'b', 9, 0,
  /* 2224 */ 'l', 'd', 'u', 'r', 'b', 9, 0,
  /* 2231 */ 's', 't', 'u', 'r', 'b', 9, 0,
  /* 2238 */ 'l', 'd', 'a', 'x', 'r', 'b', 9, 0,
  /* 2246 */ 'l', 'd', 'x', 'r', 'b', 9, 0,
  /* 2253 */ 's', 't', 'l', 'x', 'r', 'b', 9, 0,
  /* 2261 */ 's', 't', 'x', 'r', 'b', 9, 0,
  /* 2268 */ 'd', 's', 'b', 9, 0,
  /* 2273 */ 'i', 's', 'b', 9, 0,
  /* 2278 */ 'l', 'd', 'r', 's', 'b', 9, 0,
  /* 2285 */ 'l', 'd', 't', 'r', 's', 'b', 9, 0,
  /* 2293 */ 'l', 'd', 'u', 'r', 's', 'b', 9, 0,
  /* 2301 */ 'f', 's', 'u', 'b', 9, 0,
  /* 2307 */ 'f', 'm', 's', 'u', 'b', 9, 0,
  /* 2314 */ 'f', 'n', 'm', 's', 'u', 'b', 9, 0,
  /* 2322 */ 's', 'q', 's', 'u', 'b', 9, 0,
  /* 2329 */ 'u', 'q', 's', 'u', 'b', 9, 0,
  /* 2336 */ 's', 'b', 'c', 9, 0,
  /* 2341 */ 'a', 'd', 'c', 9, 0,
  /* 2346 */ 'b', 'i', 'c', 9, 0,
  /* 2351 */ 's', 'm', 'c', 9, 0,
  /* 2356 */ 'c', 's', 'i', 'n', 'c', 9, 0,
  /* 2363 */ 'h', 'v', 'c', 9, 0,
  /* 2368 */ 's', 'v', 'c', 9, 0,
  /* 2373 */ 'f', 'm', 'l', 'a', '.', 'd', 9, 0,
  /* 2381 */ 'f', 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 2389 */ 'f', 'm', 'l', 's', '.', 'd', 9, 0,
  /* 2397 */ 'i', 'n', 's', '.', 'd', 9, 0,
  /* 2404 */ 'f', 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 2412 */ 'u', 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 2420 */ 'f', 'm', 'u', 'l', 'x', '.', 'd', 9, 0,
  /* 2429 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 2440 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 2451 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 2462 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 2473 */ 't', 'r', 'n', '1', '.', '2', 'd', 9, 0,
  /* 2482 */ 'z', 'i', 'p', '1', '.', '2', 'd', 9, 0,
  /* 2491 */ 'u', 'z', 'p', '1', '.', '2', 'd', 9, 0,
  /* 2500 */ 's', 'a', 'b', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2511 */ 'u', 'a', 'b', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2522 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2535 */ 's', 'm', 'l', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2546 */ 'u', 'm', 'l', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2557 */ 's', 's', 'u', 'b', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2568 */ 'u', 's', 'u', 'b', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2579 */ 's', 'a', 'b', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2590 */ 'u', 'a', 'b', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2601 */ 's', 'a', 'd', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2612 */ 'u', 'a', 'd', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2623 */ 's', 's', 'h', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2634 */ 'u', 's', 'h', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2645 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2658 */ 's', 'm', 'u', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2669 */ 'u', 'm', 'u', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2680 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2693 */ 's', 'm', 'l', 's', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2704 */ 'u', 'm', 'l', 's', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2715 */ 't', 'r', 'n', '2', '.', '2', 'd', 9, 0,
  /* 2724 */ 'z', 'i', 'p', '2', '.', '2', 'd', 9, 0,
  /* 2733 */ 'u', 'z', 'p', '2', '.', '2', 'd', 9, 0,
  /* 2742 */ 's', 's', 'u', 'b', 'w', '2', '.', '2', 'd', 9, 0,
  /* 2753 */ 'u', 's', 'u', 'b', 'w', '2', '.', '2', 'd', 9, 0,
  /* 2764 */ 's', 'a', 'd', 'd', 'w', '2', '.', '2', 'd', 9, 0,
  /* 2775 */ 'u', 'a', 'd', 'd', 'w', '2', '.', '2', 'd', 9, 0,
  /* 2786 */ 'f', 'm', 'l', 'a', '.', '2', 'd', 9, 0,
  /* 2795 */ 's', 'r', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 2805 */ 'u', 'r', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 2815 */ 's', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 2824 */ 'u', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 2833 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '2', 'd', 9, 0,
  /* 2844 */ 'f', 's', 'u', 'b', '.', '2', 'd', 9, 0,
  /* 2853 */ 's', 'q', 's', 'u', 'b', '.', '2', 'd', 9, 0,
  /* 2863 */ 'u', 'q', 's', 'u', 'b', '.', '2', 'd', 9, 0,
  /* 2873 */ 'f', 'a', 'b', 'd', '.', '2', 'd', 9, 0,
  /* 2882 */ 'f', 'a', 'd', 'd', '.', '2', 'd', 9, 0,
  /* 2891 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '2', 'd', 9, 0,
  /* 2902 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '2', 'd', 9, 0,
  /* 2913 */ 'f', 'a', 'c', 'g', 'e', '.', '2', 'd', 9, 0,
  /* 2923 */ 'f', 'c', 'm', 'g', 'e', '.', '2', 'd', 9, 0,
  /* 2933 */ 'f', 'c', 'm', 'l', 'e', '.', '2', 'd', 9, 0,
  /* 2943 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '2', 'd', 9, 0,
  /* 2954 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '2', 'd', 9, 0,
  /* 2966 */ 's', 'c', 'v', 't', 'f', '.', '2', 'd', 9, 0,
  /* 2976 */ 'u', 'c', 'v', 't', 'f', '.', '2', 'd', 9, 0,
  /* 2986 */ 'f', 'n', 'e', 'g', '.', '2', 'd', 9, 0,
  /* 2995 */ 's', 'q', 'n', 'e', 'g', '.', '2', 'd', 9, 0,
  /* 3005 */ 'c', 'm', 'h', 'i', '.', '2', 'd', 9, 0,
  /* 3014 */ 's', 'l', 'i', '.', '2', 'd', 9, 0,
  /* 3022 */ 's', 'r', 'i', '.', '2', 'd', 9, 0,
  /* 3030 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '2', 'd', 9, 0,
  /* 3041 */ 'm', 'o', 'v', 'i', '.', '2', 'd', 9, 0,
  /* 3050 */ 's', 'a', 'b', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3060 */ 'u', 'a', 'b', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3070 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3082 */ 's', 'm', 'l', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3092 */ 'u', 'm', 'l', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3102 */ 's', 's', 'u', 'b', 'l', '.', '2', 'd', 9, 0,
  /* 3112 */ 'u', 's', 'u', 'b', 'l', '.', '2', 'd', 9, 0,
  /* 3122 */ 's', 'a', 'b', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3132 */ 'u', 'a', 'b', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3142 */ 's', 'a', 'd', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3152 */ 'u', 'a', 'd', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3162 */ 's', 'q', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3172 */ 'u', 'q', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3182 */ 's', 'q', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3193 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3204 */ 's', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3214 */ 'u', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3224 */ 's', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3233 */ 'u', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3242 */ 's', 's', 'h', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3252 */ 'u', 's', 'h', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3262 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3274 */ 's', 'm', 'u', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3284 */ 'u', 'm', 'u', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3294 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', '2', 'd', 9, 0,
  /* 3306 */ 's', 'm', 'l', 's', 'l', '.', '2', 'd', 9, 0,
  /* 3316 */ 'u', 'm', 'l', 's', 'l', '.', '2', 'd', 9, 0,
  /* 3326 */ 'f', 'm', 'u', 'l', '.', '2', 'd', 9, 0,
  /* 3335 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '2', 'd', 9, 0,
  /* 3346 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '2', 'd', 9, 0,
  /* 3357 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '2', 'd', 9, 0,
  /* 3368 */ 'f', 'm', 'i', 'n', '.', '2', 'd', 9, 0,
  /* 3377 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '2', 'd', 9, 0,
  /* 3388 */ 'f', 'a', 'd', 'd', 'p', '.', '2', 'd', 9, 0,
  /* 3398 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 3409 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 3420 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 3431 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 3442 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '2', 'd', 9, 0,
  /* 3454 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '2', 'd', 9, 0,
  /* 3466 */ 'f', 'm', 'i', 'n', 'p', '.', '2', 'd', 9, 0,
  /* 3476 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '2', 'd', 9, 0,
  /* 3487 */ 'd', 'u', 'p', '.', '2', 'd', 9, 0,
  /* 3495 */ 'f', 'm', 'a', 'x', 'p', '.', '2', 'd', 9, 0,
  /* 3505 */ 'f', 'c', 'm', 'e', 'q', '.', '2', 'd', 9, 0,
  /* 3515 */ 's', 'r', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 3525 */ 'u', 'r', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 3535 */ 's', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 3544 */ 'u', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 3553 */ 'f', 'c', 'v', 't', 'a', 's', '.', '2', 'd', 9, 0,
  /* 3564 */ 'f', 'a', 'b', 's', '.', '2', 'd', 9, 0,
  /* 3573 */ 's', 'q', 'a', 'b', 's', '.', '2', 'd', 9, 0,
  /* 3583 */ 'c', 'm', 'h', 's', '.', '2', 'd', 9, 0,
  /* 3592 */ 'f', 'm', 'l', 's', '.', '2', 'd', 9, 0,
  /* 3601 */ 'f', 'c', 'v', 't', 'm', 's', '.', '2', 'd', 9, 0,
  /* 3612 */ 'f', 'c', 'v', 't', 'n', 's', '.', '2', 'd', 9, 0,
  /* 3623 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '2', 'd', 9, 0,
  /* 3634 */ 'f', 'c', 'v', 't', 'p', 's', '.', '2', 'd', 9, 0,
  /* 3645 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '2', 'd', 9, 0,
  /* 3657 */ 'f', 'c', 'v', 't', 'z', 's', '.', '2', 'd', 9, 0,
  /* 3668 */ 'f', 'a', 'c', 'g', 't', '.', '2', 'd', 9, 0,
  /* 3678 */ 'f', 'c', 'm', 'g', 't', '.', '2', 'd', 9, 0,
  /* 3688 */ 'f', 'c', 'm', 'l', 't', '.', '2', 'd', 9, 0,
  /* 3698 */ 'f', 's', 'q', 'r', 't', '.', '2', 'd', 9, 0,
  /* 3708 */ 'c', 'm', 't', 's', 't', '.', '2', 'd', 9, 0,
  /* 3718 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '2', 'd', 9, 0,
  /* 3729 */ 's', 'q', 's', 'h', 'l', 'u', '.', '2', 'd', 9, 0,
  /* 3740 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '2', 'd', 9, 0,
  /* 3751 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '2', 'd', 9, 0,
  /* 3762 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '2', 'd', 9, 0,
  /* 3773 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '2', 'd', 9, 0,
  /* 3784 */ 'f', 'd', 'i', 'v', '.', '2', 'd', 9, 0,
  /* 3793 */ 'f', 'm', 'o', 'v', '.', '2', 'd', 9, 0,
  /* 3802 */ 's', 's', 'u', 'b', 'w', '.', '2', 'd', 9, 0,
  /* 3812 */ 'u', 's', 'u', 'b', 'w', '.', '2', 'd', 9, 0,
  /* 3822 */ 's', 'a', 'd', 'd', 'w', '.', '2', 'd', 9, 0,
  /* 3832 */ 'u', 'a', 'd', 'd', 'w', '.', '2', 'd', 9, 0,
  /* 3842 */ 'f', 'm', 'a', 'x', '.', '2', 'd', 9, 0,
  /* 3851 */ 'f', 'm', 'u', 'l', 'x', '.', '2', 'd', 9, 0,
  /* 3861 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '2', 'd', 9, 0,
  /* 3872 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '2', 'd', 9, 0,
  /* 3883 */ 'f', 'a', 'b', 'd', 9, 0,
  /* 3889 */ 'f', 'a', 'd', 'd', 9, 0,
  /* 3895 */ 'f', 'm', 'a', 'd', 'd', 9, 0,
  /* 3902 */ 'f', 'n', 'm', 'a', 'd', 'd', 9, 0,
  /* 3910 */ 'u', 's', 'q', 'a', 'd', 'd', 9, 0,
  /* 3918 */ 's', 'u', 'q', 'a', 'd', 'd', 9, 0,
  /* 3926 */ 'a', 'n', 'd', 9, 0,
  /* 3931 */ 'f', 'a', 'c', 'g', 'e', 9, 0,
  /* 3938 */ 'f', 'c', 'm', 'g', 'e', 9, 0,
  /* 3945 */ 'f', 'c', 'm', 'l', 'e', 9, 0,
  /* 3952 */ 'f', 'r', 'e', 'c', 'p', 'e', 9, 0,
  /* 3960 */ 'f', 'c', 'c', 'm', 'p', 'e', 9, 0,
  /* 3968 */ 'f', 'c', 'm', 'p', 'e', 9, 0,
  /* 3975 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 9, 0,
  /* 3984 */ 's', 'c', 'v', 't', 'f', 9, 0,
  /* 3991 */ 'u', 'c', 'v', 't', 'f', 9, 0,
  /* 3998 */ 'f', 'n', 'e', 'g', 9, 0,
  /* 4004 */ 's', 'q', 'n', 'e', 'g', 9, 0,
  /* 4011 */ 'c', 's', 'n', 'e', 'g', 9, 0,
  /* 4018 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', 'h', 9, 0,
  /* 4029 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', 'h', 9, 0,
  /* 4041 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', 'h', 9, 0,
  /* 4052 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', 'h', 9, 0,
  /* 4063 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', 'h', 9, 0,
  /* 4074 */ 'i', 'n', 's', '.', 'h', 9, 0,
  /* 4081 */ 's', 'm', 'o', 'v', '.', 'h', 9, 0,
  /* 4089 */ 'u', 'm', 'o', 'v', '.', 'h', 9, 0,
  /* 4097 */ 's', 'h', 'a', '1', 'h', 9, 0,
  /* 4104 */ 'c', 'r', 'c', '3', '2', 'h', 9, 0,
  /* 4112 */ 't', 'r', 'n', '1', '.', '4', 'h', 9, 0,
  /* 4121 */ 'z', 'i', 'p', '1', '.', '4', 'h', 9, 0,
  /* 4130 */ 'u', 'z', 'p', '1', '.', '4', 'h', 9, 0,
  /* 4139 */ 'r', 'e', 'v', '3', '2', '.', '4', 'h', 9, 0,
  /* 4149 */ 't', 'r', 'n', '2', '.', '4', 'h', 9, 0,
  /* 4158 */ 'z', 'i', 'p', '2', '.', '4', 'h', 9, 0,
  /* 4167 */ 'u', 'z', 'p', '2', '.', '4', 'h', 9, 0,
  /* 4176 */ 'r', 'e', 'v', '6', '4', '.', '4', 'h', 9, 0,
  /* 4186 */ 's', 'a', 'b', 'a', '.', '4', 'h', 9, 0,
  /* 4195 */ 'u', 'a', 'b', 'a', '.', '4', 'h', 9, 0,
  /* 4204 */ 'm', 'l', 'a', '.', '4', 'h', 9, 0,
  /* 4212 */ 's', 'r', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 4222 */ 'u', 'r', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 4232 */ 's', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 4241 */ 'u', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 4250 */ 's', 'h', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 4260 */ 'u', 'h', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 4270 */ 's', 'q', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 4280 */ 'u', 'q', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 4290 */ 'b', 'i', 'c', '.', '4', 'h', 9, 0,
  /* 4298 */ 's', 'a', 'b', 'd', '.', '4', 'h', 9, 0,
  /* 4307 */ 'u', 'a', 'b', 'd', '.', '4', 'h', 9, 0,
  /* 4316 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4327 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4338 */ 's', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4348 */ 'u', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4358 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4369 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4380 */ 'c', 'm', 'g', 'e', '.', '4', 'h', 9, 0,
  /* 4389 */ 'c', 'm', 'l', 'e', '.', '4', 'h', 9, 0,
  /* 4398 */ 's', 'q', 'n', 'e', 'g', '.', '4', 'h', 9, 0,
  /* 4408 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '4', 'h', 9, 0,
  /* 4420 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '4', 'h', 9, 0,
  /* 4433 */ 'c', 'm', 'h', 'i', '.', '4', 'h', 9, 0,
  /* 4442 */ 's', 'l', 'i', '.', '4', 'h', 9, 0,
  /* 4450 */ 'm', 'v', 'n', 'i', '.', '4', 'h', 9, 0,
  /* 4459 */ 's', 'r', 'i', '.', '4', 'h', 9, 0,
  /* 4467 */ 'm', 'o', 'v', 'i', '.', '4', 'h', 9, 0,
  /* 4476 */ 's', 'q', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 4486 */ 'u', 'q', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 4496 */ 's', 'q', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 4507 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 4518 */ 's', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 4528 */ 'u', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 4538 */ 's', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 4547 */ 'u', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 4556 */ 'm', 'u', 'l', '.', '4', 'h', 9, 0,
  /* 4564 */ 'r', 's', 'u', 'b', 'h', 'n', '.', '4', 'h', 9, 0,
  /* 4575 */ 'r', 'a', 'd', 'd', 'h', 'n', '.', '4', 'h', 9, 0,
  /* 4586 */ 's', 'm', 'i', 'n', '.', '4', 'h', 9, 0,
  /* 4595 */ 'u', 'm', 'i', 'n', '.', '4', 'h', 9, 0,
  /* 4604 */ 's', 'q', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 4615 */ 'u', 'q', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 4626 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 4638 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 4650 */ 's', 'q', 'x', 't', 'n', '.', '4', 'h', 9, 0,
  /* 4660 */ 'u', 'q', 'x', 't', 'n', '.', '4', 'h', 9, 0,
  /* 4670 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '.', '4', 'h', 9, 0,
  /* 4682 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '.', '4', 'h', 9, 0,
  /* 4695 */ 's', 'q', 'x', 't', 'u', 'n', '.', '4', 'h', 9, 0,
  /* 4706 */ 'a', 'd', 'd', 'p', '.', '4', 'h', 9, 0,
  /* 4715 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 4726 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 4737 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 4748 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 4759 */ 's', 'm', 'i', 'n', 'p', '.', '4', 'h', 9, 0,
  /* 4769 */ 'u', 'm', 'i', 'n', 'p', '.', '4', 'h', 9, 0,
  /* 4779 */ 'd', 'u', 'p', '.', '4', 'h', 9, 0,
  /* 4787 */ 's', 'm', 'a', 'x', 'p', '.', '4', 'h', 9, 0,
  /* 4797 */ 'u', 'm', 'a', 'x', 'p', '.', '4', 'h', 9, 0,
  /* 4807 */ 'c', 'm', 'e', 'q', '.', '4', 'h', 9, 0,
  /* 4816 */ 's', 'r', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 4826 */ 'u', 'r', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 4836 */ 's', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 4845 */ 'u', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 4854 */ 'o', 'r', 'r', '.', '4', 'h', 9, 0,
  /* 4862 */ 's', 'q', 'a', 'b', 's', '.', '4', 'h', 9, 0,
  /* 4872 */ 'c', 'm', 'h', 's', '.', '4', 'h', 9, 0,
  /* 4881 */ 'c', 'l', 's', '.', '4', 'h', 9, 0,
  /* 4889 */ 'm', 'l', 's', '.', '4', 'h', 9, 0,
  /* 4897 */ 'c', 'm', 'g', 't', '.', '4', 'h', 9, 0,
  /* 4906 */ 'c', 'm', 'l', 't', '.', '4', 'h', 9, 0,
  /* 4915 */ 'c', 'm', 't', 's', 't', '.', '4', 'h', 9, 0,
  /* 4925 */ 's', 'q', 's', 'h', 'l', 'u', '.', '4', 'h', 9, 0,
  /* 4936 */ 'a', 'd', 'd', 'v', '.', '4', 'h', 9, 0,
  /* 4945 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '4', 'h', 9, 0,
  /* 4956 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '4', 'h', 9, 0,
  /* 4967 */ 's', 'm', 'i', 'n', 'v', '.', '4', 'h', 9, 0,
  /* 4977 */ 'u', 'm', 'i', 'n', 'v', '.', '4', 'h', 9, 0,
  /* 4987 */ 's', 'm', 'a', 'x', 'v', '.', '4', 'h', 9, 0,
  /* 4997 */ 'u', 'm', 'a', 'x', 'v', '.', '4', 'h', 9, 0,
  /* 5007 */ 's', 'm', 'a', 'x', '.', '4', 'h', 9, 0,
  /* 5016 */ 'u', 'm', 'a', 'x', '.', '4', 'h', 9, 0,
  /* 5025 */ 'c', 'l', 'z', '.', '4', 'h', 9, 0,
  /* 5033 */ 't', 'r', 'n', '1', '.', '8', 'h', 9, 0,
  /* 5042 */ 'z', 'i', 'p', '1', '.', '8', 'h', 9, 0,
  /* 5051 */ 'u', 'z', 'p', '1', '.', '8', 'h', 9, 0,
  /* 5060 */ 'r', 'e', 'v', '3', '2', '.', '8', 'h', 9, 0,
  /* 5070 */ 's', 'a', 'b', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5081 */ 'u', 'a', 'b', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5092 */ 's', 'm', 'l', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5103 */ 'u', 'm', 'l', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5114 */ 's', 's', 'u', 'b', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5125 */ 'u', 's', 'u', 'b', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5136 */ 's', 'a', 'b', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5147 */ 'u', 'a', 'b', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5158 */ 's', 'a', 'd', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5169 */ 'u', 'a', 'd', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5180 */ 's', 's', 'h', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5191 */ 'u', 's', 'h', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5202 */ 'p', 'm', 'u', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5213 */ 's', 'm', 'u', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5224 */ 'u', 'm', 'u', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5235 */ 's', 'm', 'l', 's', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5246 */ 'u', 'm', 'l', 's', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5257 */ 'r', 's', 'u', 'b', 'h', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5269 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5281 */ 's', 'q', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5293 */ 'u', 'q', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5305 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5318 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5331 */ 't', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5340 */ 's', 'q', 'x', 't', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5351 */ 'u', 'q', 'x', 't', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5362 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5375 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5389 */ 's', 'q', 'x', 't', 'u', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5401 */ 'z', 'i', 'p', '2', '.', '8', 'h', 9, 0,
  /* 5410 */ 'u', 'z', 'p', '2', '.', '8', 'h', 9, 0,
  /* 5419 */ 's', 's', 'u', 'b', 'w', '2', '.', '8', 'h', 9, 0,
  /* 5430 */ 'u', 's', 'u', 'b', 'w', '2', '.', '8', 'h', 9, 0,
  /* 5441 */ 's', 'a', 'd', 'd', 'w', '2', '.', '8', 'h', 9, 0,
  /* 5452 */ 'u', 'a', 'd', 'd', 'w', '2', '.', '8', 'h', 9, 0,
  /* 5463 */ 'r', 'e', 'v', '6', '4', '.', '8', 'h', 9, 0,
  /* 5473 */ 's', 'a', 'b', 'a', '.', '8', 'h', 9, 0,
  /* 5482 */ 'u', 'a', 'b', 'a', '.', '8', 'h', 9, 0,
  /* 5491 */ 'm', 'l', 'a', '.', '8', 'h', 9, 0,
  /* 5499 */ 's', 'r', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 5509 */ 'u', 'r', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 5519 */ 's', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 5528 */ 'u', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 5537 */ 's', 'h', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 5547 */ 'u', 'h', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 5557 */ 's', 'q', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 5567 */ 'u', 'q', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 5577 */ 'b', 'i', 'c', '.', '8', 'h', 9, 0,
  /* 5585 */ 's', 'a', 'b', 'd', '.', '8', 'h', 9, 0,
  /* 5594 */ 'u', 'a', 'b', 'd', '.', '8', 'h', 9, 0,
  /* 5603 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 5614 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 5625 */ 's', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 5635 */ 'u', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 5645 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 5656 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 5667 */ 'c', 'm', 'g', 'e', '.', '8', 'h', 9, 0,
  /* 5676 */ 'c', 'm', 'l', 'e', '.', '8', 'h', 9, 0,
  /* 5685 */ 's', 'q', 'n', 'e', 'g', '.', '8', 'h', 9, 0,
  /* 5695 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '8', 'h', 9, 0,
  /* 5707 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '8', 'h', 9, 0,
  /* 5720 */ 'c', 'm', 'h', 'i', '.', '8', 'h', 9, 0,
  /* 5729 */ 's', 'l', 'i', '.', '8', 'h', 9, 0,
  /* 5737 */ 'm', 'v', 'n', 'i', '.', '8', 'h', 9, 0,
  /* 5746 */ 's', 'r', 'i', '.', '8', 'h', 9, 0,
  /* 5754 */ 'm', 'o', 'v', 'i', '.', '8', 'h', 9, 0,
  /* 5763 */ 's', 'a', 'b', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 5773 */ 'u', 'a', 'b', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 5783 */ 's', 'm', 'l', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 5793 */ 'u', 'm', 'l', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 5803 */ 's', 's', 'u', 'b', 'l', '.', '8', 'h', 9, 0,
  /* 5813 */ 'u', 's', 'u', 'b', 'l', '.', '8', 'h', 9, 0,
  /* 5823 */ 's', 'a', 'b', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 5833 */ 'u', 'a', 'b', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 5843 */ 's', 'a', 'd', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 5853 */ 'u', 'a', 'd', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 5863 */ 's', 'q', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 5873 */ 'u', 'q', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 5883 */ 's', 'q', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 5894 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 5905 */ 's', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 5915 */ 'u', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 5925 */ 's', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 5934 */ 'u', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 5943 */ 's', 's', 'h', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 5953 */ 'u', 's', 'h', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 5963 */ 'p', 'm', 'u', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 5973 */ 's', 'm', 'u', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 5983 */ 'u', 'm', 'u', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 5993 */ 's', 'm', 'l', 's', 'l', '.', '8', 'h', 9, 0,
  /* 6003 */ 'u', 'm', 'l', 's', 'l', '.', '8', 'h', 9, 0,
  /* 6013 */ 'm', 'u', 'l', '.', '8', 'h', 9, 0,
  /* 6021 */ 's', 'm', 'i', 'n', '.', '8', 'h', 9, 0,
  /* 6030 */ 'u', 'm', 'i', 'n', '.', '8', 'h', 9, 0,
  /* 6039 */ 'a', 'd', 'd', 'p', '.', '8', 'h', 9, 0,
  /* 6048 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 6059 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 6070 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 6081 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 6092 */ 's', 'm', 'i', 'n', 'p', '.', '8', 'h', 9, 0,
  /* 6102 */ 'u', 'm', 'i', 'n', 'p', '.', '8', 'h', 9, 0,
  /* 6112 */ 'd', 'u', 'p', '.', '8', 'h', 9, 0,
  /* 6120 */ 's', 'm', 'a', 'x', 'p', '.', '8', 'h', 9, 0,
  /* 6130 */ 'u', 'm', 'a', 'x', 'p', '.', '8', 'h', 9, 0,
  /* 6140 */ 'c', 'm', 'e', 'q', '.', '8', 'h', 9, 0,
  /* 6149 */ 's', 'r', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 6159 */ 'u', 'r', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 6169 */ 's', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 6178 */ 'u', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 6187 */ 'o', 'r', 'r', '.', '8', 'h', 9, 0,
  /* 6195 */ 's', 'q', 'a', 'b', 's', '.', '8', 'h', 9, 0,
  /* 6205 */ 'c', 'm', 'h', 's', '.', '8', 'h', 9, 0,
  /* 6214 */ 'c', 'l', 's', '.', '8', 'h', 9, 0,
  /* 6222 */ 'm', 'l', 's', '.', '8', 'h', 9, 0,
  /* 6230 */ 'c', 'm', 'g', 't', '.', '8', 'h', 9, 0,
  /* 6239 */ 'c', 'm', 'l', 't', '.', '8', 'h', 9, 0,
  /* 6248 */ 'c', 'm', 't', 's', 't', '.', '8', 'h', 9, 0,
  /* 6258 */ 's', 'q', 's', 'h', 'l', 'u', '.', '8', 'h', 9, 0,
  /* 6269 */ 'a', 'd', 'd', 'v', '.', '8', 'h', 9, 0,
  /* 6278 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '8', 'h', 9, 0,
  /* 6289 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '8', 'h', 9, 0,
  /* 6300 */ 's', 'm', 'i', 'n', 'v', '.', '8', 'h', 9, 0,
  /* 6310 */ 'u', 'm', 'i', 'n', 'v', '.', '8', 'h', 9, 0,
  /* 6320 */ 's', 'm', 'a', 'x', 'v', '.', '8', 'h', 9, 0,
  /* 6330 */ 'u', 'm', 'a', 'x', 'v', '.', '8', 'h', 9, 0,
  /* 6340 */ 's', 's', 'u', 'b', 'w', '.', '8', 'h', 9, 0,
  /* 6350 */ 'u', 's', 'u', 'b', 'w', '.', '8', 'h', 9, 0,
  /* 6360 */ 's', 'a', 'd', 'd', 'w', '.', '8', 'h', 9, 0,
  /* 6370 */ 'u', 'a', 'd', 'd', 'w', '.', '8', 'h', 9, 0,
  /* 6380 */ 's', 'm', 'a', 'x', '.', '8', 'h', 9, 0,
  /* 6389 */ 'u', 'm', 'a', 'x', '.', '8', 'h', 9, 0,
  /* 6398 */ 'c', 'l', 'z', '.', '8', 'h', 9, 0,
  /* 6406 */ 'c', 'r', 'c', '3', '2', 'c', 'h', 9, 0,
  /* 6415 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 6424 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 6434 */ 's', 'm', 'u', 'l', 'h', 9, 0,
  /* 6441 */ 'u', 'm', 'u', 'l', 'h', 9, 0,
  /* 6448 */ 'l', 'd', 'a', 'r', 'h', 9, 0,
  /* 6455 */ 'l', 'd', 'r', 'h', 9, 0,
  /* 6461 */ 's', 't', 'l', 'r', 'h', 9, 0,
  /* 6468 */ 'l', 'd', 't', 'r', 'h', 9, 0,
  /* 6475 */ 's', 't', 'r', 'h', 9, 0,
  /* 6481 */ 's', 't', 't', 'r', 'h', 9, 0,
  /* 6488 */ 'l', 'd', 'u', 'r', 'h', 9, 0,
  /* 6495 */ 's', 't', 'u', 'r', 'h', 9, 0,
  /* 6502 */ 'l', 'd', 'a', 'x', 'r', 'h', 9, 0,
  /* 6510 */ 'l', 'd', 'x', 'r', 'h', 9, 0,
  /* 6517 */ 's', 't', 'l', 'x', 'r', 'h', 9, 0,
  /* 6525 */ 's', 't', 'x', 'r', 'h', 9, 0,
  /* 6532 */ 'l', 'd', 'r', 's', 'h', 9, 0,
  /* 6539 */ 'l', 'd', 't', 'r', 's', 'h', 9, 0,
  /* 6547 */ 'l', 'd', 'u', 'r', 's', 'h', 9, 0,
  /* 6555 */ 'c', 'm', 'h', 'i', 9, 0,
  /* 6561 */ 's', 'l', 'i', 9, 0,
  /* 6566 */ 's', 'r', 'i', 9, 0,
  /* 6571 */ 'f', 'r', 'i', 'n', 't', 'i', 9, 0,
  /* 6579 */ 'm', 'o', 'v', 'i', 9, 0,
  /* 6585 */ 'b', 'r', 'k', 9, 0,
  /* 6590 */ 'm', 'o', 'v', 'k', 9, 0,
  /* 6596 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', 9, 0,
  /* 6605 */ 't', 'b', 'l', 9, 0,
  /* 6610 */ 's', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 6618 */ 'u', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 6626 */ 's', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 6634 */ 'u', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 6642 */ 'f', 'c', 's', 'e', 'l', 9, 0,
  /* 6649 */ 's', 'q', 's', 'h', 'l', 9, 0,
  /* 6656 */ 'u', 'q', 's', 'h', 'l', 9, 0,
  /* 6663 */ 's', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 6671 */ 'u', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 6679 */ 's', 'r', 's', 'h', 'l', 9, 0,
  /* 6686 */ 'u', 'r', 's', 'h', 'l', 9, 0,
  /* 6693 */ 's', 's', 'h', 'l', 9, 0,
  /* 6699 */ 'u', 's', 'h', 'l', 9, 0,
  /* 6705 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', 9, 0,
  /* 6714 */ 's', 'q', 'd', 'm', 'l', 's', 'l', 9, 0,
  /* 6723 */ 's', 'y', 's', 'l', 9, 0,
  /* 6729 */ 'f', 'c', 'v', 't', 'l', 9, 0,
  /* 6736 */ 'f', 'm', 'u', 'l', 9, 0,
  /* 6742 */ 'f', 'n', 'm', 'u', 'l', 9, 0,
  /* 6749 */ 's', 'b', 'f', 'm', 9, 0,
  /* 6755 */ 'u', 'b', 'f', 'm', 9, 0,
  /* 6761 */ 'p', 'r', 'f', 'm', 9, 0,
  /* 6767 */ 'f', 'm', 'i', 'n', 'n', 'm', 9, 0,
  /* 6775 */ 'f', 'm', 'a', 'x', 'n', 'm', 9, 0,
  /* 6783 */ 'f', 'r', 'i', 'n', 't', 'm', 9, 0,
  /* 6791 */ 'p', 'r', 'f', 'u', 'm', 9, 0,
  /* 6798 */ 'f', 'm', 'i', 'n', 9, 0,
  /* 6804 */ 'c', 'c', 'm', 'n', 9, 0,
  /* 6810 */ 'e', 'o', 'n', 9, 0,
  /* 6815 */ 's', 'q', 's', 'h', 'r', 'n', 9, 0,
  /* 6823 */ 'u', 'q', 's', 'h', 'r', 'n', 9, 0,
  /* 6831 */ 's', 'q', 'r', 's', 'h', 'r', 'n', 9, 0,
  /* 6840 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', 9, 0,
  /* 6849 */ 'o', 'r', 'n', 9, 0,
  /* 6854 */ 'f', 'r', 'i', 'n', 't', 'n', 9, 0,
  /* 6862 */ 'f', 'c', 'v', 't', 'n', 9, 0,
  /* 6869 */ 's', 'q', 'x', 't', 'n', 9, 0,
  /* 6876 */ 'u', 'q', 'x', 't', 'n', 9, 0,
  /* 6883 */ 's', 'q', 's', 'h', 'r', 'u', 'n', 9, 0,
  /* 6892 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', 9, 0,
  /* 6902 */ 's', 'q', 'x', 't', 'u', 'n', 9, 0,
  /* 6910 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 6916 */ 'f', 'c', 'v', 't', 'x', 'n', 9, 0,
  /* 6924 */ 'l', 'd', 'p', 9, 0,
  /* 6929 */ 'f', 'c', 'c', 'm', 'p', 9, 0,
  /* 6936 */ 'f', 'c', 'm', 'p', 9, 0,
  /* 6942 */ 'l', 'd', 'n', 'p', 9, 0,
  /* 6948 */ 's', 't', 'n', 'p', 9, 0,
  /* 6954 */ 'a', 'd', 'r', 'p', 9, 0,
  /* 6960 */ 'f', 'r', 'i', 'n', 't', 'p', 9, 0,
  /* 6968 */ 's', 't', 'p', 9, 0,
  /* 6973 */ 'l', 'd', 'a', 'x', 'p', 9, 0,
  /* 6980 */ 'l', 'd', 'x', 'p', 9, 0,
  /* 6986 */ 's', 't', 'l', 'x', 'p', 9, 0,
  /* 6993 */ 's', 't', 'x', 'p', 9, 0,
  /* 6999 */ 'p', 'm', 'u', 'l', 'l', '2', '.', '1', 'q', 9, 0,
  /* 7010 */ 'p', 'm', 'u', 'l', 'l', '.', '1', 'q', 9, 0,
  /* 7020 */ 'f', 'c', 'm', 'e', 'q', 9, 0,
  /* 7027 */ 'l', 'd', '1', 'r', 9, 0,
  /* 7033 */ 'l', 'd', '2', 'r', 9, 0,
  /* 7039 */ 'l', 'd', '3', 'r', 9, 0,
  /* 7045 */ 'l', 'd', '4', 'r', 9, 0,
  /* 7051 */ 'l', 'd', 'a', 'r', 9, 0,
  /* 7057 */ 'b', 'r', 9, 0,
  /* 7061 */ 'a', 'd', 'r', 9, 0,
  /* 7066 */ 'l', 'd', 'r', 9, 0,
  /* 7071 */ 's', 'r', 's', 'h', 'r', 9, 0,
  /* 7078 */ 'u', 'r', 's', 'h', 'r', 9, 0,
  /* 7085 */ 's', 's', 'h', 'r', 9, 0,
  /* 7091 */ 'u', 's', 'h', 'r', 9, 0,
  /* 7097 */ 'b', 'l', 'r', 9, 0,
  /* 7102 */ 's', 't', 'l', 'r', 9, 0,
  /* 7108 */ 'e', 'o', 'r', 9, 0,
  /* 7113 */ 'r', 'o', 'r', 9, 0,
  /* 7118 */ 'o', 'r', 'r', 9, 0,
  /* 7123 */ 'a', 's', 'r', 9, 0,
  /* 7128 */ 'l', 's', 'r', 9, 0,
  /* 7133 */ 'm', 's', 'r', 9, 0,
  /* 7138 */ 'l', 'd', 't', 'r', 9, 0,
  /* 7144 */ 's', 't', 'r', 9, 0,
  /* 7149 */ 's', 't', 't', 'r', 9, 0,
  /* 7155 */ 'e', 'x', 't', 'r', 9, 0,
  /* 7161 */ 'l', 'd', 'u', 'r', 9, 0,
  /* 7167 */ 's', 't', 'u', 'r', 9, 0,
  /* 7173 */ 'l', 'd', 'a', 'x', 'r', 9, 0,
  /* 7180 */ 'l', 'd', 'x', 'r', 9, 0,
  /* 7186 */ 's', 't', 'l', 'x', 'r', 9, 0,
  /* 7193 */ 's', 't', 'x', 'r', 9, 0,
  /* 7199 */ 'f', 'm', 'l', 'a', '.', 's', 9, 0,
  /* 7207 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', 's', 9, 0,
  /* 7218 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', 's', 9, 0,
  /* 7230 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', 's', 9, 0,
  /* 7241 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', 's', 9, 0,
  /* 7252 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', 's', 9, 0,
  /* 7263 */ 'f', 'm', 'u', 'l', '.', 's', 9, 0,
  /* 7271 */ 'f', 'm', 'l', 's', '.', 's', 9, 0,
  /* 7279 */ 'i', 'n', 's', '.', 's', 9, 0,
  /* 7286 */ 's', 'm', 'o', 'v', '.', 's', 9, 0,
  /* 7294 */ 'u', 'm', 'o', 'v', '.', 's', 9, 0,
  /* 7302 */ 'f', 'm', 'u', 'l', 'x', '.', 's', 9, 0,
  /* 7311 */ 't', 'r', 'n', '1', '.', '2', 's', 9, 0,
  /* 7320 */ 'z', 'i', 'p', '1', '.', '2', 's', 9, 0,
  /* 7329 */ 'u', 'z', 'p', '1', '.', '2', 's', 9, 0,
  /* 7338 */ 't', 'r', 'n', '2', '.', '2', 's', 9, 0,
  /* 7347 */ 'z', 'i', 'p', '2', '.', '2', 's', 9, 0,
  /* 7356 */ 'u', 'z', 'p', '2', '.', '2', 's', 9, 0,
  /* 7365 */ 'r', 'e', 'v', '6', '4', '.', '2', 's', 9, 0,
  /* 7375 */ 's', 'a', 'b', 'a', '.', '2', 's', 9, 0,
  /* 7384 */ 'u', 'a', 'b', 'a', '.', '2', 's', 9, 0,
  /* 7393 */ 'f', 'm', 'l', 'a', '.', '2', 's', 9, 0,
  /* 7402 */ 's', 'r', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 7412 */ 'u', 'r', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 7422 */ 's', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 7431 */ 'u', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 7440 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '2', 's', 9, 0,
  /* 7451 */ 'f', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 7460 */ 's', 'h', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 7470 */ 'u', 'h', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 7480 */ 's', 'q', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 7490 */ 'u', 'q', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 7500 */ 'b', 'i', 'c', '.', '2', 's', 9, 0,
  /* 7508 */ 'f', 'a', 'b', 'd', '.', '2', 's', 9, 0,
  /* 7517 */ 's', 'a', 'b', 'd', '.', '2', 's', 9, 0,
  /* 7526 */ 'u', 'a', 'b', 'd', '.', '2', 's', 9, 0,
  /* 7535 */ 'f', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 7544 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 7555 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 7566 */ 's', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 7576 */ 'u', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 7586 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 7597 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 7608 */ 'f', 'a', 'c', 'g', 'e', '.', '2', 's', 9, 0,
  /* 7618 */ 'f', 'c', 'm', 'g', 'e', '.', '2', 's', 9, 0,
  /* 7628 */ 'f', 'c', 'm', 'l', 'e', '.', '2', 's', 9, 0,
  /* 7638 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '2', 's', 9, 0,
  /* 7649 */ 'u', 'r', 'e', 'c', 'p', 'e', '.', '2', 's', 9, 0,
  /* 7660 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '2', 's', 9, 0,
  /* 7672 */ 'u', 'r', 's', 'q', 'r', 't', 'e', '.', '2', 's', 9, 0,
  /* 7684 */ 's', 'c', 'v', 't', 'f', '.', '2', 's', 9, 0,
  /* 7694 */ 'u', 'c', 'v', 't', 'f', '.', '2', 's', 9, 0,
  /* 7704 */ 'f', 'n', 'e', 'g', '.', '2', 's', 9, 0,
  /* 7713 */ 's', 'q', 'n', 'e', 'g', '.', '2', 's', 9, 0,
  /* 7723 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '2', 's', 9, 0,
  /* 7735 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '2', 's', 9, 0,
  /* 7748 */ 'c', 'm', 'h', 'i', '.', '2', 's', 9, 0,
  /* 7757 */ 's', 'l', 'i', '.', '2', 's', 9, 0,
  /* 7765 */ 'm', 'v', 'n', 'i', '.', '2', 's', 9, 0,
  /* 7774 */ 's', 'r', 'i', '.', '2', 's', 9, 0,
  /* 7782 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '2', 's', 9, 0,
  /* 7793 */ 'm', 'o', 'v', 'i', '.', '2', 's', 9, 0,
  /* 7802 */ 's', 'q', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 7812 */ 'u', 'q', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 7822 */ 's', 'q', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 7833 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 7844 */ 's', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 7854 */ 'u', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 7864 */ 's', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 7873 */ 'u', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 7882 */ 'f', 'm', 'u', 'l', '.', '2', 's', 9, 0,
  /* 7891 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '2', 's', 9, 0,
  /* 7902 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '2', 's', 9, 0,
  /* 7913 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '2', 's', 9, 0,
  /* 7924 */ 'r', 's', 'u', 'b', 'h', 'n', '.', '2', 's', 9, 0,
  /* 7935 */ 'r', 'a', 'd', 'd', 'h', 'n', '.', '2', 's', 9, 0,
  /* 7946 */ 'f', 'm', 'i', 'n', '.', '2', 's', 9, 0,
  /* 7955 */ 's', 'm', 'i', 'n', '.', '2', 's', 9, 0,
  /* 7964 */ 'u', 'm', 'i', 'n', '.', '2', 's', 9, 0,
  /* 7973 */ 's', 'q', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 7984 */ 'u', 'q', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 7995 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 8007 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 8019 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '2', 's', 9, 0,
  /* 8030 */ 's', 'q', 'x', 't', 'n', '.', '2', 's', 9, 0,
  /* 8040 */ 'u', 'q', 'x', 't', 'n', '.', '2', 's', 9, 0,
  /* 8050 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '.', '2', 's', 9, 0,
  /* 8062 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '.', '2', 's', 9, 0,
  /* 8075 */ 's', 'q', 'x', 't', 'u', 'n', '.', '2', 's', 9, 0,
  /* 8086 */ 'f', 'a', 'd', 'd', 'p', '.', '2', 's', 9, 0,
  /* 8096 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '2', 's', 9, 0,
  /* 8107 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '2', 's', 9, 0,
  /* 8118 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '2', 's', 9, 0,
  /* 8129 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '2', 's', 9, 0,
  /* 8140 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '2', 's', 9, 0,
  /* 8152 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '2', 's', 9, 0,
  /* 8164 */ 'f', 'm', 'i', 'n', 'p', '.', '2', 's', 9, 0,
  /* 8174 */ 's', 'm', 'i', 'n', 'p', '.', '2', 's', 9, 0,
  /* 8184 */ 'u', 'm', 'i', 'n', 'p', '.', '2', 's', 9, 0,
  /* 8194 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '2', 's', 9, 0,
  /* 8205 */ 'd', 'u', 'p', '.', '2', 's', 9, 0,
  /* 8213 */ 'f', 'm', 'a', 'x', 'p', '.', '2', 's', 9, 0,
  /* 8223 */ 's', 'm', 'a', 'x', 'p', '.', '2', 's', 9, 0,
  /* 8233 */ 'u', 'm', 'a', 'x', 'p', '.', '2', 's', 9, 0,
  /* 8243 */ 'f', 'c', 'm', 'e', 'q', '.', '2', 's', 9, 0,
  /* 8253 */ 's', 'r', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 8263 */ 'u', 'r', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 8273 */ 's', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 8282 */ 'u', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 8291 */ 'o', 'r', 'r', '.', '2', 's', 9, 0,
  /* 8299 */ 'f', 'c', 'v', 't', 'a', 's', '.', '2', 's', 9, 0,
  /* 8310 */ 'f', 'a', 'b', 's', '.', '2', 's', 9, 0,
  /* 8319 */ 's', 'q', 'a', 'b', 's', '.', '2', 's', 9, 0,
  /* 8329 */ 'c', 'm', 'h', 's', '.', '2', 's', 9, 0,
  /* 8338 */ 'c', 'l', 's', '.', '2', 's', 9, 0,
  /* 8346 */ 'f', 'm', 'l', 's', '.', '2', 's', 9, 0,
  /* 8355 */ 'f', 'c', 'v', 't', 'm', 's', '.', '2', 's', 9, 0,
  /* 8366 */ 'f', 'c', 'v', 't', 'n', 's', '.', '2', 's', 9, 0,
  /* 8377 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '2', 's', 9, 0,
  /* 8388 */ 'f', 'c', 'v', 't', 'p', 's', '.', '2', 's', 9, 0,
  /* 8399 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '2', 's', 9, 0,
  /* 8411 */ 'f', 'c', 'v', 't', 'z', 's', '.', '2', 's', 9, 0,
  /* 8422 */ 'f', 'a', 'c', 'g', 't', '.', '2', 's', 9, 0,
  /* 8432 */ 'f', 'c', 'm', 'g', 't', '.', '2', 's', 9, 0,
  /* 8442 */ 'f', 'c', 'm', 'l', 't', '.', '2', 's', 9, 0,
  /* 8452 */ 'f', 's', 'q', 'r', 't', '.', '2', 's', 9, 0,
  /* 8462 */ 'c', 'm', 't', 's', 't', '.', '2', 's', 9, 0,
  /* 8472 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '2', 's', 9, 0,
  /* 8483 */ 's', 'q', 's', 'h', 'l', 'u', '.', '2', 's', 9, 0,
  /* 8494 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '2', 's', 9, 0,
  /* 8505 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '2', 's', 9, 0,
  /* 8516 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '2', 's', 9, 0,
  /* 8527 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '2', 's', 9, 0,
  /* 8538 */ 'f', 'd', 'i', 'v', '.', '2', 's', 9, 0,
  /* 8547 */ 'f', 'm', 'o', 'v', '.', '2', 's', 9, 0,
  /* 8556 */ 'f', 'm', 'a', 'x', '.', '2', 's', 9, 0,
  /* 8565 */ 's', 'm', 'a', 'x', '.', '2', 's', 9, 0,
  /* 8574 */ 'u', 'm', 'a', 'x', '.', '2', 's', 9, 0,
  /* 8583 */ 'f', 'm', 'u', 'l', 'x', '.', '2', 's', 9, 0,
  /* 8593 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '2', 's', 9, 0,
  /* 8604 */ 'c', 'l', 'z', '.', '2', 's', 9, 0,
  /* 8612 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '2', 's', 9, 0,
  /* 8623 */ 's', 'h', 'a', '1', 's', 'u', '0', '.', '4', 's', 9, 0,
  /* 8635 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '0', '.', '4', 's', 9, 0,
  /* 8649 */ 't', 'r', 'n', '1', '.', '4', 's', 9, 0,
  /* 8658 */ 'z', 'i', 'p', '1', '.', '4', 's', 9, 0,
  /* 8667 */ 'u', 'z', 'p', '1', '.', '4', 's', 9, 0,
  /* 8676 */ 's', 'h', 'a', '1', 's', 'u', '1', '.', '4', 's', 9, 0,
  /* 8688 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '1', '.', '4', 's', 9, 0,
  /* 8702 */ 's', 'h', 'a', '2', '5', '6', 'h', '2', '.', '4', 's', 9, 0,
  /* 8715 */ 's', 'a', 'b', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 8726 */ 'u', 'a', 'b', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 8737 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 8750 */ 's', 'm', 'l', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 8761 */ 'u', 'm', 'l', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 8772 */ 's', 's', 'u', 'b', 'l', '2', '.', '4', 's', 9, 0,
  /* 8783 */ 'u', 's', 'u', 'b', 'l', '2', '.', '4', 's', 9, 0,
  /* 8794 */ 's', 'a', 'b', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 8805 */ 'u', 'a', 'b', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 8816 */ 's', 'a', 'd', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 8827 */ 'u', 'a', 'd', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 8838 */ 's', 's', 'h', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 8849 */ 'u', 's', 'h', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 8860 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 8873 */ 's', 'm', 'u', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 8884 */ 'u', 'm', 'u', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 8895 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '2', '.', '4', 's', 9, 0,
  /* 8908 */ 's', 'm', 'l', 's', 'l', '2', '.', '4', 's', 9, 0,
  /* 8919 */ 'u', 'm', 'l', 's', 'l', '2', '.', '4', 's', 9, 0,
  /* 8930 */ 'r', 's', 'u', 'b', 'h', 'n', '2', '.', '4', 's', 9, 0,
  /* 8942 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', '.', '4', 's', 9, 0,
  /* 8954 */ 's', 'q', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 8966 */ 'u', 'q', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 8978 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 8991 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 9004 */ 't', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 9013 */ 's', 'q', 'x', 't', 'n', '2', '.', '4', 's', 9, 0,
  /* 9024 */ 'u', 'q', 'x', 't', 'n', '2', '.', '4', 's', 9, 0,
  /* 9035 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', '.', '4', 's', 9, 0,
  /* 9048 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', '.', '4', 's', 9, 0,
  /* 9062 */ 's', 'q', 'x', 't', 'u', 'n', '2', '.', '4', 's', 9, 0,
  /* 9074 */ 'z', 'i', 'p', '2', '.', '4', 's', 9, 0,
  /* 9083 */ 'u', 'z', 'p', '2', '.', '4', 's', 9, 0,
  /* 9092 */ 's', 's', 'u', 'b', 'w', '2', '.', '4', 's', 9, 0,
  /* 9103 */ 'u', 's', 'u', 'b', 'w', '2', '.', '4', 's', 9, 0,
  /* 9114 */ 's', 'a', 'd', 'd', 'w', '2', '.', '4', 's', 9, 0,
  /* 9125 */ 'u', 'a', 'd', 'd', 'w', '2', '.', '4', 's', 9, 0,
  /* 9136 */ 'r', 'e', 'v', '6', '4', '.', '4', 's', 9, 0,
  /* 9146 */ 's', 'a', 'b', 'a', '.', '4', 's', 9, 0,
  /* 9155 */ 'u', 'a', 'b', 'a', '.', '4', 's', 9, 0,
  /* 9164 */ 'f', 'm', 'l', 'a', '.', '4', 's', 9, 0,
  /* 9173 */ 's', 'r', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 9183 */ 'u', 'r', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 9193 */ 's', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 9202 */ 'u', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 9211 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '4', 's', 9, 0,
  /* 9222 */ 'f', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 9231 */ 's', 'h', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 9241 */ 'u', 'h', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 9251 */ 's', 'q', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 9261 */ 'u', 'q', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 9271 */ 's', 'h', 'a', '1', 'c', '.', '4', 's', 9, 0,
  /* 9281 */ 'b', 'i', 'c', '.', '4', 's', 9, 0,
  /* 9289 */ 'f', 'a', 'b', 'd', '.', '4', 's', 9, 0,
  /* 9298 */ 's', 'a', 'b', 'd', '.', '4', 's', 9, 0,
  /* 9307 */ 'u', 'a', 'b', 'd', '.', '4', 's', 9, 0,
  /* 9316 */ 'f', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 9325 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 9336 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 9347 */ 's', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 9357 */ 'u', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 9367 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 9378 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 9389 */ 'f', 'a', 'c', 'g', 'e', '.', '4', 's', 9, 0,
  /* 9399 */ 'f', 'c', 'm', 'g', 'e', '.', '4', 's', 9, 0,
  /* 9409 */ 'f', 'c', 'm', 'l', 'e', '.', '4', 's', 9, 0,
  /* 9419 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '4', 's', 9, 0,
  /* 9430 */ 'u', 'r', 'e', 'c', 'p', 'e', '.', '4', 's', 9, 0,
  /* 9441 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '4', 's', 9, 0,
  /* 9453 */ 'u', 'r', 's', 'q', 'r', 't', 'e', '.', '4', 's', 9, 0,
  /* 9465 */ 's', 'c', 'v', 't', 'f', '.', '4', 's', 9, 0,
  /* 9475 */ 'u', 'c', 'v', 't', 'f', '.', '4', 's', 9, 0,
  /* 9485 */ 'f', 'n', 'e', 'g', '.', '4', 's', 9, 0,
  /* 9494 */ 's', 'q', 'n', 'e', 'g', '.', '4', 's', 9, 0,
  /* 9504 */ 's', 'h', 'a', '2', '5', '6', 'h', '.', '4', 's', 9, 0,
  /* 9516 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '4', 's', 9, 0,
  /* 9528 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '4', 's', 9, 0,
  /* 9541 */ 'c', 'm', 'h', 'i', '.', '4', 's', 9, 0,
  /* 9550 */ 's', 'l', 'i', '.', '4', 's', 9, 0,
  /* 9558 */ 'm', 'v', 'n', 'i', '.', '4', 's', 9, 0,
  /* 9567 */ 's', 'r', 'i', '.', '4', 's', 9, 0,
  /* 9575 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '4', 's', 9, 0,
  /* 9586 */ 'm', 'o', 'v', 'i', '.', '4', 's', 9, 0,
  /* 9595 */ 's', 'a', 'b', 'a', 'l', '.', '4', 's', 9, 0,
  /* 9605 */ 'u', 'a', 'b', 'a', 'l', '.', '4', 's', 9, 0,
  /* 9615 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', '4', 's', 9, 0,
  /* 9627 */ 's', 'm', 'l', 'a', 'l', '.', '4', 's', 9, 0,
  /* 9637 */ 'u', 'm', 'l', 'a', 'l', '.', '4', 's', 9, 0,
  /* 9647 */ 's', 's', 'u', 'b', 'l', '.', '4', 's', 9, 0,
  /* 9657 */ 'u', 's', 'u', 'b', 'l', '.', '4', 's', 9, 0,
  /* 9667 */ 's', 'a', 'b', 'd', 'l', '.', '4', 's', 9, 0,
  /* 9677 */ 'u', 'a', 'b', 'd', 'l', '.', '4', 's', 9, 0,
  /* 9687 */ 's', 'a', 'd', 'd', 'l', '.', '4', 's', 9, 0,
  /* 9697 */ 'u', 'a', 'd', 'd', 'l', '.', '4', 's', 9, 0,
  /* 9707 */ 's', 'q', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 9717 */ 'u', 'q', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 9727 */ 's', 'q', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 9738 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 9749 */ 's', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 9759 */ 'u', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 9769 */ 's', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 9778 */ 'u', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 9787 */ 's', 's', 'h', 'l', 'l', '.', '4', 's', 9, 0,
  /* 9797 */ 'u', 's', 'h', 'l', 'l', '.', '4', 's', 9, 0,
  /* 9807 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', '4', 's', 9, 0,
  /* 9819 */ 's', 'm', 'u', 'l', 'l', '.', '4', 's', 9, 0,
  /* 9829 */ 'u', 'm', 'u', 'l', 'l', '.', '4', 's', 9, 0,
  /* 9839 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', '4', 's', 9, 0,
  /* 9851 */ 's', 'm', 'l', 's', 'l', '.', '4', 's', 9, 0,
  /* 9861 */ 'u', 'm', 'l', 's', 'l', '.', '4', 's', 9, 0,
  /* 9871 */ 'f', 'm', 'u', 'l', '.', '4', 's', 9, 0,
  /* 9880 */ 's', 'h', 'a', '1', 'm', '.', '4', 's', 9, 0,
  /* 9890 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '4', 's', 9, 0,
  /* 9901 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '4', 's', 9, 0,
  /* 9912 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '4', 's', 9, 0,
  /* 9923 */ 'f', 'm', 'i', 'n', '.', '4', 's', 9, 0,
  /* 9932 */ 's', 'm', 'i', 'n', '.', '4', 's', 9, 0,
  /* 9941 */ 'u', 'm', 'i', 'n', '.', '4', 's', 9, 0,
  /* 9950 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '4', 's', 9, 0,
  /* 9961 */ 's', 'h', 'a', '1', 'p', '.', '4', 's', 9, 0,
  /* 9971 */ 'f', 'a', 'd', 'd', 'p', '.', '4', 's', 9, 0,
  /* 9981 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '4', 's', 9, 0,
  /* 9992 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '4', 's', 9, 0,
  /* 10003 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '4', 's', 9, 0,
  /* 10014 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '4', 's', 9, 0,
  /* 10025 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '4', 's', 9, 0,
  /* 10037 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '4', 's', 9, 0,
  /* 10049 */ 'f', 'm', 'i', 'n', 'p', '.', '4', 's', 9, 0,
  /* 10059 */ 's', 'm', 'i', 'n', 'p', '.', '4', 's', 9, 0,
  /* 10069 */ 'u', 'm', 'i', 'n', 'p', '.', '4', 's', 9, 0,
  /* 10079 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '4', 's', 9, 0,
  /* 10090 */ 'd', 'u', 'p', '.', '4', 's', 9, 0,
  /* 10098 */ 'f', 'm', 'a', 'x', 'p', '.', '4', 's', 9, 0,
  /* 10108 */ 's', 'm', 'a', 'x', 'p', '.', '4', 's', 9, 0,
  /* 10118 */ 'u', 'm', 'a', 'x', 'p', '.', '4', 's', 9, 0,
  /* 10128 */ 'f', 'c', 'm', 'e', 'q', '.', '4', 's', 9, 0,
  /* 10138 */ 's', 'r', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 10148 */ 'u', 'r', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 10158 */ 's', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 10167 */ 'u', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 10176 */ 'o', 'r', 'r', '.', '4', 's', 9, 0,
  /* 10184 */ 'f', 'c', 'v', 't', 'a', 's', '.', '4', 's', 9, 0,
  /* 10195 */ 'f', 'a', 'b', 's', '.', '4', 's', 9, 0,
  /* 10204 */ 's', 'q', 'a', 'b', 's', '.', '4', 's', 9, 0,
  /* 10214 */ 'c', 'm', 'h', 's', '.', '4', 's', 9, 0,
  /* 10223 */ 'c', 'l', 's', '.', '4', 's', 9, 0,
  /* 10231 */ 'f', 'm', 'l', 's', '.', '4', 's', 9, 0,
  /* 10240 */ 'f', 'c', 'v', 't', 'm', 's', '.', '4', 's', 9, 0,
  /* 10251 */ 'f', 'c', 'v', 't', 'n', 's', '.', '4', 's', 9, 0,
  /* 10262 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '4', 's', 9, 0,
  /* 10273 */ 'f', 'c', 'v', 't', 'p', 's', '.', '4', 's', 9, 0,
  /* 10284 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '4', 's', 9, 0,
  /* 10296 */ 'f', 'c', 'v', 't', 'z', 's', '.', '4', 's', 9, 0,
  /* 10307 */ 'f', 'a', 'c', 'g', 't', '.', '4', 's', 9, 0,
  /* 10317 */ 'f', 'c', 'm', 'g', 't', '.', '4', 's', 9, 0,
  /* 10327 */ 'f', 'c', 'm', 'l', 't', '.', '4', 's', 9, 0,
  /* 10337 */ 'f', 's', 'q', 'r', 't', '.', '4', 's', 9, 0,
  /* 10347 */ 'c', 'm', 't', 's', 't', '.', '4', 's', 9, 0,
  /* 10357 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '4', 's', 9, 0,
  /* 10368 */ 's', 'q', 's', 'h', 'l', 'u', '.', '4', 's', 9, 0,
  /* 10379 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '4', 's', 9, 0,
  /* 10390 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '4', 's', 9, 0,
  /* 10401 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '4', 's', 9, 0,
  /* 10412 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '4', 's', 9, 0,
  /* 10423 */ 'a', 'd', 'd', 'v', '.', '4', 's', 9, 0,
  /* 10432 */ 'f', 'd', 'i', 'v', '.', '4', 's', 9, 0,
  /* 10441 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '4', 's', 9, 0,
  /* 10452 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '4', 's', 9, 0,
  /* 10463 */ 'f', 'm', 'i', 'n', 'n', 'm', 'v', '.', '4', 's', 9, 0,
  /* 10475 */ 'f', 'm', 'a', 'x', 'n', 'm', 'v', '.', '4', 's', 9, 0,
  /* 10487 */ 'f', 'm', 'i', 'n', 'v', '.', '4', 's', 9, 0,
  /* 10497 */ 's', 'm', 'i', 'n', 'v', '.', '4', 's', 9, 0,
  /* 10507 */ 'u', 'm', 'i', 'n', 'v', '.', '4', 's', 9, 0,
  /* 10517 */ 'f', 'm', 'o', 'v', '.', '4', 's', 9, 0,
  /* 10526 */ 'f', 'm', 'a', 'x', 'v', '.', '4', 's', 9, 0,
  /* 10536 */ 's', 'm', 'a', 'x', 'v', '.', '4', 's', 9, 0,
  /* 10546 */ 'u', 'm', 'a', 'x', 'v', '.', '4', 's', 9, 0,
  /* 10556 */ 's', 's', 'u', 'b', 'w', '.', '4', 's', 9, 0,
  /* 10566 */ 'u', 's', 'u', 'b', 'w', '.', '4', 's', 9, 0,
  /* 10576 */ 's', 'a', 'd', 'd', 'w', '.', '4', 's', 9, 0,
  /* 10586 */ 'u', 'a', 'd', 'd', 'w', '.', '4', 's', 9, 0,
  /* 10596 */ 'f', 'm', 'a', 'x', '.', '4', 's', 9, 0,
  /* 10605 */ 's', 'm', 'a', 'x', '.', '4', 's', 9, 0,
  /* 10614 */ 'u', 'm', 'a', 'x', '.', '4', 's', 9, 0,
  /* 10623 */ 'f', 'm', 'u', 'l', 'x', '.', '4', 's', 9, 0,
  /* 10633 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '4', 's', 9, 0,
  /* 10644 */ 'c', 'l', 'z', '.', '4', 's', 9, 0,
  /* 10652 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '4', 's', 9, 0,
  /* 10663 */ 'f', 'c', 'v', 't', 'a', 's', 9, 0,
  /* 10671 */ 'f', 'a', 'b', 's', 9, 0,
  /* 10677 */ 's', 'q', 'a', 'b', 's', 9, 0,
  /* 10684 */ 's', 'u', 'b', 's', 9, 0,
  /* 10690 */ 's', 'b', 'c', 's', 9, 0,
  /* 10696 */ 'a', 'd', 'c', 's', 9, 0,
  /* 10702 */ 'b', 'i', 'c', 's', 9, 0,
  /* 10708 */ 'a', 'd', 'd', 's', 9, 0,
  /* 10714 */ 'a', 'n', 'd', 's', 9, 0,
  /* 10720 */ 'c', 'm', 'h', 's', 9, 0,
  /* 10726 */ 'c', 'l', 's', 9, 0,
  /* 10731 */ 'f', 'c', 'v', 't', 'm', 's', 9, 0,
  /* 10739 */ 'f', 'c', 'v', 't', 'n', 's', 9, 0,
  /* 10747 */ 'f', 'r', 'e', 'c', 'p', 's', 9, 0,
  /* 10755 */ 'f', 'c', 'v', 't', 'p', 's', 9, 0,
  /* 10763 */ 'm', 'r', 's', 9, 0,
  /* 10768 */ 'f', 'r', 's', 'q', 'r', 't', 's', 9, 0,
  /* 10777 */ 's', 'y', 's', 9, 0,
  /* 10782 */ 'f', 'c', 'v', 't', 'z', 's', 9, 0,
  /* 10790 */ 'r', 'e', 't', 9, 0,
  /* 10795 */ 'f', 'a', 'c', 'g', 't', 9, 0,
  /* 10802 */ 'f', 'c', 'm', 'g', 't', 9, 0,
  /* 10809 */ 'r', 'b', 'i', 't', 9, 0,
  /* 10815 */ 'h', 'l', 't', 9, 0,
  /* 10820 */ 'f', 'c', 'm', 'l', 't', 9, 0,
  /* 10827 */ 'f', 's', 'q', 'r', 't', 9, 0,
  /* 10834 */ 'c', 'm', 't', 's', 't', 9, 0,
  /* 10841 */ 'f', 'c', 'v', 't', 9, 0,
  /* 10847 */ 'f', 'c', 'v', 't', 'a', 'u', 9, 0,
  /* 10855 */ 's', 'q', 's', 'h', 'l', 'u', 9, 0,
  /* 10863 */ 'f', 'c', 'v', 't', 'm', 'u', 9, 0,
  /* 10871 */ 'f', 'c', 'v', 't', 'n', 'u', 9, 0,
  /* 10879 */ 'f', 'c', 'v', 't', 'p', 'u', 9, 0,
  /* 10887 */ 'f', 'c', 'v', 't', 'z', 'u', 9, 0,
  /* 10895 */ 'r', 'e', 'v', 9, 0,
  /* 10900 */ 'f', 'd', 'i', 'v', 9, 0,
  /* 10906 */ 's', 'd', 'i', 'v', 9, 0,
  /* 10912 */ 'u', 'd', 'i', 'v', 9, 0,
  /* 10918 */ 'c', 's', 'i', 'n', 'v', 9, 0,
  /* 10925 */ 'f', 'm', 'o', 'v', 9, 0,
  /* 10931 */ 'c', 'r', 'c', '3', '2', 'w', 9, 0,
  /* 10939 */ 'c', 'r', 'c', '3', '2', 'c', 'w', 9, 0,
  /* 10948 */ 'l', 'd', 'p', 's', 'w', 9, 0,
  /* 10955 */ 'l', 'd', 'r', 's', 'w', 9, 0,
  /* 10962 */ 'l', 'd', 't', 'r', 's', 'w', 9, 0,
  /* 10970 */ 'l', 'd', 'u', 'r', 's', 'w', 9, 0,
  /* 10978 */ 'c', 'r', 'c', '3', '2', 'x', 9, 0,
  /* 10986 */ 'f', 'm', 'a', 'x', 9, 0,
  /* 10992 */ 't', 'b', 'x', 9, 0,
  /* 10997 */ 'c', 'r', 'c', '3', '2', 'c', 'x', 9, 0,
  /* 11006 */ 'c', 'l', 'r', 'e', 'x', 9, 0,
  /* 11013 */ 'f', 'm', 'u', 'l', 'x', 9, 0,
  /* 11020 */ 'f', 'r', 'e', 'c', 'p', 'x', 9, 0,
  /* 11028 */ 'f', 'r', 'i', 'n', 't', 'x', 9, 0,
  /* 11036 */ 'c', 'b', 'z', 9, 0,
  /* 11041 */ 't', 'b', 'z', 9, 0,
  /* 11046 */ 'c', 'l', 'z', 9, 0,
  /* 11051 */ 'c', 'b', 'n', 'z', 9, 0,
  /* 11057 */ 't', 'b', 'n', 'z', 9, 0,
  /* 11063 */ 'f', 'r', 'i', 'n', 't', 'z', 9, 0,
  /* 11071 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 11077 */ '.', 't', 'l', 's', 'd', 'e', 's', 'c', 'c', 'a', 'l', 'l', 32, 0,
  /* 11091 */ 'h', 'i', 'n', 't', 32, 0,
  /* 11097 */ 'b', '.', 0,
  /* 11100 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 11113 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 11120 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 11130 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 11145 */ 'd', 'r', 'p', 's', 0,
  /* 11150 */ 'e', 'r', 'e', 't', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits1 = OpInfo[MI->getOpcode()];
  uint64_t Bits2 = OpInfo2[MI->getOpcode()];
  uint64_t Bits = (Bits2 << 32) | Bits1;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 6 bits for 40 unique commands.
  switch ((Bits >> 14) & 63) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, DRPS, ERET
    return;
    break;
  case 1:
    // ABSv16i8, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ABSv8i8, A...
    printVRegOperand(MI, 0, O); 
    break;
  case 2:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDPv2i64p, ADDSWri, ADDSWrs, ...
    printOperand(MI, 0, O); 
    break;
  case 3:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, AESDrr, AESErr, ...
    printVRegOperand(MI, 1, O); 
    break;
  case 4:
    // B, BL
    printAlignedLabel(MI, 0, O); 
    return;
    break;
  case 5:
    // BRK, DCPS1, DCPS2, DCPS3, HINT, HLT, HVC, SMC, SVC
    printHexImm(MI, 0, O); 
    return;
    break;
  case 6:
    // Bcc
    printCondCode(MI, 0, O); 
    O << "\t"; 
    printAlignedLabel(MI, 1, O); 
    return;
    break;
  case 7:
    // DMB, DSB, ISB
    printBarrierOption(MI, 0, O); 
    return;
    break;
  case 8:
    // FMLAv1i32_indexed, FMLAv1i64_indexed, FMLSv1i32_indexed, FMLSv1i64_ind...
    printOperand(MI, 1, O); 
    break;
  case 9:
    // LD1Fourv16b, LD1Onev16b, LD1Rv16b, LD1Threev16b, LD1Twov16b, LD2Rv16b,...
    printTypedVectorList<16, 'b'>(MI, 0, O); 
    O << ", ["; 
    printOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 10:
    // LD1Fourv16b_POST, LD1Onev16b_POST, LD1Rv16b_POST, LD1Threev16b_POST, L...
    printTypedVectorList<16, 'b'>(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << "], "; 
    break;
  case 11:
    // LD1Fourv1d, LD1Onev1d, LD1Rv1d, LD1Threev1d, LD1Twov1d, LD2Rv1d, LD3Rv...
    printTypedVectorList<1, 'd'>(MI, 0, O); 
    O << ", ["; 
    printOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 12:
    // LD1Fourv1d_POST, LD1Onev1d_POST, LD1Rv1d_POST, LD1Threev1d_POST, LD1Tw...
    printTypedVectorList<1, 'd'>(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << "], "; 
    break;
  case 13:
    // LD1Fourv2d, LD1Onev2d, LD1Rv2d, LD1Threev2d, LD1Twov2d, LD2Rv2d, LD2Tw...
    printTypedVectorList<2, 'd'>(MI, 0, O); 
    O << ", ["; 
    printOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 14:
    // LD1Fourv2d_POST, LD1Onev2d_POST, LD1Rv2d_POST, LD1Threev2d_POST, LD1Tw...
    printTypedVectorList<2, 'd'>(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << "], "; 
    break;
  case 15:
    // LD1Fourv2s, LD1Onev2s, LD1Rv2s, LD1Threev2s, LD1Twov2s, LD2Rv2s, LD2Tw...
    printTypedVectorList<2, 's'>(MI, 0, O); 
    O << ", ["; 
    printOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 16:
    // LD1Fourv2s_POST, LD1Onev2s_POST, LD1Rv2s_POST, LD1Threev2s_POST, LD1Tw...
    printTypedVectorList<2, 's'>(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << "], "; 
    break;
  case 17:
    // LD1Fourv4h, LD1Onev4h, LD1Rv4h, LD1Threev4h, LD1Twov4h, LD2Rv4h, LD2Tw...
    printTypedVectorList<4, 'h'>(MI, 0, O); 
    O << ", ["; 
    printOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 18:
    // LD1Fourv4h_POST, LD1Onev4h_POST, LD1Rv4h_POST, LD1Threev4h_POST, LD1Tw...
    printTypedVectorList<4, 'h'>(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << "], "; 
    break;
  case 19:
    // LD1Fourv4s, LD1Onev4s, LD1Rv4s, LD1Threev4s, LD1Twov4s, LD2Rv4s, LD2Tw...
    printTypedVectorList<4, 's'>(MI, 0, O); 
    O << ", ["; 
    printOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 20:
    // LD1Fourv4s_POST, LD1Onev4s_POST, LD1Rv4s_POST, LD1Threev4s_POST, LD1Tw...
    printTypedVectorList<4, 's'>(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << "], "; 
    break;
  case 21:
    // LD1Fourv8b, LD1Onev8b, LD1Rv8b, LD1Threev8b, LD1Twov8b, LD2Rv8b, LD2Tw...
    printTypedVectorList<8, 'b'>(MI, 0, O); 
    O << ", ["; 
    printOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 22:
    // LD1Fourv8b_POST, LD1Onev8b_POST, LD1Rv8b_POST, LD1Threev8b_POST, LD1Tw...
    printTypedVectorList<8, 'b'>(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << "], "; 
    break;
  case 23:
    // LD1Fourv8h, LD1Onev8h, LD1Rv8h, LD1Threev8h, LD1Twov8h, LD2Rv8h, LD2Tw...
    printTypedVectorList<8, 'h'>(MI, 0, O); 
    O << ", ["; 
    printOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 24:
    // LD1Fourv8h_POST, LD1Onev8h_POST, LD1Rv8h_POST, LD1Threev8h_POST, LD1Tw...
    printTypedVectorList<8, 'h'>(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << "], "; 
    break;
  case 25:
    // LD1i16, LD2i16, LD3i16, LD4i16, ST1i16_POST, ST2i16_POST, ST3i16_POST,...
    printTypedVectorList<0, 'h'>(MI, 1, O); 
    printVectorIndex(MI, 2, O); 
    O << ", ["; 
    printOperand(MI, 3, O); 
    break;
  case 26:
    // LD1i16_POST, LD2i16_POST, LD3i16_POST, LD4i16_POST
    printTypedVectorList<0, 'h'>(MI, 2, O); 
    printVectorIndex(MI, 3, O); 
    O << ", ["; 
    printOperand(MI, 4, O); 
    O << "], "; 
    break;
  case 27:
    // LD1i32, LD2i32, LD3i32, LD4i32, ST1i32_POST, ST2i32_POST, ST3i32_POST,...
    printTypedVectorList<0, 's'>(MI, 1, O); 
    printVectorIndex(MI, 2, O); 
    O << ", ["; 
    printOperand(MI, 3, O); 
    break;
  case 28:
    // LD1i32_POST, LD2i32_POST, LD3i32_POST, LD4i32_POST
    printTypedVectorList<0, 's'>(MI, 2, O); 
    printVectorIndex(MI, 3, O); 
    O << ", ["; 
    printOperand(MI, 4, O); 
    O << "], "; 
    break;
  case 29:
    // LD1i64, LD2i64, LD3i64, LD4i64, ST1i64_POST, ST2i64_POST, ST3i64_POST,...
    printTypedVectorList<0, 'd'>(MI, 1, O); 
    printVectorIndex(MI, 2, O); 
    O << ", ["; 
    printOperand(MI, 3, O); 
    break;
  case 30:
    // LD1i64_POST, LD2i64_POST, LD3i64_POST, LD4i64_POST
    printTypedVectorList<0, 'd'>(MI, 2, O); 
    printVectorIndex(MI, 3, O); 
    O << ", ["; 
    printOperand(MI, 4, O); 
    O << "], "; 
    break;
  case 31:
    // LD1i8, LD2i8, LD3i8, LD4i8, ST1i8_POST, ST2i8_POST, ST3i8_POST, ST4i8_...
    printTypedVectorList<0, 'b'>(MI, 1, O); 
    printVectorIndex(MI, 2, O); 
    O << ", ["; 
    printOperand(MI, 3, O); 
    break;
  case 32:
    // LD1i8_POST, LD2i8_POST, LD3i8_POST, LD4i8_POST
    printTypedVectorList<0, 'b'>(MI, 2, O); 
    printVectorIndex(MI, 3, O); 
    O << ", ["; 
    printOperand(MI, 4, O); 
    O << "], "; 
    break;
  case 33:
    // MSR
    printMSRSystemRegister(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 34:
    // MSRpstate
    printSystemPStateField(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 35:
    // PRFMl, PRFMroW, PRFMroX, PRFMui, PRFUMi
    printPrefetchOp(MI, 0, O); 
    break;
  case 36:
    // ST1i16, ST2i16, ST3i16, ST4i16
    printTypedVectorList<0, 'h'>(MI, 0, O); 
    printVectorIndex(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 37:
    // ST1i32, ST2i32, ST3i32, ST4i32
    printTypedVectorList<0, 's'>(MI, 0, O); 
    printVectorIndex(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 38:
    // ST1i64, ST2i64, ST3i64, ST4i64
    printTypedVectorList<0, 'd'>(MI, 0, O); 
    printVectorIndex(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 39:
    // ST1i8, ST2i8, ST3i8, ST4i8
    printTypedVectorList<0, 'b'>(MI, 0, O); 
    printVectorIndex(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << ']'; 
    return;
    break;
  }


  // Fragment 1 encoded into 6 bits for 36 unique commands.
  switch ((Bits >> 20) & 63) {
  default:   // unreachable.
  case 0:
    // ABSv16i8, ABSv1i64, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ...
    O << ", "; 
    break;
  case 1:
    // BLR, BR, CLREX, RET, TLSDESCCALL
    return;
    break;
  case 2:
    // FCMPDri, FCMPEDri, FCMPESri, FCMPSri
    O << ", #0.0"; 
    return;
    break;
  case 3:
    // FCVTLv2i32, FCVTLv4i32
    O << ".2d, "; 
    printVRegOperand(MI, 1, O); 
    break;
  case 4:
    // FCVTLv4i16, FCVTLv8i16, FCVTNv4i32, FCVTXNv4f32
    O << ".4s, "; 
    break;
  case 5:
    // FCVTNv2i32, FCVTXNv2f32
    O << ".2s, "; 
    printVRegOperand(MI, 1, O); 
    O << ".2d"; 
    return;
    break;
  case 6:
    // FCVTNv4i16
    O << ".4h, "; 
    printVRegOperand(MI, 1, O); 
    O << ".4s"; 
    return;
    break;
  case 7:
    // FCVTNv8i16
    O << ".8h, "; 
    printVRegOperand(MI, 2, O); 
    O << ".4s"; 
    return;
    break;
  case 8:
    // FMOVXDHighr, INSvi16gpr, INSvi16lane, INSvi32gpr, INSvi32lane, INSvi64...
    printVectorIndex(MI, 2, O); 
    O << ", "; 
    break;
  case 9:
    // LD1Fourv16b_POST, LD1Fourv2d_POST, LD1Fourv4s_POST, LD1Fourv8h_POST, L...
    printPostIncOperand<64>(MI, 3, O); 
    return;
    break;
  case 10:
    // LD1Fourv1d_POST, LD1Fourv2s_POST, LD1Fourv4h_POST, LD1Fourv8b_POST, LD...
    printPostIncOperand<32>(MI, 3, O); 
    return;
    break;
  case 11:
    // LD1Onev16b_POST, LD1Onev2d_POST, LD1Onev4s_POST, LD1Onev8h_POST, LD1Tw...
    printPostIncOperand<16>(MI, 3, O); 
    return;
    break;
  case 12:
    // LD1Onev1d_POST, LD1Onev2s_POST, LD1Onev4h_POST, LD1Onev8b_POST, LD1Rv1...
    printPostIncOperand<8>(MI, 3, O); 
    return;
    break;
  case 13:
    // LD1Rv16b_POST, LD1Rv8b_POST
    printPostIncOperand<1>(MI, 3, O); 
    return;
    break;
  case 14:
    // LD1Rv2s_POST, LD1Rv4s_POST, LD2Rv4h_POST, LD2Rv8h_POST, LD4Rv16b_POST,...
    printPostIncOperand<4>(MI, 3, O); 
    return;
    break;
  case 15:
    // LD1Rv4h_POST, LD1Rv8h_POST, LD2Rv16b_POST, LD2Rv8b_POST
    printPostIncOperand<2>(MI, 3, O); 
    return;
    break;
  case 16:
    // LD1Threev16b_POST, LD1Threev2d_POST, LD1Threev4s_POST, LD1Threev8h_POS...
    printPostIncOperand<48>(MI, 3, O); 
    return;
    break;
  case 17:
    // LD1Threev1d_POST, LD1Threev2s_POST, LD1Threev4h_POST, LD1Threev8b_POST...
    printPostIncOperand<24>(MI, 3, O); 
    return;
    break;
  case 18:
    // LD1i16, LD1i32, LD1i64, LD1i8, LD2i16, LD2i32, LD2i64, LD2i8, LD3i16, ...
    O << ']'; 
    return;
    break;
  case 19:
    // LD1i16_POST, LD2i8_POST
    printPostIncOperand<2>(MI, 5, O); 
    return;
    break;
  case 20:
    // LD1i32_POST, LD2i16_POST, LD4i8_POST
    printPostIncOperand<4>(MI, 5, O); 
    return;
    break;
  case 21:
    // LD1i64_POST, LD2i32_POST, LD4i16_POST
    printPostIncOperand<8>(MI, 5, O); 
    return;
    break;
  case 22:
    // LD1i8_POST
    printPostIncOperand<1>(MI, 5, O); 
    return;
    break;
  case 23:
    // LD2i64_POST, LD4i32_POST
    printPostIncOperand<16>(MI, 5, O); 
    return;
    break;
  case 24:
    // LD3Rv16b_POST, LD3Rv8b_POST
    printPostIncOperand<3>(MI, 3, O); 
    return;
    break;
  case 25:
    // LD3Rv2s_POST, LD3Rv4s_POST
    printPostIncOperand<12>(MI, 3, O); 
    return;
    break;
  case 26:
    // LD3Rv4h_POST, LD3Rv8h_POST
    printPostIncOperand<6>(MI, 3, O); 
    return;
    break;
  case 27:
    // LD3i16_POST
    printPostIncOperand<6>(MI, 5, O); 
    return;
    break;
  case 28:
    // LD3i32_POST
    printPostIncOperand<12>(MI, 5, O); 
    return;
    break;
  case 29:
    // LD3i64_POST
    printPostIncOperand<24>(MI, 5, O); 
    return;
    break;
  case 30:
    // LD3i8_POST
    printPostIncOperand<3>(MI, 5, O); 
    return;
    break;
  case 31:
    // LD4i64_POST
    printPostIncOperand<32>(MI, 5, O); 
    return;
    break;
  case 32:
    // LDARB, LDARH, LDARW, LDARX, LDAXRB, LDAXRH, LDAXRW, LDAXRX, LDRBBpost,...
    O << ", ["; 
    break;
  case 33:
    // ST1i16_POST, ST1i32_POST, ST1i64_POST, ST1i8_POST, ST2i16_POST, ST2i32...
    O << "], "; 
    break;
  case 34:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBXv16i8Four, T...
    O << ".16b, "; 
    break;
  case 35:
    // TBLv8i8Four, TBLv8i8One, TBLv8i8Three, TBLv8i8Two, TBXv8i8Four, TBXv8i...
    O << ".8b, "; 
    break;
  }


  // Fragment 2 encoded into 5 bits for 28 unique commands.
  switch ((Bits >> 26) & 31) {
  default:   // unreachable.
  case 0:
    // ABSv16i8, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ABSv8i8, A...
    printVRegOperand(MI, 1, O); 
    break;
  case 1:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDSWri, ADDSWrs, ADDSWrx, ADD...
    printOperand(MI, 1, O); 
    break;
  case 2:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, AESDrr, AESErr, ...
    printVRegOperand(MI, 2, O); 
    break;
  case 3:
    // ADRP
    printAdrpLabel(MI, 1, O); 
    return;
    break;
  case 4:
    // BFMWri, BFMXri, FMLAv1i32_indexed, FMLAv1i64_indexed, FMLSv1i32_indexe...
    printOperand(MI, 2, O); 
    break;
  case 5:
    // BICv2i32, BICv4i16, BICv4i32, BICv8i16, MOVKWi, MOVKXi, ORRv2i32, ORRv...
    printHexImm(MI, 2, O); 
    printShifter(MI, 3, O); 
    return;
    break;
  case 6:
    // CBNZW, CBNZX, CBZW, CBZX, LDRDl, LDRQl, LDRSWl, LDRSl, LDRWl, LDRXl, P...
    printAlignedLabel(MI, 1, O); 
    return;
    break;
  case 7:
    // FCVTLv2i32
    O << ".2s"; 
    return;
    break;
  case 8:
    // FCVTLv4i32
    O << ".4s"; 
    return;
    break;
  case 9:
    // FMOVDi, FMOVSi, FMOVv2f32_ns, FMOVv2f64_ns, FMOVv4f32_ns
    printFPImmOperand(MI, 1, O); 
    return;
    break;
  case 10:
    // INSvi16gpr, INSvi32gpr, INSvi64gpr, INSvi8gpr
    printOperand(MI, 3, O); 
    return;
    break;
  case 11:
    // INSvi16lane, INSvi32lane, INSvi64lane, INSvi8lane
    printVRegOperand(MI, 3, O); 
    printVectorIndex(MI, 4, O); 
    return;
    break;
  case 12:
    // MOVID, MOVIv2d_ns
    printSIMDType10Operand(MI, 1, O); 
    return;
    break;
  case 13:
    // MOVIv16b_ns, MOVIv2i32, MOVIv2s_msl, MOVIv4i16, MOVIv4i32, MOVIv4s_msl...
    printHexImm(MI, 1, O); 
    break;
  case 14:
    // MRS
    printMRSSystemRegister(MI, 1, O); 
    return;
    break;
  case 15:
    // ST1i16_POST, ST2i8_POST
    printPostIncOperand<2>(MI, 4, O); 
    return;
    break;
  case 16:
    // ST1i32_POST, ST2i16_POST, ST4i8_POST
    printPostIncOperand<4>(MI, 4, O); 
    return;
    break;
  case 17:
    // ST1i64_POST, ST2i32_POST, ST4i16_POST
    printPostIncOperand<8>(MI, 4, O); 
    return;
    break;
  case 18:
    // ST1i8_POST
    printPostIncOperand<1>(MI, 4, O); 
    return;
    break;
  case 19:
    // ST2i64_POST, ST4i32_POST
    printPostIncOperand<16>(MI, 4, O); 
    return;
    break;
  case 20:
    // ST3i16_POST
    printPostIncOperand<6>(MI, 4, O); 
    return;
    break;
  case 21:
    // ST3i32_POST
    printPostIncOperand<12>(MI, 4, O); 
    return;
    break;
  case 22:
    // ST3i64_POST
    printPostIncOperand<24>(MI, 4, O); 
    return;
    break;
  case 23:
    // ST3i8_POST
    printPostIncOperand<3>(MI, 4, O); 
    return;
    break;
  case 24:
    // ST4i64_POST
    printPostIncOperand<32>(MI, 4, O); 
    return;
    break;
  case 25:
    // SYSxt
    printSysCROperand(MI, 1, O); 
    O << ", "; 
    printSysCROperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    return;
    break;
  case 26:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBLv8i8Four, TB...
    printTypedVectorList<16, 'b'>(MI, 1, O); 
    O << ", "; 
    printVRegOperand(MI, 2, O); 
    break;
  case 27:
    // TBXv16i8Four, TBXv16i8One, TBXv16i8Three, TBXv16i8Two, TBXv8i8Four, TB...
    printTypedVectorList<16, 'b'>(MI, 2, O); 
    O << ", "; 
    printVRegOperand(MI, 3, O); 
    break;
  }


  // Fragment 3 encoded into 5 bits for 17 unique commands.
  switch ((Bits >> 31) & 31) {
  default:   // unreachable.
  case 0:
    // ABSv16i8, ABSv1i64, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ...
    return;
    break;
  case 1:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDHNv2i64_v2i32, ADDHNv2i64_v4i32, ADDH...
    O << ", "; 
    break;
  case 2:
    // CMEQv16i8rz, CMEQv1i64rz, CMEQv2i32rz, CMEQv2i64rz, CMEQv4i16rz, CMEQv...
    O << ", #0"; 
    return;
    break;
  case 3:
    // CPYi16, CPYi32, CPYi64, CPYi8, DUPv16i8lane, DUPv2i32lane, DUPv2i64lan...
    printVectorIndex(MI, 2, O); 
    return;
    break;
  case 4:
    // FCMEQv1i32rz, FCMEQv1i64rz, FCMEQv2i32rz, FCMEQv2i64rz, FCMEQv4i32rz, ...
    O << ", #0.0"; 
    return;
    break;
  case 5:
    // FCVTLv4i16
    O << ".4h"; 
    return;
    break;
  case 6:
    // FCVTLv8i16
    O << ".8h"; 
    return;
    break;
  case 7:
    // FCVTNv4i32, FCVTXNv4f32
    O << ".2d"; 
    return;
    break;
  case 8:
    // LDARB, LDARH, LDARW, LDARX, LDAXRB, LDAXRH, LDAXRW, LDAXRX, LDXRB, LDX...
    O << ']'; 
    return;
    break;
  case 9:
    // LDAXPW, LDAXPX, LDNPDi, LDNPQi, LDNPSi, LDNPWi, LDNPXi, LDPDi, LDPDpos...
    O << ", ["; 
    break;
  case 10:
    // LDRBBpost, LDRBpost, LDRDpost, LDRHHpost, LDRHpost, LDRQpost, LDRSBWpo...
    O << "], "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 11:
    // MOVIv2i32, MOVIv2s_msl, MOVIv4i16, MOVIv4i32, MOVIv4s_msl, MOVIv8i16, ...
    printShifter(MI, 2, O); 
    return;
    break;
  case 12:
    // SHLLv16i8, SHLLv8i8
    O << ", #8"; 
    return;
    break;
  case 13:
    // SHLLv2i32, SHLLv4i32
    O << ", #32"; 
    return;
    break;
  case 14:
    // SHLLv4i16, SHLLv8i16
    O << ", #16"; 
    return;
    break;
  case 15:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBXv16i8Four, T...
    O << ".16b"; 
    return;
    break;
  case 16:
    // TBLv8i8Four, TBLv8i8One, TBLv8i8Three, TBLv8i8Two, TBXv8i8Four, TBXv8i...
    O << ".8b"; 
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 16 unique commands.
  switch ((Bits >> 36) & 15) {
  default:   // unreachable.
  case 0:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDSXrx64, ADDXrx64, ADDv1i64, ASRVWr, A...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ADDHNv2i64_v2i32, ADDHNv4i32_v4i16, ADDHNv8i16_v8i8, ADDPv16i8, ADDPv2...
    printVRegOperand(MI, 2, O); 
    break;
  case 2:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, BITv16i8, BITv8i...
    printVRegOperand(MI, 3, O); 
    break;
  case 3:
    // ADDSWri, ADDSXri, ADDWri, ADDXri, SUBSWri, SUBSXri, SUBWri, SUBXri
    printAddSubImm(MI, 2, O); 
    return;
    break;
  case 4:
    // ADDSWrs, ADDSXrs, ADDWrs, ADDXrs, ANDSWrs, ANDSXrs, ANDWrs, ANDXrs, BI...
    printShiftedRegister(MI, 2, O); 
    return;
    break;
  case 5:
    // ADDSWrx, ADDSXrx, ADDWrx, ADDXrx, SUBSWrx, SUBSXrx, SUBWrx, SUBXrx
    printExtendedRegister(MI, 2, O); 
    return;
    break;
  case 6:
    // ANDSWri, ANDWri, EORWri, ORRWri
    printLogicalImm32(MI, 2, O); 
    return;
    break;
  case 7:
    // ANDSXri, ANDXri, EORXri, ORRXri
    printLogicalImm64(MI, 2, O); 
    return;
    break;
  case 8:
    // BFMWri, BFMXri, LDPDpost, LDPDpre, LDPQpost, LDPQpre, LDPSWpost, LDPSW...
    printOperand(MI, 3, O); 
    break;
  case 9:
    // LDRBBui, LDRBui, LDRSBWui, LDRSBXui, STRBBui, STRBui
    printUImm12Offset<1>(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 10:
    // LDRDui, LDRXui, PRFMui, STRDui, STRXui
    printUImm12Offset<8>(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 11:
    // LDRHHui, LDRHui, LDRSHWui, LDRSHXui, STRHHui, STRHui
    printUImm12Offset<2>(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 12:
    // LDRQui, STRQui
    printUImm12Offset<16>(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 13:
    // LDRSWui, LDRSui, LDRWui, STRSui, STRWui
    printUImm12Offset<4>(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 14:
    // SYSLxt
    printSysCROperand(MI, 2, O); 
    O << ", "; 
    printSysCROperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    return;
    break;
  case 15:
    // TBNZW, TBNZX, TBZW, TBZX
    printAlignedLabel(MI, 2, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 9 unique commands.
  switch ((Bits >> 40) & 15) {
  default:   // unreachable.
  case 0:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDHNv2i64_v2i32, ADDHNv2i64_v4i32, ADDH...
    return;
    break;
  case 1:
    // ADDSXrx64, ADDXrx64, SUBSXrx64, SUBXrx64
    printArithExtend(MI, 3, O); 
    return;
    break;
  case 2:
    // BFMWri, BFMXri, CCMNWi, CCMNWr, CCMNXi, CCMNXr, CCMPWi, CCMPWr, CCMPXi...
    O << ", "; 
    break;
  case 3:
    // FMLAv1i32_indexed, FMLAv1i64_indexed, FMLAv2i32_indexed, FMLAv2i64_ind...
    printVectorIndex(MI, 4, O); 
    return;
    break;
  case 4:
    // FMULXv1i32_indexed, FMULXv1i64_indexed, FMULXv2i32_indexed, FMULXv2i64...
    printVectorIndex(MI, 3, O); 
    return;
    break;
  case 5:
    // LDAXPW, LDAXPX, LDTRBi, LDTRHi, LDTRSBWi, LDTRSBXi, LDTRSHWi, LDTRSHXi...
    O << ']'; 
    return;
    break;
  case 6:
    // LDPDpost, LDPQpost, LDPSWpost, LDPSpost, LDPWpost, LDPXpost, STPDpost,...
    O << "], "; 
    break;
  case 7:
    // LDRBBpre, LDRBpre, LDRDpre, LDRHHpre, LDRHpre, LDRQpre, LDRSBWpre, LDR...
    O << "]!"; 
    return;
    break;
  case 8:
    // STLXPW, STLXPX, STXPW, STXPX
    O << ", ["; 
    printOperand(MI, 3, O); 
    O << ']'; 
    return;
    break;
  }


  // Fragment 6 encoded into 5 bits for 19 unique commands.
  switch ((Bits >> 44) & 31) {
  default:   // unreachable.
  case 0:
    // BFMWri, BFMXri
    printOperand(MI, 4, O); 
    return;
    break;
  case 1:
    // CCMNWi, CCMNWr, CCMNXi, CCMNXr, CCMPWi, CCMPWr, CCMPXi, CCMPXr, CSELWr...
    printCondCode(MI, 3, O); 
    return;
    break;
  case 2:
    // EXTRWrri, EXTRXrri, EXTv16i8, EXTv8i8, FMADDDrrr, FMADDSrrr, FMSUBDrrr...
    printOperand(MI, 3, O); 
    return;
    break;
  case 3:
    // LDNPDi, LDNPXi, LDPDi, LDPXi, STNPDi, STNPXi, STPDi, STPXi
    printImmScale<8>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 4:
    // LDNPQi, LDPQi, STNPQi, STPQi
    printImmScale<16>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 5:
    // LDNPSi, LDNPWi, LDPSWi, LDPSi, LDPWi, STNPSi, STNPWi, STPSi, STPWi
    printImmScale<4>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 6:
    // LDPDpost, LDPDpre, LDPXpost, LDPXpre, STPDpost, STPDpre, STPXpost, STP...
    printImmScale<8>(MI, 4, O); 
    break;
  case 7:
    // LDPQpost, LDPQpre, STPQpost, STPQpre
    printImmScale<16>(MI, 4, O); 
    break;
  case 8:
    // LDPSWpost, LDPSWpre, LDPSpost, LDPSpre, LDPWpost, LDPWpre, STPSpost, S...
    printImmScale<4>(MI, 4, O); 
    break;
  case 9:
    // LDRBBroW, LDRBroW, LDRSBWroW, LDRSBXroW, STRBBroW, STRBroW
    printMemExtend<'w', 8>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 10:
    // LDRBBroX, LDRBroX, LDRSBWroX, LDRSBXroX, STRBBroX, STRBroX
    printMemExtend<'x', 8>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 11:
    // LDRDroW, LDRXroW, PRFMroW, STRDroW, STRXroW
    printMemExtend<'w', 64>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 12:
    // LDRDroX, LDRXroX, PRFMroX, STRDroX, STRXroX
    printMemExtend<'x', 64>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 13:
    // LDRHHroW, LDRHroW, LDRSHWroW, LDRSHXroW, STRHHroW, STRHroW
    printMemExtend<'w', 16>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 14:
    // LDRHHroX, LDRHroX, LDRSHWroX, LDRSHXroX, STRHHroX, STRHroX
    printMemExtend<'x', 16>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 15:
    // LDRQroW, STRQroW
    printMemExtend<'w', 128>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 16:
    // LDRQroX, STRQroX
    printMemExtend<'x', 128>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 17:
    // LDRSWroW, LDRSroW, LDRWroW, STRSroW, STRWroW
    printMemExtend<'w', 32>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 18:
    // LDRSWroX, LDRSroX, LDRWroX, STRSroX, STRWroX
    printMemExtend<'x', 32>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 49) & 1) {
    // LDPDpre, LDPQpre, LDPSWpre, LDPSpre, LDPWpre, LDPXpre, STPDpre, STPQpr...
    O << "]!"; 
    return;
  } else {
    // LDPDpost, LDPQpost, LDPSWpost, LDPSpost, LDPWpost, LDPXpost, STPDpost,...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *AArch64AppleInstPrinter::
getRegisterName(unsigned RegNo, unsigned AltIdx) {
  assert(RegNo && RegNo < 420 && "Invalid register number!");

  static const char AsmStrsNoRegAltName[] = {
  /* 0 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', 0,
  /* 13 */ 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', 0,
  /* 26 */ 'b', '1', '0', 0,
  /* 30 */ 'd', '1', '0', 0,
  /* 34 */ 'h', '1', '0', 0,
  /* 38 */ 'q', '1', '0', 0,
  /* 42 */ 's', '1', '0', 0,
  /* 46 */ 'w', '1', '0', 0,
  /* 50 */ 'x', '1', '0', 0,
  /* 54 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', 0,
  /* 70 */ 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', 0,
  /* 86 */ 'b', '2', '0', 0,
  /* 90 */ 'd', '2', '0', 0,
  /* 94 */ 'h', '2', '0', 0,
  /* 98 */ 'q', '2', '0', 0,
  /* 102 */ 's', '2', '0', 0,
  /* 106 */ 'w', '2', '0', 0,
  /* 110 */ 'x', '2', '0', 0,
  /* 114 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', 0,
  /* 130 */ 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', 0,
  /* 146 */ 'b', '3', '0', 0,
  /* 150 */ 'd', '3', '0', 0,
  /* 154 */ 'h', '3', '0', 0,
  /* 158 */ 'q', '3', '0', 0,
  /* 162 */ 's', '3', '0', 0,
  /* 166 */ 'w', '3', '0', 0,
  /* 170 */ 'x', '3', '0', 0,
  /* 174 */ 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', 0,
  /* 189 */ 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', 0,
  /* 204 */ 'b', '0', 0,
  /* 207 */ 'd', '0', 0,
  /* 210 */ 'h', '0', 0,
  /* 213 */ 'q', '0', 0,
  /* 216 */ 's', '0', 0,
  /* 219 */ 'w', '0', 0,
  /* 222 */ 'x', '0', 0,
  /* 225 */ 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', 0,
  /* 239 */ 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', 0,
  /* 253 */ 'b', '1', '1', 0,
  /* 257 */ 'd', '1', '1', 0,
  /* 261 */ 'h', '1', '1', 0,
  /* 265 */ 'q', '1', '1', 0,
  /* 269 */ 's', '1', '1', 0,
  /* 273 */ 'w', '1', '1', 0,
  /* 277 */ 'x', '1', '1', 0,
  /* 281 */ 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', 0,
  /* 297 */ 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', 0,
  /* 313 */ 'b', '2', '1', 0,
  /* 317 */ 'd', '2', '1', 0,
  /* 321 */ 'h', '2', '1', 0,
  /* 325 */ 'q', '2', '1', 0,
  /* 329 */ 's', '2', '1', 0,
  /* 333 */ 'w', '2', '1', 0,
  /* 337 */ 'x', '2', '1', 0,
  /* 341 */ 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', 0,
  /* 357 */ 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', 0,
  /* 373 */ 'b', '3', '1', 0,
  /* 377 */ 'd', '3', '1', 0,
  /* 381 */ 'h', '3', '1', 0,
  /* 385 */ 'q', '3', '1', 0,
  /* 389 */ 's', '3', '1', 0,
  /* 393 */ 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', 0,
  /* 407 */ 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', 0,
  /* 421 */ 'b', '1', 0,
  /* 424 */ 'd', '1', 0,
  /* 427 */ 'h', '1', 0,
  /* 430 */ 'q', '1', 0,
  /* 433 */ 's', '1', 0,
  /* 436 */ 'w', '1', 0,
  /* 439 */ 'x', '1', 0,
  /* 442 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', 0,
  /* 457 */ 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', 0,
  /* 472 */ 'b', '1', '2', 0,
  /* 476 */ 'd', '1', '2', 0,
  /* 480 */ 'h', '1', '2', 0,
  /* 484 */ 'q', '1', '2', 0,
  /* 488 */ 's', '1', '2', 0,
  /* 492 */ 'w', '1', '2', 0,
  /* 496 */ 'x', '1', '2', 0,
  /* 500 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', 0,
  /* 516 */ 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', 0,
  /* 532 */ 'b', '2', '2', 0,
  /* 536 */ 'd', '2', '2', 0,
  /* 540 */ 'h', '2', '2', 0,
  /* 544 */ 'q', '2', '2', 0,
  /* 548 */ 's', '2', '2', 0,
  /* 552 */ 'w', '2', '2', 0,
  /* 556 */ 'x', '2', '2', 0,
  /* 560 */ 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', '_', 'D', '2', 0,
  /* 573 */ 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', 0,
  /* 586 */ 'b', '2', 0,
  /* 589 */ 'd', '2', 0,
  /* 592 */ 'h', '2', 0,
  /* 595 */ 'q', '2', 0,
  /* 598 */ 's', '2', 0,
  /* 601 */ 'w', '2', 0,
  /* 604 */ 'x', '2', 0,
  /* 607 */ 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', 0,
  /* 623 */ 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', 0,
  /* 639 */ 'b', '1', '3', 0,
  /* 643 */ 'd', '1', '3', 0,
  /* 647 */ 'h', '1', '3', 0,
  /* 651 */ 'q', '1', '3', 0,
  /* 655 */ 's', '1', '3', 0,
  /* 659 */ 'w', '1', '3', 0,
  /* 663 */ 'x', '1', '3', 0,
  /* 667 */ 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', 0,
  /* 683 */ 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', 0,
  /* 699 */ 'b', '2', '3', 0,
  /* 703 */ 'd', '2', '3', 0,
  /* 707 */ 'h', '2', '3', 0,
  /* 711 */ 'q', '2', '3', 0,
  /* 715 */ 's', '2', '3', 0,
  /* 719 */ 'w', '2', '3', 0,
  /* 723 */ 'x', '2', '3', 0,
  /* 727 */ 'D', '0', '_', 'D', '1', '_', 'D', '2', '_', 'D', '3', 0,
  /* 739 */ 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', 0,
  /* 751 */ 'b', '3', 0,
  /* 754 */ 'd', '3', 0,
  /* 757 */ 'h', '3', 0,
  /* 760 */ 'q', '3', 0,
  /* 763 */ 's', '3', 0,
  /* 766 */ 'w', '3', 0,
  /* 769 */ 'x', '3', 0,
  /* 772 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', 0,
  /* 788 */ 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', 0,
  /* 804 */ 'b', '1', '4', 0,
  /* 808 */ 'd', '1', '4', 0,
  /* 812 */ 'h', '1', '4', 0,
  /* 816 */ 'q', '1', '4', 0,
  /* 820 */ 's', '1', '4', 0,
  /* 824 */ 'w', '1', '4', 0,
  /* 828 */ 'x', '1', '4', 0,
  /* 832 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', 0,
  /* 848 */ 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', 0,
  /* 864 */ 'b', '2', '4', 0,
  /* 868 */ 'd', '2', '4', 0,
  /* 872 */ 'h', '2', '4', 0,
  /* 876 */ 'q', '2', '4', 0,
  /* 880 */ 's', '2', '4', 0,
  /* 884 */ 'w', '2', '4', 0,
  /* 888 */ 'x', '2', '4', 0,
  /* 892 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', '_', 'D', '4', 0,
  /* 904 */ 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', 0,
  /* 916 */ 'b', '4', 0,
  /* 919 */ 'd', '4', 0,
  /* 922 */ 'h', '4', 0,
  /* 925 */ 'q', '4', 0,
  /* 928 */ 's', '4', 0,
  /* 931 */ 'w', '4', 0,
  /* 934 */ 'x', '4', 0,
  /* 937 */ 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', 0,
  /* 953 */ 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', 0,
  /* 969 */ 'b', '1', '5', 0,
  /* 973 */ 'd', '1', '5', 0,
  /* 977 */ 'h', '1', '5', 0,
  /* 981 */ 'q', '1', '5', 0,
  /* 985 */ 's', '1', '5', 0,
  /* 989 */ 'w', '1', '5', 0,
  /* 993 */ 'x', '1', '5', 0,
  /* 997 */ 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', 0,
  /* 1013 */ 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', 0,
  /* 1029 */ 'b', '2', '5', 0,
  /* 1033 */ 'd', '2', '5', 0,
  /* 1037 */ 'h', '2', '5', 0,
  /* 1041 */ 'q', '2', '5', 0,
  /* 1045 */ 's', '2', '5', 0,
  /* 1049 */ 'w', '2', '5', 0,
  /* 1053 */ 'x', '2', '5', 0,
  /* 1057 */ 'D', '2', '_', 'D', '3', '_', 'D', '4', '_', 'D', '5', 0,
  /* 1069 */ 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', 0,
  /* 1081 */ 'b', '5', 0,
  /* 1084 */ 'd', '5', 0,
  /* 1087 */ 'h', '5', 0,
  /* 1090 */ 'q', '5', 0,
  /* 1093 */ 's', '5', 0,
  /* 1096 */ 'w', '5', 0,
  /* 1099 */ 'x', '5', 0,
  /* 1102 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', 0,
  /* 1118 */ 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', 0,
  /* 1134 */ 'b', '1', '6', 0,
  /* 1138 */ 'd', '1', '6', 0,
  /* 1142 */ 'h', '1', '6', 0,
  /* 1146 */ 'q', '1', '6', 0,
  /* 1150 */ 's', '1', '6', 0,
  /* 1154 */ 'w', '1', '6', 0,
  /* 1158 */ 'x', '1', '6', 0,
  /* 1162 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', 0,
  /* 1178 */ 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', 0,
  /* 1194 */ 'b', '2', '6', 0,
  /* 1198 */ 'd', '2', '6', 0,
  /* 1202 */ 'h', '2', '6', 0,
  /* 1206 */ 'q', '2', '6', 0,
  /* 1210 */ 's', '2', '6', 0,
  /* 1214 */ 'w', '2', '6', 0,
  /* 1218 */ 'x', '2', '6', 0,
  /* 1222 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', '_', 'D', '6', 0,
  /* 1234 */ 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', 0,
  /* 1246 */ 'b', '6', 0,
  /* 1249 */ 'd', '6', 0,
  /* 1252 */ 'h', '6', 0,
  /* 1255 */ 'q', '6', 0,
  /* 1258 */ 's', '6', 0,
  /* 1261 */ 'w', '6', 0,
  /* 1264 */ 'x', '6', 0,
  /* 1267 */ 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', 0,
  /* 1283 */ 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', 0,
  /* 1299 */ 'b', '1', '7', 0,
  /* 1303 */ 'd', '1', '7', 0,
  /* 1307 */ 'h', '1', '7', 0,
  /* 1311 */ 'q', '1', '7', 0,
  /* 1315 */ 's', '1', '7', 0,
  /* 1319 */ 'w', '1', '7', 0,
  /* 1323 */ 'x', '1', '7', 0,
  /* 1327 */ 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', 0,
  /* 1343 */ 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', 0,
  /* 1359 */ 'b', '2', '7', 0,
  /* 1363 */ 'd', '2', '7', 0,
  /* 1367 */ 'h', '2', '7', 0,
  /* 1371 */ 'q', '2', '7', 0,
  /* 1375 */ 's', '2', '7', 0,
  /* 1379 */ 'w', '2', '7', 0,
  /* 1383 */ 'x', '2', '7', 0,
  /* 1387 */ 'D', '4', '_', 'D', '5', '_', 'D', '6', '_', 'D', '7', 0,
  /* 1399 */ 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', 0,
  /* 1411 */ 'b', '7', 0,
  /* 1414 */ 'd', '7', 0,
  /* 1417 */ 'h', '7', 0,
  /* 1420 */ 'q', '7', 0,
  /* 1423 */ 's', '7', 0,
  /* 1426 */ 'w', '7', 0,
  /* 1429 */ 'x', '7', 0,
  /* 1432 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', 0,
  /* 1448 */ 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', 0,
  /* 1464 */ 'b', '1', '8', 0,
  /* 1468 */ 'd', '1', '8', 0,
  /* 1472 */ 'h', '1', '8', 0,
  /* 1476 */ 'q', '1', '8', 0,
  /* 1480 */ 's', '1', '8', 0,
  /* 1484 */ 'w', '1', '8', 0,
  /* 1488 */ 'x', '1', '8', 0,
  /* 1492 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', 0,
  /* 1508 */ 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', 0,
  /* 1524 */ 'b', '2', '8', 0,
  /* 1528 */ 'd', '2', '8', 0,
  /* 1532 */ 'h', '2', '8', 0,
  /* 1536 */ 'q', '2', '8', 0,
  /* 1540 */ 's', '2', '8', 0,
  /* 1544 */ 'w', '2', '8', 0,
  /* 1548 */ 'x', '2', '8', 0,
  /* 1552 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', '_', 'D', '8', 0,
  /* 1564 */ 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', 0,
  /* 1576 */ 'b', '8', 0,
  /* 1579 */ 'd', '8', 0,
  /* 1582 */ 'h', '8', 0,
  /* 1585 */ 'q', '8', 0,
  /* 1588 */ 's', '8', 0,
  /* 1591 */ 'w', '8', 0,
  /* 1594 */ 'x', '8', 0,
  /* 1597 */ 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', 0,
  /* 1613 */ 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', 0,
  /* 1629 */ 'b', '1', '9', 0,
  /* 1633 */ 'd', '1', '9', 0,
  /* 1637 */ 'h', '1', '9', 0,
  /* 1641 */ 'q', '1', '9', 0,
  /* 1645 */ 's', '1', '9', 0,
  /* 1649 */ 'w', '1', '9', 0,
  /* 1653 */ 'x', '1', '9', 0,
  /* 1657 */ 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', 0,
  /* 1673 */ 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', 0,
  /* 1689 */ 'b', '2', '9', 0,
  /* 1693 */ 'd', '2', '9', 0,
  /* 1697 */ 'h', '2', '9', 0,
  /* 1701 */ 'q', '2', '9', 0,
  /* 1705 */ 's', '2', '9', 0,
  /* 1709 */ 'w', '2', '9', 0,
  /* 1713 */ 'x', '2', '9', 0,
  /* 1717 */ 'D', '6', '_', 'D', '7', '_', 'D', '8', '_', 'D', '9', 0,
  /* 1729 */ 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', 0,
  /* 1741 */ 'b', '9', 0,
  /* 1744 */ 'd', '9', 0,
  /* 1747 */ 'h', '9', 0,
  /* 1750 */ 'q', '9', 0,
  /* 1753 */ 's', '9', 0,
  /* 1756 */ 'w', '9', 0,
  /* 1759 */ 'x', '9', 0,
  /* 1762 */ 'w', 's', 'p', 0,
  /* 1766 */ 'w', 'z', 'r', 0,
  /* 1770 */ 'x', 'z', 'r', 0,
  /* 1774 */ 'n', 'z', 'c', 'v', 0,
  };

  static const uint32_t RegAsmOffsetNoRegAltName[] = {
    1713, 170, 1774, 1763, 1762, 1766, 1770, 204, 421, 586, 751, 916, 1081, 1246, 
    1411, 1576, 1741, 26, 253, 472, 639, 804, 969, 1134, 1299, 1464, 1629, 86, 
    313, 532, 699, 864, 1029, 1194, 1359, 1524, 1689, 146, 373, 207, 424, 589, 
    754, 919, 1084, 1249, 1414, 1579, 1744, 30, 257, 476, 643, 808, 973, 1138, 
    1303, 1468, 1633, 90, 317, 536, 703, 868, 1033, 1198, 1363, 1528, 1693, 150, 
    377, 210, 427, 592, 757, 922, 1087, 1252, 1417, 1582, 1747, 34, 261, 480, 
    647, 812, 977, 1142, 1307, 1472, 1637, 94, 321, 540, 707, 872, 1037, 1202, 
    1367, 1532, 1697, 154, 381, 213, 430, 595, 760, 925, 1090, 1255, 1420, 1585, 
    1750, 38, 265, 484, 651, 816, 981, 1146, 1311, 1476, 1641, 98, 325, 544, 
    711, 876, 1041, 1206, 1371, 1536, 1701, 158, 385, 216, 433, 598, 763, 928, 
    1093, 1258, 1423, 1588, 1753, 42, 269, 488, 655, 820, 985, 1150, 1315, 1480, 
    1645, 102, 329, 548, 715, 880, 1045, 1210, 1375, 1540, 1705, 162, 389, 219, 
    436, 601, 766, 931, 1096, 1261, 1426, 1591, 1756, 46, 273, 492, 659, 824, 
    989, 1154, 1319, 1484, 1649, 106, 333, 552, 719, 884, 1049, 1214, 1379, 1544, 
    1709, 166, 222, 439, 604, 769, 934, 1099, 1264, 1429, 1594, 1759, 50, 277, 
    496, 663, 828, 993, 1158, 1323, 1488, 1653, 110, 337, 556, 723, 888, 1053, 
    1218, 1383, 1548, 401, 567, 733, 898, 1063, 1228, 1393, 1558, 1723, 6, 231, 
    449, 615, 780, 945, 1110, 1275, 1440, 1605, 62, 289, 508, 675, 840, 1005, 
    1170, 1335, 1500, 1665, 122, 349, 182, 727, 892, 1057, 1222, 1387, 1552, 1717, 
    0, 225, 442, 607, 772, 937, 1102, 1267, 1432, 1597, 54, 281, 500, 667, 
    832, 997, 1162, 1327, 1492, 1657, 114, 341, 174, 393, 560, 564, 730, 895, 
    1060, 1225, 1390, 1555, 1720, 3, 228, 445, 611, 776, 941, 1106, 1271, 1436, 
    1601, 58, 285, 504, 671, 836, 1001, 1166, 1331, 1496, 1661, 118, 345, 178, 
    397, 415, 580, 745, 910, 1075, 1240, 1405, 1570, 1735, 19, 245, 464, 631, 
    796, 961, 1126, 1291, 1456, 1621, 78, 305, 524, 691, 856, 1021, 1186, 1351, 
    1516, 1681, 138, 365, 197, 739, 904, 1069, 1234, 1399, 1564, 1729, 13, 239, 
    457, 623, 788, 953, 1118, 1283, 1448, 1613, 70, 297, 516, 683, 848, 1013, 
    1178, 1343, 1508, 1673, 130, 357, 189, 407, 573, 577, 742, 907, 1072, 1237, 
    1402, 1567, 1732, 16, 242, 460, 627, 792, 957, 1122, 1287, 1452, 1617, 74, 
    301, 520, 687, 852, 1017, 1182, 1347, 1512, 1677, 134, 361, 193, 411, 
  };

  static const char AsmStrsvlist1[] = {
  /* 0 */ 0,
  };

  static const uint32_t RegAsmOffsetvlist1[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  };

  static const char AsmStrsvreg[] = {
  /* 0 */ 'v', '1', '0', 0,
  /* 4 */ 'v', '2', '0', 0,
  /* 8 */ 'v', '3', '0', 0,
  /* 12 */ 'v', '0', 0,
  /* 15 */ 'v', '1', '1', 0,
  /* 19 */ 'v', '2', '1', 0,
  /* 23 */ 'v', '3', '1', 0,
  /* 27 */ 'v', '1', 0,
  /* 30 */ 'v', '1', '2', 0,
  /* 34 */ 'v', '2', '2', 0,
  /* 38 */ 'v', '2', 0,
  /* 41 */ 'v', '1', '3', 0,
  /* 45 */ 'v', '2', '3', 0,
  /* 49 */ 'v', '3', 0,
  /* 52 */ 'v', '1', '4', 0,
  /* 56 */ 'v', '2', '4', 0,
  /* 60 */ 'v', '4', 0,
  /* 63 */ 'v', '1', '5', 0,
  /* 67 */ 'v', '2', '5', 0,
  /* 71 */ 'v', '5', 0,
  /* 74 */ 'v', '1', '6', 0,
  /* 78 */ 'v', '2', '6', 0,
  /* 82 */ 'v', '6', 0,
  /* 85 */ 'v', '1', '7', 0,
  /* 89 */ 'v', '2', '7', 0,
  /* 93 */ 'v', '7', 0,
  /* 96 */ 'v', '1', '8', 0,
  /* 100 */ 'v', '2', '8', 0,
  /* 104 */ 'v', '8', 0,
  /* 107 */ 'v', '1', '9', 0,
  /* 111 */ 'v', '2', '9', 0,
  /* 115 */ 'v', '9', 0,
  };

  static const uint32_t RegAsmOffsetvreg[] = {
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 27, 38, 
    49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 
    85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 
    23, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 12, 27, 38, 49, 60, 71, 82, 93, 104, 
    115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 
    45, 56, 67, 78, 89, 100, 111, 8, 23, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 
    15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 
    67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 
    93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 
    19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 
    49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 
    85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 
    23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 
    41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 
    89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 
    115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 
    45, 56, 67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 
    71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 
    107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 
  };

  const uint32_t *RegAsmOffset;
  const char *AsmStrs;
  switch(AltIdx) {
  default: llvm_unreachable("Invalid register alt name index!");
  case AArch64::NoRegAltName:
    AsmStrs = AsmStrsNoRegAltName;
    RegAsmOffset = RegAsmOffsetNoRegAltName;
    break;
  case AArch64::vlist1:
    AsmStrs = AsmStrsvlist1;
    RegAsmOffset = RegAsmOffsetvlist1;
    break;
  case AArch64::vreg:
    AsmStrs = AsmStrsvreg;
    RegAsmOffset = RegAsmOffsetvreg;
    break;
}
  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static bool AArch64AppleInstPrinterValidateMCOperand(
       const MCOperand &MCOp, unsigned PredicateIndex);
bool AArch64AppleInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case AArch64::ADDSWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (ADDSWri WZR, GPR32sp:$src, addsub_shifted_imm32:$imm)
      AsmString = "cmn $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::ADDSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "cmn $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSWrs WZR, GPR32:$src1, GPR32:$src2, arith_shift32:$sh)
      AsmString = "cmn $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "adds $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDSWrx WZR, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "cmn $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSWrx WZR, GPR32sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmn $\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDSWrx GPR32:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "adds $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (ADDSXri XZR, GPR64sp:$src, addsub_shifted_imm64:$imm)
      AsmString = "cmn $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::ADDSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "cmn $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrs XZR, GPR64:$src1, GPR64:$src2, arith_shift64:$sh)
      AsmString = "cmn $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "adds $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSXrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrx XZR, GPR64sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmn $\x02, $\x03$\xFF\x04\x03";
      break;
    }
    return false;
  case AArch64::ADDSXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDSXrx64 XZR, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "cmn $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrx64 XZR, GPR64sp:$src1, GPR64:$src2, arith_extendlsl64:$sh)
      AsmString = "cmn $\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDSXrx64 GPR64:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "adds $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWri GPR32sponly:$dst, GPR32sp:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWri GPR32sp:$dst, GPR32sponly:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::ADDWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "add $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDWrx GPR32sponly:$dst, GPR32sp:$src1, GPR32:$src2, 16)
      AsmString = "add $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDWrx GPR32sp:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "add $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXri GPR64sponly:$dst, GPR64sp:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXri GPR64sp:$dst, GPR64sponly:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::ADDXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "add $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDXrx64 GPR64sponly:$dst, GPR64sp:$src1, GPR64:$src2, 24)
      AsmString = "add $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDXrx64 GPR64sp:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "add $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDSWri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (ANDSWri WZR, GPR32:$src1, logical_imm32:$src2)
      AsmString = "tst $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case AArch64::ANDSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "tst $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ANDSWrs WZR, GPR32:$src1, GPR32:$src2, logical_shift32:$sh)
      AsmString = "tst $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "ands $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDSXri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (ANDSXri XZR, GPR64:$src1, logical_imm64:$src2)
      AsmString = "tst $\x02, $\xFF\x03\x05";
      break;
    }
    return false;
  case AArch64::ANDSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "tst $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ANDSXrs XZR, GPR64:$src1, GPR64:$src2, logical_shift64:$sh)
      AsmString = "tst $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "ands $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "and $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "and $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "bics $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "bics $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "bic $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "bic $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICv2i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv2i32 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.2s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::BICv4i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv4i16 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.4h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::BICv4i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv4i32 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.4s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::BICv8i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv8i16 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.8h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::CLREX:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (CLREX 15)
      AsmString = "clrex";
      break;
    }
    return false;
  case AArch64::CSINCWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).getReg() == AArch64::WZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINCWr GPR32:$dst, WZR, WZR, inv_ccode:$cc)
      AsmString = "cset $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINCWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cinc $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINCXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINCXr GPR64:$dst, XZR, XZR, inv_ccode:$cc)
      AsmString = "cset $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINCXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cinc $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINVWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).getReg() == AArch64::WZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINVWr GPR32:$dst, WZR, WZR, inv_ccode:$cc)
      AsmString = "csetm $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINVWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cinv $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINVXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINVXr GPR64:$dst, XZR, XZR, inv_ccode:$cc)
      AsmString = "csetm $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINVXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cinv $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSNEGWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSNEGWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cneg $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSNEGXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSNEGXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cneg $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::DCPS1:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS1 0)
      AsmString = "dcps1";
      break;
    }
    return false;
  case AArch64::DCPS2:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS2 0)
      AsmString = "dcps2";
      break;
    }
    return false;
  case AArch64::DCPS3:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS3 0)
      AsmString = "dcps3";
      break;
    }
    return false;
  case AArch64::EONWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "eon $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EONXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "eon $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EORWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "eor $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EORXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "eor $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EXTRWrri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (EXTRWrri GPR32:$dst, GPR32:$src, GPR32:$src, imm0_31:$shift)
      AsmString = "ror $\x01, $\x02, $\x04";
      break;
    }
    return false;
  case AArch64::EXTRXrri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (EXTRXrri GPR64:$dst, GPR64:$src, GPR64:$src, imm0_63:$shift)
      AsmString = "ror $\x01, $\x02, $\x04";
      break;
    }
    return false;
  case AArch64::HINT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (HINT { 0, 0, 0 })
      AsmString = "nop";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (HINT { 0, 0, 1 })
      AsmString = "yield";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (HINT { 0, 1, 0 })
      AsmString = "wfe";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 3) {
      // (HINT { 0, 1, 1 })
      AsmString = "wfi";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4) {
      // (HINT { 1, 0, 0 })
      AsmString = "sev";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 5) {
      // (HINT { 1, 0, 1 })
      AsmString = "sevl";
      break;
    }
    return false;
  case AArch64::INSvi16gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi16gpr V128:$dst, VectorIndexH:$idx, GPR32:$src)
      AsmString = "mov.h	$\xFF\x01\x06$\xFF\x02\x09, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi16lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi16lane V128:$dst, VectorIndexH:$idx, V128:$src, VectorIndexH:$idx2)
      AsmString = "mov.h $\xFF\x01\x06$\xFF\x02\x09, $\xFF\x03\x06$\xFF\x04\x09";
      break;
    }
    return false;
  case AArch64::INSvi32gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi32gpr V128:$dst, VectorIndexS:$idx, GPR32:$src)
      AsmString = "mov.s	$\xFF\x01\x06$\xFF\x02\x09, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi32lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi32lane V128:$dst, VectorIndexS:$idx, V128:$src, VectorIndexS:$idx2)
      AsmString = "mov.s $\xFF\x01\x06$\xFF\x02\x09, $\xFF\x03\x06$\xFF\x04\x09";
      break;
    }
    return false;
  case AArch64::INSvi64gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi64gpr V128:$dst, VectorIndexD:$idx, GPR64:$src)
      AsmString = "mov.d	$\xFF\x01\x06$\xFF\x02\x09, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi64lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi64lane V128:$dst, VectorIndexD:$idx, V128:$src, VectorIndexD:$idx2)
      AsmString = "mov.d $\xFF\x01\x06$\xFF\x02\x09, $\xFF\x03\x06$\xFF\x04\x09";
      break;
    }
    return false;
  case AArch64::INSvi8gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi8gpr V128:$dst, VectorIndexB:$idx, GPR32:$src)
      AsmString = "mov.b	$\xFF\x01\x06$\xFF\x02\x09, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi8lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi8lane V128:$dst, VectorIndexB:$idx, V128:$src, VectorIndexB:$idx2)
      AsmString = "mov.b $\xFF\x01\x06$\xFF\x02\x09, $\xFF\x03\x06$\xFF\x04\x09";
      break;
    }
    return false;
  case AArch64::ISB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (ISB 15)
      AsmString = "isb";
      break;
    }
    return false;
  case AArch64::LD1Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0A, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Onev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0A, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD1Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0B, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0C, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0D, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0E, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0F, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x10, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD1Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x11, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0A, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD1i16_POST GPR64sp:$Rn, VecListOneh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD1i32_POST GPR64sp:$Rn, VecListOnes:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD1i64_POST GPR64sp:$Rn, VecListOned:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD1i8_POST GPR64sp:$Rn, VecListOneb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD2Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD2Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0D, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0E, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0F, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x10, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD2Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x11, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD2i16_POST GPR64sp:$Rn, VecListTwoh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD2i32_POST GPR64sp:$Rn, VecListTwos:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD2i64_POST GPR64sp:$Rn, VecListTwod:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD2i8_POST GPR64sp:$Rn, VecListTwob:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD3Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0A, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD3Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0B, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0D, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0E, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0F, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x10, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD3Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x11, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0A, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0C, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0D, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0F, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x10, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x11, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD3i16_POST GPR64sp:$Rn, VecListThreeh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD3i32_POST GPR64sp:$Rn, VecListThrees:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD3i64_POST GPR64sp:$Rn, VecListThreed:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD3i8_POST GPR64sp:$Rn, VecListThreeb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD4Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0A, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0C, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0F, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x11, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD4Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x10, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD4Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x11, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD4i16_POST GPR64sp:$Rn, VecListFourh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD4i32_POST GPR64sp:$Rn, VecListFours:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD4i64_POST GPR64sp:$Rn, VecListFourd:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD4i8_POST GPR64sp:$Rn, VecListFourb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LDNPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPSWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSWi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldpsw $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDRBBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRBBroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrb $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRBBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRBBui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRBroX FPR8:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRBui FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRDroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRDroX FPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRDui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRDui FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRHHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRHHroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrh $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRHHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRHHui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRHroX FPR16:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRHui FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRQroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRQroX FPR128:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRQui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRQui FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSBWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSBWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsb $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSBWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSBXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSBXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsb $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSBXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSHWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSHWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsh $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSHWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSHXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSHXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsh $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSHXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSWroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsw $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSWui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsw $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSroX FPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSui FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSBWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSBXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSHWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSHXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSWi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsw $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURBBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURBBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldurb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURBi FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURDi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURDi FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURHHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURHHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldurh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURHi FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURQi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURQi FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSBWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSBWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSBXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSBXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSHWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSHWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSHXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSHXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSWi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursw $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSi FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::MADDWrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MADDWrrr GPR32:$dst, GPR32:$src1, GPR32:$src2, WZR)
      AsmString = "mul $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MADDXrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MADDXrrr GPR64:$dst, GPR64:$src1, GPR64:$src2, XZR)
      AsmString = "mul $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MOVKWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 16) {
      // (MOVKWi GPR32:$Rd, movk_symbol_g1:$sym, 16)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::MOVKXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 48) {
      // (MOVKXi GPR64:$Rd, movk_symbol_g3:$sym, 48)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 32) {
      // (MOVKXi GPR64:$Rd, movk_symbol_g2:$sym, 32)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 16) {
      // (MOVKXi GPR64:$Rd, movk_symbol_g1:$sym, 16)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::MSUBWrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MSUBWrrr GPR32:$dst, GPR32:$src1, GPR32:$src2, WZR)
      AsmString = "mneg $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MSUBXrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MSUBXrrr GPR64:$dst, GPR64:$src1, GPR64:$src2, XZR)
      AsmString = "mneg $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::NOTv16i8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg())) {
      // (NOTv16i8 V128:$Vd, V128:$Vn)
      AsmString = "mvn.16b $\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::NOTv8i8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (NOTv8i8 V64:$Vd, V64:$Vn)
      AsmString = "mvn.8b $\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::ORNWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNWrs GPR32:$Wd, WZR, GPR32:$Wm, 0)
      AsmString = "mvn $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ORNWrs GPR32:$Wd, WZR, GPR32:$Wm, logical_shift32:$sh)
      AsmString = "mvn $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "orn $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORNXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNXrs GPR64:$Xd, XZR, GPR64:$Xm, 0)
      AsmString = "mvn $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ORNXrs GPR64:$Xd, XZR, GPR64:$Xm, logical_shift64:$sh)
      AsmString = "mvn $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "orn $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "mov $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "orr $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "mov $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "orr $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRv16i8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRv16i8 V128:$dst, V128:$src, V128:$src)
      AsmString = "mov.16b	$\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::ORRv2i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv2i32 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.2s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv4i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv4i16 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.4h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv4i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv4i32 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.4s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv8i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv8i16 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.8h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv8i8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRv8i8 V64:$dst, V64:$src, V64:$src)
      AsmString = "mov.8b	$\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::PRFMroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (PRFMroX prfop:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "prfm $\xFF\x01\x16, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::PRFMui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (PRFMui prfop:$Rt, GPR64sp:$Rn, 0)
      AsmString = "prfm $\xFF\x01\x16, [$\x02]";
      break;
    }
    return false;
  case AArch64::PRFUMi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (PRFUMi prfop:$Rt, GPR64sp:$Rn, 0)
      AsmString = "prfum $\xFF\x01\x16, [$\x02]";
      break;
    }
    return false;
  case AArch64::RET:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == AArch64::LR) {
      // (RET LR)
      AsmString = "ret";
      break;
    }
    return false;
  case AArch64::SBCSWr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSWr GPR32:$dst, WZR, GPR32:$src)
      AsmString = "ngcs $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCSXr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSXr GPR64:$dst, XZR, GPR64:$src)
      AsmString = "ngcs $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCWr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCWr GPR32:$dst, WZR, GPR32:$src)
      AsmString = "ngc $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCXr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCXr GPR64:$dst, XZR, GPR64:$src)
      AsmString = "ngc $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBFMWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (SBFMWri GPR32:$dst, GPR32:$src, imm0_31:$shift, 31)
      AsmString = "asr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (SBFMWri GPR32:$dst, GPR32:$src, 0, 7)
      AsmString = "sxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (SBFMWri GPR32:$dst, GPR32:$src, 0, 15)
      AsmString = "sxth $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::SBFMXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 63) {
      // (SBFMXri GPR64:$dst, GPR64:$src, imm0_63:$shift, 63)
      AsmString = "asr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 7)
      AsmString = "sxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 15)
      AsmString = "sxth $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 31)
      AsmString = "sxtw $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::SMADDLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMADDLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "smull $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SMSUBLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMSUBLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "smnegl $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ST1Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0A, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Onev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0A, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST1i16_POST GPR64sp:$Rn, VecListOneh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::ST1i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST1i32_POST GPR64sp:$Rn, VecListOnes:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::ST1i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST1i64_POST GPR64sp:$Rn, VecListOned:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST1i8_POST GPR64sp:$Rn, VecListOneb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::ST2Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST2Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST2Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST2Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST2Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST2Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST2Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST2Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST2i16_POST GPR64sp:$Rn, VecListTwoh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::ST2i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST2i32_POST GPR64sp:$Rn, VecListTwos:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST2i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST2i64_POST GPR64sp:$Rn, VecListTwod:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST2i8_POST GPR64sp:$Rn, VecListTwob:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::ST3Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST3Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0A, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST3Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0C, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST3Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0D, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST3Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST3Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0F, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST3Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x10, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST3Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x11, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST3i16_POST GPR64sp:$Rn, VecListThreeh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::ST3i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST3i32_POST GPR64sp:$Rn, VecListThrees:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::ST3i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST3i64_POST GPR64sp:$Rn, VecListThreed:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST3i8_POST GPR64sp:$Rn, VecListThreeb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::ST4Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST4Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0A, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST4Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0C, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST4Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST4Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST4Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0F, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST4Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST4Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x11, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST4i16_POST GPR64sp:$Rn, VecListFourh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST4i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST4i32_POST GPR64sp:$Rn, VecListFours:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST4i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST4i64_POST GPR64sp:$Rn, VecListFourd:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST4i8_POST GPR64sp:$Rn, VecListFourb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::STNPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STRBBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRBBroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "strb $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRBBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRBBui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "strb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRBroX FPR8:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRBui FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRDroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRDroX FPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRDui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRDui FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRHHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRHHroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "strh $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRHHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRHHui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "strh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRHroX FPR16:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRHui FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRQroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRQroX FPR128:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRQui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRQui FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRSroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRSroX FPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRSui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRSui FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttrb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttrh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURBBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURBBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sturb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURBi FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURDi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURDi FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURHHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURHHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sturh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURHi FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURQi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURQi FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURSi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURSi FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::SUBSWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (SUBSWri WZR, GPR32sp:$src, addsub_shifted_imm32:$imm)
      AsmString = "cmp $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::SUBSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "cmp $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrs WZR, GPR32:$src1, GPR32:$src2, arith_shift32:$sh)
      AsmString = "cmp $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "negs $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrs GPR32:$dst, WZR, GPR32:$src, arith_shift32:$shift)
      AsmString = "negs $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "subs $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBSWrx WZR, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "cmp $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrx WZR, GPR32sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmp $\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBSWrx GPR32:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "subs $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (SUBSXri XZR, GPR64sp:$src, addsub_shifted_imm64:$imm)
      AsmString = "cmp $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::SUBSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "cmp $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrs XZR, GPR64:$src1, GPR64:$src2, arith_shift64:$sh)
      AsmString = "cmp $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "negs $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrs GPR64:$dst, XZR, GPR64:$src, arith_shift64:$shift)
      AsmString = "negs $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "subs $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSXrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrx XZR, GPR64sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmp $\x02, $\x03$\xFF\x04\x03";
      break;
    }
    return false;
  case AArch64::SUBSXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBSXrx64 XZR, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "cmp $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrx64 XZR, GPR64sp:$src1, GPR64:$src2, arith_extendlsl64:$sh)
      AsmString = "cmp $\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBSXrx64 GPR64:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "subs $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBWrs GPR32:$dst, WZR, GPR32:$src, arith_shift32:$shift)
      AsmString = "neg $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "sub $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBWrx GPR32sponly:$dst, GPR32sp:$src1, GPR32:$src2, 16)
      AsmString = "sub $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBWrx GPR32sp:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "sub $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBXrs GPR64:$dst, XZR, GPR64:$src, arith_shift64:$shift)
      AsmString = "neg $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "sub $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBXrx64 GPR64sponly:$dst, GPR64sp:$src1, GPR64:$src2, 24)
      AsmString = "sub $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBXrx64 GPR64sp:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "sub $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SYSxt:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(4).getReg() == AArch64::XZR) {
      // (SYSxt imm0_7:$op1, sys_cr_op:$Cn, sys_cr_op:$Cm, imm0_7:$op2, XZR)
      AsmString = "sys $\x01, $\xFF\x02\x17, $\xFF\x03\x17, $\x04";
      break;
    }
    return false;
  case AArch64::UBFMWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (UBFMWri GPR32:$dst, GPR32:$src, imm0_31:$shift, 31)
      AsmString = "lsr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (UBFMWri GPR32:$dst, GPR32:$src, 0, 7)
      AsmString = "uxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (UBFMWri GPR32:$dst, GPR32:$src, 0, 15)
      AsmString = "uxth $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::UBFMXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 63) {
      // (UBFMXri GPR64:$dst, GPR64:$src, imm0_63:$shift, 63)
      AsmString = "lsr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 7)
      AsmString = "uxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 15)
      AsmString = "uxth $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 31)
      AsmString = "uxtw $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::UMADDLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMADDLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "umull $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::UMOVvi32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg())) {
      // (UMOVvi32 GPR32:$dst, V128:$src, VectorIndexS:$idx)
      AsmString = "mov.s	$\x01, $\xFF\x02\x06$\xFF\x03\x09";
      break;
    }
    return false;
  case AArch64::UMOVvi64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg())) {
      // (UMOVvi64 GPR64:$dst, V128:$src, VectorIndexD:$idx)
      AsmString = "mov.d	$\x01, $\xFF\x02\x06$\xFF\x03\x09";
      break;
    }
    return false;
  case AArch64::UMSUBLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMSUBLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "umnegl $\x01, $\x02, $\x03";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '	' &&
         AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void AArch64AppleInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx, raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printAddSubImm(MI, OpIdx, OS);
    break;
  case 1:
    printShifter(MI, OpIdx, OS);
    break;
  case 2:
    printArithExtend(MI, OpIdx, OS);
    break;
  case 3:
    printLogicalImm32(MI, OpIdx, OS);
    break;
  case 4:
    printLogicalImm64(MI, OpIdx, OS);
    break;
  case 5:
    printVRegOperand(MI, OpIdx, OS);
    break;
  case 6:
    printHexImm(MI, OpIdx, OS);
    break;
  case 7:
    printInverseCondCode(MI, OpIdx, OS);
    break;
  case 8:
    printVectorIndex(MI, OpIdx, OS);
    break;
  case 9:
    printTypedVectorList<16, 'b'>(MI, OpIdx, OS);
    break;
  case 10:
    printTypedVectorList<1, 'd'>(MI, OpIdx, OS);
    break;
  case 11:
    printTypedVectorList<2, 'd'>(MI, OpIdx, OS);
    break;
  case 12:
    printTypedVectorList<2, 's'>(MI, OpIdx, OS);
    break;
  case 13:
    printTypedVectorList<4, 'h'>(MI, OpIdx, OS);
    break;
  case 14:
    printTypedVectorList<4, 's'>(MI, OpIdx, OS);
    break;
  case 15:
    printTypedVectorList<8, 'b'>(MI, OpIdx, OS);
    break;
  case 16:
    printTypedVectorList<8, 'h'>(MI, OpIdx, OS);
    break;
  case 17:
    printTypedVectorList<0, 'h'>(MI, OpIdx, OS);
    break;
  case 18:
    printTypedVectorList<0, 's'>(MI, OpIdx, OS);
    break;
  case 19:
    printTypedVectorList<0, 'd'>(MI, OpIdx, OS);
    break;
  case 20:
    printTypedVectorList<0, 'b'>(MI, OpIdx, OS);
    break;
  case 21:
    printPrefetchOp(MI, OpIdx, OS);
    break;
  case 22:
    printSysCROperand(MI, OpIdx, OS);
    break;
  }
}

static bool AArch64AppleInstPrinterValidateMCOperand(
       const MCOperand &MCOp, unsigned PredicateIndex) {
  switch (PredicateIndex) {
  default:
    llvm_unreachable("Unknown MCOperandPredicate kind");
    break;
  case 1: {

    return MCOp.isImm() &&
           MCOp.getImm() != AArch64CC::AL &&
           MCOp.getImm() != AArch64CC::NV;
  
    }
  }
}

#endif // PRINT_ALIAS_INSTR
