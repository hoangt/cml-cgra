/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Register Enum Values                                                 *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM
namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass SystemZMCRegisterClasses[];

namespace SystemZ {
enum {
  NoRegister,
  CC = 1,
  F0D = 2,
  F1D = 3,
  F2D = 4,
  F3D = 5,
  F4D = 6,
  F5D = 7,
  F6D = 8,
  F7D = 9,
  F8D = 10,
  F9D = 11,
  F10D = 12,
  F11D = 13,
  F12D = 14,
  F13D = 15,
  F14D = 16,
  F15D = 17,
  F0Q = 18,
  F1Q = 19,
  F4Q = 20,
  F5Q = 21,
  F8Q = 22,
  F9Q = 23,
  F12Q = 24,
  F13Q = 25,
  F0S = 26,
  F1S = 27,
  F2S = 28,
  F3S = 29,
  F4S = 30,
  F5S = 31,
  F6S = 32,
  F7S = 33,
  F8S = 34,
  F9S = 35,
  F10S = 36,
  F11S = 37,
  F12S = 38,
  F13S = 39,
  F14S = 40,
  F15S = 41,
  R0D = 42,
  R1D = 43,
  R2D = 44,
  R3D = 45,
  R4D = 46,
  R5D = 47,
  R6D = 48,
  R7D = 49,
  R8D = 50,
  R9D = 51,
  R10D = 52,
  R11D = 53,
  R12D = 54,
  R13D = 55,
  R14D = 56,
  R15D = 57,
  R0H = 58,
  R1H = 59,
  R2H = 60,
  R3H = 61,
  R4H = 62,
  R5H = 63,
  R6H = 64,
  R7H = 65,
  R8H = 66,
  R9H = 67,
  R10H = 68,
  R11H = 69,
  R12H = 70,
  R13H = 71,
  R14H = 72,
  R15H = 73,
  R0L = 74,
  R1L = 75,
  R2L = 76,
  R3L = 77,
  R4L = 78,
  R5L = 79,
  R6L = 80,
  R7L = 81,
  R8L = 82,
  R9L = 83,
  R10L = 84,
  R11L = 85,
  R12L = 86,
  R13L = 87,
  R14L = 88,
  R15L = 89,
  R0Q = 90,
  R2Q = 91,
  R4Q = 92,
  R6Q = 93,
  R8Q = 94,
  R10Q = 95,
  R12Q = 96,
  R14Q = 97,
  NUM_TARGET_REGS 	// 98
};
}

// Register classes
namespace SystemZ {
enum {
  GRX32BitRegClassID = 0,
  FP32BitRegClassID = 1,
  GR32BitRegClassID = 2,
  GRH32BitRegClassID = 3,
  ADDR32BitRegClassID = 4,
  CCRegsRegClassID = 5,
  FP64BitRegClassID = 6,
  GR64BitRegClassID = 7,
  ADDR64BitRegClassID = 8,
  FP128BitRegClassID = 9,
  GR128BitRegClassID = 10,
  ADDR128BitRegClassID = 11
  };
}

// Subregister indices
namespace SystemZ {
enum {
  NoSubRegister,
  subreg_h32,	// 1
  subreg_h64,	// 2
  subreg_hh32,	// 3
  subreg_hl32,	// 4
  subreg_l32,	// 5
  subreg_l64,	// 6
  NUM_TARGET_SUBREGS
};
}
} // End llvm namespace 
#endif // GET_REGINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*MC Register Information                                                     *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC
namespace llvm {

extern const MCPhysReg SystemZRegDiffLists[] = {
  /* 0 */ 65193, 1, 1, 1, 0,
  /* 5 */ 65469, 1, 0,
  /* 8 */ 65519, 2, 0,
  /* 11 */ 65521, 2, 0,
  /* 14 */ 65523, 2, 0,
  /* 17 */ 65525, 2, 0,
  /* 20 */ 65512, 8, 0,
  /* 23 */ 65512, 10, 0,
  /* 26 */ 65512, 12, 0,
  /* 29 */ 65512, 14, 0,
  /* 32 */ 65512, 16, 0,
  /* 35 */ 65522, 24, 65510, 24, 0,
  /* 40 */ 65524, 24, 65510, 24, 0,
  /* 45 */ 65526, 24, 65510, 24, 0,
  /* 50 */ 65528, 24, 65510, 24, 0,
  /* 55 */ 65504, 40, 0,
  /* 58 */ 65520, 40, 0,
  /* 61 */ 65504, 41, 0,
  /* 64 */ 65520, 41, 0,
  /* 67 */ 65504, 42, 0,
  /* 70 */ 65520, 42, 0,
  /* 73 */ 65504, 43, 0,
  /* 76 */ 65520, 43, 0,
  /* 79 */ 65504, 44, 0,
  /* 82 */ 65520, 44, 0,
  /* 85 */ 65504, 45, 0,
  /* 88 */ 65520, 45, 0,
  /* 91 */ 65504, 46, 0,
  /* 94 */ 65520, 46, 0,
  /* 97 */ 65504, 47, 0,
  /* 100 */ 65520, 47, 0,
  /* 103 */ 65504, 48, 0,
  /* 106 */ 65520, 48, 0,
  /* 109 */ 65405, 0,
  /* 111 */ 65438, 0,
  /* 113 */ 65511, 0,
  /* 115 */ 65489, 32, 65520, 65519, 32, 65520, 0,
  /* 122 */ 65490, 32, 65520, 65519, 32, 65520, 0,
  /* 129 */ 65491, 32, 65520, 65519, 32, 65520, 0,
  /* 136 */ 65492, 32, 65520, 65519, 32, 65520, 0,
  /* 143 */ 65493, 32, 65520, 65519, 32, 65520, 0,
  /* 150 */ 65494, 32, 65520, 65519, 32, 65520, 0,
  /* 157 */ 65495, 32, 65520, 65519, 32, 65520, 0,
  /* 164 */ 65496, 32, 65520, 65519, 32, 65520, 0,
  /* 171 */ 65535, 0,
};

extern const uint16_t SystemZSubRegIdxLists[] = {
  /* 0 */ 5, 1, 0,
  /* 3 */ 6, 1, 2, 3, 0,
  /* 8 */ 6, 5, 1, 2, 4, 3, 0,
};

extern const MCRegisterInfo::SubRegCoveredBits SystemZSubRegIdxRanges[] = {
  { 65535, 65535 },
  { 32, 32 },	// subreg_h32
  { 64, 64 },	// subreg_h64
  { 96, 32 },	// subreg_hh32
  { 64, 32 },	// subreg_hl32
  { 0, 32 },	// subreg_l32
  { 0, 64 },	// subreg_l64
};

extern const char SystemZRegStrings[] = {
  /* 0 */ 'C', 'C', 0,
  /* 3 */ 'F', '1', '0', 'D', 0,
  /* 8 */ 'R', '1', '0', 'D', 0,
  /* 13 */ 'F', '0', 'D', 0,
  /* 17 */ 'R', '0', 'D', 0,
  /* 21 */ 'F', '1', '1', 'D', 0,
  /* 26 */ 'R', '1', '1', 'D', 0,
  /* 31 */ 'F', '1', 'D', 0,
  /* 35 */ 'R', '1', 'D', 0,
  /* 39 */ 'F', '1', '2', 'D', 0,
  /* 44 */ 'R', '1', '2', 'D', 0,
  /* 49 */ 'F', '2', 'D', 0,
  /* 53 */ 'R', '2', 'D', 0,
  /* 57 */ 'F', '1', '3', 'D', 0,
  /* 62 */ 'R', '1', '3', 'D', 0,
  /* 67 */ 'F', '3', 'D', 0,
  /* 71 */ 'R', '3', 'D', 0,
  /* 75 */ 'F', '1', '4', 'D', 0,
  /* 80 */ 'R', '1', '4', 'D', 0,
  /* 85 */ 'F', '4', 'D', 0,
  /* 89 */ 'R', '4', 'D', 0,
  /* 93 */ 'F', '1', '5', 'D', 0,
  /* 98 */ 'R', '1', '5', 'D', 0,
  /* 103 */ 'F', '5', 'D', 0,
  /* 107 */ 'R', '5', 'D', 0,
  /* 111 */ 'F', '6', 'D', 0,
  /* 115 */ 'R', '6', 'D', 0,
  /* 119 */ 'F', '7', 'D', 0,
  /* 123 */ 'R', '7', 'D', 0,
  /* 127 */ 'F', '8', 'D', 0,
  /* 131 */ 'R', '8', 'D', 0,
  /* 135 */ 'F', '9', 'D', 0,
  /* 139 */ 'R', '9', 'D', 0,
  /* 143 */ 'R', '1', '0', 'H', 0,
  /* 148 */ 'R', '0', 'H', 0,
  /* 152 */ 'R', '1', '1', 'H', 0,
  /* 157 */ 'R', '1', 'H', 0,
  /* 161 */ 'R', '1', '2', 'H', 0,
  /* 166 */ 'R', '2', 'H', 0,
  /* 170 */ 'R', '1', '3', 'H', 0,
  /* 175 */ 'R', '3', 'H', 0,
  /* 179 */ 'R', '1', '4', 'H', 0,
  /* 184 */ 'R', '4', 'H', 0,
  /* 188 */ 'R', '1', '5', 'H', 0,
  /* 193 */ 'R', '5', 'H', 0,
  /* 197 */ 'R', '6', 'H', 0,
  /* 201 */ 'R', '7', 'H', 0,
  /* 205 */ 'R', '8', 'H', 0,
  /* 209 */ 'R', '9', 'H', 0,
  /* 213 */ 'R', '1', '0', 'L', 0,
  /* 218 */ 'R', '0', 'L', 0,
  /* 222 */ 'R', '1', '1', 'L', 0,
  /* 227 */ 'R', '1', 'L', 0,
  /* 231 */ 'R', '1', '2', 'L', 0,
  /* 236 */ 'R', '2', 'L', 0,
  /* 240 */ 'R', '1', '3', 'L', 0,
  /* 245 */ 'R', '3', 'L', 0,
  /* 249 */ 'R', '1', '4', 'L', 0,
  /* 254 */ 'R', '4', 'L', 0,
  /* 258 */ 'R', '1', '5', 'L', 0,
  /* 263 */ 'R', '5', 'L', 0,
  /* 267 */ 'R', '6', 'L', 0,
  /* 271 */ 'R', '7', 'L', 0,
  /* 275 */ 'R', '8', 'L', 0,
  /* 279 */ 'R', '9', 'L', 0,
  /* 283 */ 'R', '1', '0', 'Q', 0,
  /* 288 */ 'F', '0', 'Q', 0,
  /* 292 */ 'R', '0', 'Q', 0,
  /* 296 */ 'F', '1', 'Q', 0,
  /* 300 */ 'F', '1', '2', 'Q', 0,
  /* 305 */ 'R', '1', '2', 'Q', 0,
  /* 310 */ 'R', '2', 'Q', 0,
  /* 314 */ 'F', '1', '3', 'Q', 0,
  /* 319 */ 'R', '1', '4', 'Q', 0,
  /* 324 */ 'F', '4', 'Q', 0,
  /* 328 */ 'R', '4', 'Q', 0,
  /* 332 */ 'F', '5', 'Q', 0,
  /* 336 */ 'R', '6', 'Q', 0,
  /* 340 */ 'F', '8', 'Q', 0,
  /* 344 */ 'R', '8', 'Q', 0,
  /* 348 */ 'F', '9', 'Q', 0,
  /* 352 */ 'F', '1', '0', 'S', 0,
  /* 357 */ 'F', '0', 'S', 0,
  /* 361 */ 'F', '1', '1', 'S', 0,
  /* 366 */ 'F', '1', 'S', 0,
  /* 370 */ 'F', '1', '2', 'S', 0,
  /* 375 */ 'F', '2', 'S', 0,
  /* 379 */ 'F', '1', '3', 'S', 0,
  /* 384 */ 'F', '3', 'S', 0,
  /* 388 */ 'F', '1', '4', 'S', 0,
  /* 393 */ 'F', '4', 'S', 0,
  /* 397 */ 'F', '1', '5', 'S', 0,
  /* 402 */ 'F', '5', 'S', 0,
  /* 406 */ 'F', '6', 'S', 0,
  /* 410 */ 'F', '7', 'S', 0,
  /* 414 */ 'F', '8', 'S', 0,
  /* 418 */ 'F', '9', 'S', 0,
};

extern const MCRegisterDesc SystemZRegDesc[] = { // Descriptors
  { 2, 0, 0, 0, 0 },
  { 0, 4, 4, 2, 2737 },
  { 13, 38, 33, 1, 2737 },
  { 31, 38, 33, 1, 2737 },
  { 49, 38, 30, 1, 2737 },
  { 67, 38, 30, 1, 2737 },
  { 85, 38, 30, 1, 2737 },
  { 103, 38, 30, 1, 2737 },
  { 111, 38, 27, 1, 2737 },
  { 119, 38, 27, 1, 2737 },
  { 127, 38, 27, 1, 2737 },
  { 135, 38, 27, 1, 2737 },
  { 3, 38, 24, 1, 2737 },
  { 21, 38, 24, 1, 2737 },
  { 39, 38, 24, 1, 2737 },
  { 57, 38, 24, 1, 2737 },
  { 75, 38, 21, 1, 2737 },
  { 93, 38, 21, 1, 2737 },
  { 288, 35, 4, 3, 129 },
  { 296, 35, 4, 3, 129 },
  { 324, 40, 4, 3, 177 },
  { 332, 40, 4, 3, 177 },
  { 340, 45, 4, 3, 225 },
  { 348, 45, 4, 3, 225 },
  { 300, 50, 4, 3, 273 },
  { 314, 50, 4, 3, 273 },
  { 357, 4, 32, 2, 1809 },
  { 366, 4, 32, 2, 1809 },
  { 375, 4, 29, 2, 1809 },
  { 384, 4, 29, 2, 1809 },
  { 393, 4, 29, 2, 1809 },
  { 402, 4, 29, 2, 1809 },
  { 406, 4, 26, 2, 1809 },
  { 410, 4, 26, 2, 1809 },
  { 414, 4, 26, 2, 1809 },
  { 418, 4, 26, 2, 1809 },
  { 352, 4, 23, 2, 1809 },
  { 361, 4, 23, 2, 1809 },
  { 370, 4, 23, 2, 1809 },
  { 379, 4, 23, 2, 1809 },
  { 388, 4, 20, 2, 1809 },
  { 397, 4, 20, 2, 1809 },
  { 17, 119, 104, 0, 82 },
  { 35, 119, 98, 0, 82 },
  { 53, 119, 98, 0, 82 },
  { 71, 119, 92, 0, 82 },
  { 89, 119, 92, 0, 82 },
  { 107, 119, 86, 0, 82 },
  { 115, 119, 86, 0, 82 },
  { 123, 119, 80, 0, 82 },
  { 131, 119, 80, 0, 82 },
  { 139, 119, 74, 0, 82 },
  { 8, 119, 74, 0, 82 },
  { 26, 119, 68, 0, 82 },
  { 44, 119, 68, 0, 82 },
  { 62, 119, 62, 0, 82 },
  { 80, 119, 62, 0, 82 },
  { 98, 119, 56, 0, 82 },
  { 148, 4, 106, 2, 1778 },
  { 157, 4, 100, 2, 1778 },
  { 166, 4, 100, 2, 1778 },
  { 175, 4, 94, 2, 1778 },
  { 184, 4, 94, 2, 1778 },
  { 193, 4, 88, 2, 1778 },
  { 197, 4, 88, 2, 1778 },
  { 201, 4, 82, 2, 1778 },
  { 205, 4, 82, 2, 1778 },
  { 209, 4, 76, 2, 1778 },
  { 143, 4, 76, 2, 1778 },
  { 152, 4, 70, 2, 1778 },
  { 161, 4, 70, 2, 1778 },
  { 170, 4, 64, 2, 1778 },
  { 179, 4, 64, 2, 1778 },
  { 188, 4, 58, 2, 1778 },
  { 218, 4, 103, 2, 1746 },
  { 227, 4, 97, 2, 1746 },
  { 236, 4, 97, 2, 1746 },
  { 245, 4, 91, 2, 1746 },
  { 254, 4, 91, 2, 1746 },
  { 263, 4, 85, 2, 1746 },
  { 267, 4, 85, 2, 1746 },
  { 271, 4, 79, 2, 1746 },
  { 275, 4, 79, 2, 1746 },
  { 279, 4, 73, 2, 1746 },
  { 213, 4, 73, 2, 1746 },
  { 222, 4, 67, 2, 1746 },
  { 231, 4, 67, 2, 1746 },
  { 240, 4, 61, 2, 1746 },
  { 249, 4, 61, 2, 1746 },
  { 258, 4, 55, 2, 1746 },
  { 292, 115, 4, 8, 4 },
  { 310, 122, 4, 8, 4 },
  { 328, 129, 4, 8, 4 },
  { 336, 136, 4, 8, 4 },
  { 344, 143, 4, 8, 4 },
  { 283, 150, 4, 8, 4 },
  { 305, 157, 4, 8, 4 },
  { 319, 164, 4, 8, 4 },
};

extern const MCPhysReg SystemZRegUnitRoots[][2] = {
  { SystemZ::CC },
  { SystemZ::F0S },
  { SystemZ::F1S },
  { SystemZ::F2S },
  { SystemZ::F3S },
  { SystemZ::F4S },
  { SystemZ::F5S },
  { SystemZ::F6S },
  { SystemZ::F7S },
  { SystemZ::F8S },
  { SystemZ::F9S },
  { SystemZ::F10S },
  { SystemZ::F11S },
  { SystemZ::F12S },
  { SystemZ::F13S },
  { SystemZ::F14S },
  { SystemZ::F15S },
  { SystemZ::R0L },
  { SystemZ::R0H },
  { SystemZ::R1L },
  { SystemZ::R1H },
  { SystemZ::R2L },
  { SystemZ::R2H },
  { SystemZ::R3L },
  { SystemZ::R3H },
  { SystemZ::R4L },
  { SystemZ::R4H },
  { SystemZ::R5L },
  { SystemZ::R5H },
  { SystemZ::R6L },
  { SystemZ::R6H },
  { SystemZ::R7L },
  { SystemZ::R7H },
  { SystemZ::R8L },
  { SystemZ::R8H },
  { SystemZ::R9L },
  { SystemZ::R9H },
  { SystemZ::R10L },
  { SystemZ::R10H },
  { SystemZ::R11L },
  { SystemZ::R11H },
  { SystemZ::R12L },
  { SystemZ::R12H },
  { SystemZ::R13L },
  { SystemZ::R13H },
  { SystemZ::R14L },
  { SystemZ::R14H },
  { SystemZ::R15L },
  { SystemZ::R15H },
};

namespace {     // Register classes...
  // GRX32Bit Register Class...
  const MCPhysReg GRX32Bit[] = {
    SystemZ::R0L, SystemZ::R1L, SystemZ::R2L, SystemZ::R3L, SystemZ::R4L, SystemZ::R5L, SystemZ::R0H, SystemZ::R1H, SystemZ::R2H, SystemZ::R3H, SystemZ::R4H, SystemZ::R5H, SystemZ::R15L, SystemZ::R15H, SystemZ::R14L, SystemZ::R14H, SystemZ::R13L, SystemZ::R13H, SystemZ::R12L, SystemZ::R12H, SystemZ::R11L, SystemZ::R11H, SystemZ::R10L, SystemZ::R10H, SystemZ::R9L, SystemZ::R9H, SystemZ::R8L, SystemZ::R8H, SystemZ::R7L, SystemZ::R7H, SystemZ::R6L, SystemZ::R6H, 
  };

  // GRX32Bit Bit set.
  const uint8_t GRX32BitBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x03, 
  };

  // FP32Bit Register Class...
  const MCPhysReg FP32Bit[] = {
    SystemZ::F0S, SystemZ::F1S, SystemZ::F2S, SystemZ::F3S, SystemZ::F4S, SystemZ::F5S, SystemZ::F6S, SystemZ::F7S, SystemZ::F8S, SystemZ::F9S, SystemZ::F10S, SystemZ::F11S, SystemZ::F12S, SystemZ::F13S, SystemZ::F14S, SystemZ::F15S, 
  };

  // FP32Bit Bit set.
  const uint8_t FP32BitBits[] = {
    0x00, 0x00, 0x00, 0xfc, 0xff, 0x03, 
  };

  // GR32Bit Register Class...
  const MCPhysReg GR32Bit[] = {
    SystemZ::R0L, SystemZ::R1L, SystemZ::R2L, SystemZ::R3L, SystemZ::R4L, SystemZ::R5L, SystemZ::R15L, SystemZ::R14L, SystemZ::R13L, SystemZ::R12L, SystemZ::R11L, SystemZ::R10L, SystemZ::R9L, SystemZ::R8L, SystemZ::R7L, SystemZ::R6L, 
  };

  // GR32Bit Bit set.
  const uint8_t GR32BitBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x03, 
  };

  // GRH32Bit Register Class...
  const MCPhysReg GRH32Bit[] = {
    SystemZ::R0H, SystemZ::R1H, SystemZ::R2H, SystemZ::R3H, SystemZ::R4H, SystemZ::R5H, SystemZ::R15H, SystemZ::R14H, SystemZ::R13H, SystemZ::R12H, SystemZ::R11H, SystemZ::R10H, SystemZ::R9H, SystemZ::R8H, SystemZ::R7H, SystemZ::R6H, 
  };

  // GRH32Bit Bit set.
  const uint8_t GRH32BitBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x03, 
  };

  // ADDR32Bit Register Class...
  const MCPhysReg ADDR32Bit[] = {
    SystemZ::R1L, SystemZ::R2L, SystemZ::R3L, SystemZ::R4L, SystemZ::R5L, SystemZ::R15L, SystemZ::R14L, SystemZ::R13L, SystemZ::R12L, SystemZ::R11L, SystemZ::R10L, SystemZ::R9L, SystemZ::R8L, SystemZ::R7L, SystemZ::R6L, 
  };

  // ADDR32Bit Bit set.
  const uint8_t ADDR32BitBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x03, 
  };

  // CCRegs Register Class...
  const MCPhysReg CCRegs[] = {
    SystemZ::CC, 
  };

  // CCRegs Bit set.
  const uint8_t CCRegsBits[] = {
    0x02, 
  };

  // FP64Bit Register Class...
  const MCPhysReg FP64Bit[] = {
    SystemZ::F0D, SystemZ::F1D, SystemZ::F2D, SystemZ::F3D, SystemZ::F4D, SystemZ::F5D, SystemZ::F6D, SystemZ::F7D, SystemZ::F8D, SystemZ::F9D, SystemZ::F10D, SystemZ::F11D, SystemZ::F12D, SystemZ::F13D, SystemZ::F14D, SystemZ::F15D, 
  };

  // FP64Bit Bit set.
  const uint8_t FP64BitBits[] = {
    0xfc, 0xff, 0x03, 
  };

  // GR64Bit Register Class...
  const MCPhysReg GR64Bit[] = {
    SystemZ::R0D, SystemZ::R1D, SystemZ::R2D, SystemZ::R3D, SystemZ::R4D, SystemZ::R5D, SystemZ::R15D, SystemZ::R14D, SystemZ::R13D, SystemZ::R12D, SystemZ::R11D, SystemZ::R10D, SystemZ::R9D, SystemZ::R8D, SystemZ::R7D, SystemZ::R6D, 
  };

  // GR64Bit Bit set.
  const uint8_t GR64BitBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x03, 
  };

  // ADDR64Bit Register Class...
  const MCPhysReg ADDR64Bit[] = {
    SystemZ::R1D, SystemZ::R2D, SystemZ::R3D, SystemZ::R4D, SystemZ::R5D, SystemZ::R15D, SystemZ::R14D, SystemZ::R13D, SystemZ::R12D, SystemZ::R11D, SystemZ::R10D, SystemZ::R9D, SystemZ::R8D, SystemZ::R7D, SystemZ::R6D, 
  };

  // ADDR64Bit Bit set.
  const uint8_t ADDR64BitBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x03, 
  };

  // FP128Bit Register Class...
  const MCPhysReg FP128Bit[] = {
    SystemZ::F0Q, SystemZ::F1Q, SystemZ::F4Q, SystemZ::F5Q, SystemZ::F8Q, SystemZ::F9Q, SystemZ::F12Q, SystemZ::F13Q, 
  };

  // FP128Bit Bit set.
  const uint8_t FP128BitBits[] = {
    0x00, 0x00, 0xfc, 0x03, 
  };

  // GR128Bit Register Class...
  const MCPhysReg GR128Bit[] = {
    SystemZ::R0Q, SystemZ::R2Q, SystemZ::R4Q, SystemZ::R12Q, SystemZ::R10Q, SystemZ::R8Q, SystemZ::R6Q, SystemZ::R14Q, 
  };

  // GR128Bit Bit set.
  const uint8_t GR128BitBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x03, 
  };

  // ADDR128Bit Register Class...
  const MCPhysReg ADDR128Bit[] = {
    SystemZ::R2Q, SystemZ::R4Q, SystemZ::R12Q, SystemZ::R10Q, SystemZ::R8Q, SystemZ::R6Q, SystemZ::R14Q, 
  };

  // ADDR128Bit Bit set.
  const uint8_t ADDR128BitBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x03, 
  };

}

extern const MCRegisterClass SystemZMCRegisterClasses[] = {
  { "GRX32Bit", GRX32Bit, GRX32BitBits, 32, sizeof(GRX32BitBits), SystemZ::GRX32BitRegClassID, 4, 4, 1, 1 },
  { "FP32Bit", FP32Bit, FP32BitBits, 16, sizeof(FP32BitBits), SystemZ::FP32BitRegClassID, 4, 4, 1, 1 },
  { "GR32Bit", GR32Bit, GR32BitBits, 16, sizeof(GR32BitBits), SystemZ::GR32BitRegClassID, 4, 4, 1, 1 },
  { "GRH32Bit", GRH32Bit, GRH32BitBits, 16, sizeof(GRH32BitBits), SystemZ::GRH32BitRegClassID, 4, 4, 1, 1 },
  { "ADDR32Bit", ADDR32Bit, ADDR32BitBits, 15, sizeof(ADDR32BitBits), SystemZ::ADDR32BitRegClassID, 4, 4, 1, 1 },
  { "CCRegs", CCRegs, CCRegsBits, 1, sizeof(CCRegsBits), SystemZ::CCRegsRegClassID, 4, 4, 1, 1 },
  { "FP64Bit", FP64Bit, FP64BitBits, 16, sizeof(FP64BitBits), SystemZ::FP64BitRegClassID, 8, 8, 1, 1 },
  { "GR64Bit", GR64Bit, GR64BitBits, 16, sizeof(GR64BitBits), SystemZ::GR64BitRegClassID, 8, 8, 1, 1 },
  { "ADDR64Bit", ADDR64Bit, ADDR64BitBits, 15, sizeof(ADDR64BitBits), SystemZ::ADDR64BitRegClassID, 8, 8, 1, 1 },
  { "FP128Bit", FP128Bit, FP128BitBits, 8, sizeof(FP128BitBits), SystemZ::FP128BitRegClassID, 16, 16, 1, 1 },
  { "GR128Bit", GR128Bit, GR128BitBits, 8, sizeof(GR128BitBits), SystemZ::GR128BitRegClassID, 16, 16, 1, 1 },
  { "ADDR128Bit", ADDR128Bit, ADDR128BitBits, 7, sizeof(ADDR128BitBits), SystemZ::ADDR128BitRegClassID, 16, 16, 1, 1 },
};

// SystemZ Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair SystemZDwarfFlavour0Dwarf2L[] = {
  { 0U, SystemZ::R0D },
  { 1U, SystemZ::R1D },
  { 2U, SystemZ::R2D },
  { 3U, SystemZ::R3D },
  { 4U, SystemZ::R4D },
  { 5U, SystemZ::R5D },
  { 6U, SystemZ::R6D },
  { 7U, SystemZ::R7D },
  { 8U, SystemZ::R8D },
  { 9U, SystemZ::R9D },
  { 10U, SystemZ::R10D },
  { 11U, SystemZ::R11D },
  { 12U, SystemZ::R12D },
  { 13U, SystemZ::R13D },
  { 14U, SystemZ::R14D },
  { 15U, SystemZ::R15D },
  { 16U, SystemZ::F0D },
  { 17U, SystemZ::F2D },
  { 18U, SystemZ::F4D },
  { 19U, SystemZ::F6D },
  { 20U, SystemZ::F1D },
  { 21U, SystemZ::F3D },
  { 22U, SystemZ::F5D },
  { 23U, SystemZ::F7D },
  { 24U, SystemZ::F8D },
  { 25U, SystemZ::F10D },
  { 26U, SystemZ::F12D },
  { 27U, SystemZ::F14D },
  { 28U, SystemZ::F9D },
  { 29U, SystemZ::F11D },
  { 30U, SystemZ::F13D },
  { 31U, SystemZ::F15D },
};
extern const unsigned SystemZDwarfFlavour0Dwarf2LSize = sizeof(SystemZDwarfFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair SystemZEHFlavour0Dwarf2L[] = {
  { 0U, SystemZ::R0D },
  { 1U, SystemZ::R1D },
  { 2U, SystemZ::R2D },
  { 3U, SystemZ::R3D },
  { 4U, SystemZ::R4D },
  { 5U, SystemZ::R5D },
  { 6U, SystemZ::R6D },
  { 7U, SystemZ::R7D },
  { 8U, SystemZ::R8D },
  { 9U, SystemZ::R9D },
  { 10U, SystemZ::R10D },
  { 11U, SystemZ::R11D },
  { 12U, SystemZ::R12D },
  { 13U, SystemZ::R13D },
  { 14U, SystemZ::R14D },
  { 15U, SystemZ::R15D },
  { 16U, SystemZ::F0D },
  { 17U, SystemZ::F2D },
  { 18U, SystemZ::F4D },
  { 19U, SystemZ::F6D },
  { 20U, SystemZ::F1D },
  { 21U, SystemZ::F3D },
  { 22U, SystemZ::F5D },
  { 23U, SystemZ::F7D },
  { 24U, SystemZ::F8D },
  { 25U, SystemZ::F10D },
  { 26U, SystemZ::F12D },
  { 27U, SystemZ::F14D },
  { 28U, SystemZ::F9D },
  { 29U, SystemZ::F11D },
  { 30U, SystemZ::F13D },
  { 31U, SystemZ::F15D },
};
extern const unsigned SystemZEHFlavour0Dwarf2LSize = sizeof(SystemZEHFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair SystemZDwarfFlavour0L2Dwarf[] = {
  { SystemZ::F0D, 16U },
  { SystemZ::F1D, 20U },
  { SystemZ::F2D, 17U },
  { SystemZ::F3D, 21U },
  { SystemZ::F4D, 18U },
  { SystemZ::F5D, 22U },
  { SystemZ::F6D, 19U },
  { SystemZ::F7D, 23U },
  { SystemZ::F8D, 24U },
  { SystemZ::F9D, 28U },
  { SystemZ::F10D, 25U },
  { SystemZ::F11D, 29U },
  { SystemZ::F12D, 26U },
  { SystemZ::F13D, 30U },
  { SystemZ::F14D, 27U },
  { SystemZ::F15D, 31U },
  { SystemZ::R0D, 0U },
  { SystemZ::R1D, 1U },
  { SystemZ::R2D, 2U },
  { SystemZ::R3D, 3U },
  { SystemZ::R4D, 4U },
  { SystemZ::R5D, 5U },
  { SystemZ::R6D, 6U },
  { SystemZ::R7D, 7U },
  { SystemZ::R8D, 8U },
  { SystemZ::R9D, 9U },
  { SystemZ::R10D, 10U },
  { SystemZ::R11D, 11U },
  { SystemZ::R12D, 12U },
  { SystemZ::R13D, 13U },
  { SystemZ::R14D, 14U },
  { SystemZ::R15D, 15U },
};
extern const unsigned SystemZDwarfFlavour0L2DwarfSize = sizeof(SystemZDwarfFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair SystemZEHFlavour0L2Dwarf[] = {
  { SystemZ::F0D, 16U },
  { SystemZ::F1D, 20U },
  { SystemZ::F2D, 17U },
  { SystemZ::F3D, 21U },
  { SystemZ::F4D, 18U },
  { SystemZ::F5D, 22U },
  { SystemZ::F6D, 19U },
  { SystemZ::F7D, 23U },
  { SystemZ::F8D, 24U },
  { SystemZ::F9D, 28U },
  { SystemZ::F10D, 25U },
  { SystemZ::F11D, 29U },
  { SystemZ::F12D, 26U },
  { SystemZ::F13D, 30U },
  { SystemZ::F14D, 27U },
  { SystemZ::F15D, 31U },
  { SystemZ::R0D, 0U },
  { SystemZ::R1D, 1U },
  { SystemZ::R2D, 2U },
  { SystemZ::R3D, 3U },
  { SystemZ::R4D, 4U },
  { SystemZ::R5D, 5U },
  { SystemZ::R6D, 6U },
  { SystemZ::R7D, 7U },
  { SystemZ::R8D, 8U },
  { SystemZ::R9D, 9U },
  { SystemZ::R10D, 10U },
  { SystemZ::R11D, 11U },
  { SystemZ::R12D, 12U },
  { SystemZ::R13D, 13U },
  { SystemZ::R14D, 14U },
  { SystemZ::R15D, 15U },
};
extern const unsigned SystemZEHFlavour0L2DwarfSize = sizeof(SystemZEHFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const uint16_t SystemZRegEncodingTable[] = {
  0,
  0,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  0,
  1,
  4,
  5,
  8,
  9,
  12,
  13,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  0,
  2,
  4,
  6,
  8,
  10,
  12,
  14,
};
static inline void InitSystemZMCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0, unsigned PC = 0) {
  RI->InitMCRegisterInfo(SystemZRegDesc, 98, RA, PC, SystemZMCRegisterClasses, 12, SystemZRegUnitRoots, 49, SystemZRegDiffLists, SystemZRegStrings, SystemZSubRegIdxLists, 7,
SystemZSubRegIdxRanges,   SystemZRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(SystemZDwarfFlavour0Dwarf2L, SystemZDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(SystemZEHFlavour0Dwarf2L, SystemZEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(SystemZDwarfFlavour0L2Dwarf, SystemZDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(SystemZEHFlavour0L2Dwarf, SystemZEHFlavour0L2DwarfSize, true);
    break;
  }
}

} // End llvm namespace 
#endif // GET_REGINFO_MC_DESC

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Register Information Header Fragment                                        *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER
#include "llvm/Target/TargetRegisterInfo.h"

namespace llvm {

struct SystemZGenRegisterInfo : public TargetRegisterInfo {
  explicit SystemZGenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0, unsigned PC = 0);
  bool needsStackRealignment(const MachineFunction &) const override
     { return false; }
  unsigned composeSubRegIndicesImpl(unsigned, unsigned) const override;
  const TargetRegisterClass *getSubClassWithSubReg(const TargetRegisterClass*, unsigned) const override;
  const RegClassWeight &getRegClassWeight(const TargetRegisterClass *RC) const override;
  unsigned getRegUnitWeight(unsigned RegUnit) const override;
  unsigned getNumRegPressureSets() const override;
  const char *getRegPressureSetName(unsigned Idx) const override;
  unsigned getRegPressureSetLimit(unsigned Idx) const override;
  const int *getRegClassPressureSets(const TargetRegisterClass *RC) const override;
  const int *getRegUnitPressureSets(unsigned RegUnit) const override;
};

namespace SystemZ { // Register classes
  extern const TargetRegisterClass GRX32BitRegClass;
  extern const TargetRegisterClass FP32BitRegClass;
  extern const TargetRegisterClass GR32BitRegClass;
  extern const TargetRegisterClass GRH32BitRegClass;
  extern const TargetRegisterClass ADDR32BitRegClass;
  extern const TargetRegisterClass CCRegsRegClass;
  extern const TargetRegisterClass FP64BitRegClass;
  extern const TargetRegisterClass GR64BitRegClass;
  extern const TargetRegisterClass ADDR64BitRegClass;
  extern const TargetRegisterClass FP128BitRegClass;
  extern const TargetRegisterClass GR128BitRegClass;
  extern const TargetRegisterClass ADDR128BitRegClass;
} // end of namespace SystemZ

} // End llvm namespace 
#endif // GET_REGINFO_HEADER

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Register and Register Classes Information                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC
namespace llvm {

extern const MCRegisterClass SystemZMCRegisterClasses[];

static const MVT::SimpleValueType VTLists[] = {
  /* 0 */ MVT::i32, MVT::Other,
  /* 2 */ MVT::i64, MVT::Other,
  /* 4 */ MVT::f32, MVT::Other,
  /* 6 */ MVT::f64, MVT::Other,
  /* 8 */ MVT::f128, MVT::Other,
  /* 10 */ MVT::Untyped, MVT::Other,
};

static const char *const SubRegIndexNameTable[] = { "subreg_h32", "subreg_h64", "subreg_hh32", "subreg_hl32", "subreg_l32", "subreg_l64" };


static const unsigned SubRegIndexLaneMaskTable[] = {
  ~0u,
  0x00000001, // subreg_h32
  0x00000006, // subreg_h64
  0x00000002, // subreg_hh32
  0x00000004, // subreg_hl32
  0x00000008, // subreg_l32
  0x00000009, // subreg_l64
 };



static const TargetRegisterClass *const NullRegClasses[] = { nullptr };

static const uint32_t GRX32BitSubClassMask[] = {
  0x0000001d, 
  0x00000d80, // subreg_h32
  0x00000c00, // subreg_hh32
  0x00000c00, // subreg_hl32
  0x00000d80, // subreg_l32
};

static const uint32_t FP32BitSubClassMask[] = {
  0x00000002, 
  0x00000240, // subreg_h32
  0x00000200, // subreg_hh32
};

static const uint32_t GR32BitSubClassMask[] = {
  0x00000014, 
  0x00000c00, // subreg_hl32
  0x00000d80, // subreg_l32
};

static const uint32_t GRH32BitSubClassMask[] = {
  0x00000008, 
  0x00000d80, // subreg_h32
  0x00000c00, // subreg_hh32
};

static const uint32_t ADDR32BitSubClassMask[] = {
  0x00000010, 
  0x00000800, // subreg_hl32
  0x00000d00, // subreg_l32
};

static const uint32_t CCRegsSubClassMask[] = {
  0x00000020, 
};

static const uint32_t FP64BitSubClassMask[] = {
  0x00000040, 
  0x00000200, // subreg_h64
  0x00000200, // subreg_l64
};

static const uint32_t GR64BitSubClassMask[] = {
  0x00000180, 
  0x00000c00, // subreg_h64
  0x00000c00, // subreg_l64
};

static const uint32_t ADDR64BitSubClassMask[] = {
  0x00000100, 
  0x00000800, // subreg_h64
  0x00000c00, // subreg_l64
};

static const uint32_t FP128BitSubClassMask[] = {
  0x00000200, 
};

static const uint32_t GR128BitSubClassMask[] = {
  0x00000c00, 
};

static const uint32_t ADDR128BitSubClassMask[] = {
  0x00000800, 
};

static const uint16_t SuperRegIdxSeqs[] = {
  /* 0 */ 1, 3, 0,
  /* 3 */ 1, 3, 4, 5, 0,
  /* 8 */ 2, 6, 0,
};

static const TargetRegisterClass *const GR32BitSuperclasses[] = {
  &SystemZ::GRX32BitRegClass,
  nullptr
};

static const TargetRegisterClass *const GRH32BitSuperclasses[] = {
  &SystemZ::GRX32BitRegClass,
  nullptr
};

static const TargetRegisterClass *const ADDR32BitSuperclasses[] = {
  &SystemZ::GRX32BitRegClass,
  &SystemZ::GR32BitRegClass,
  nullptr
};

static const TargetRegisterClass *const ADDR64BitSuperclasses[] = {
  &SystemZ::GR64BitRegClass,
  nullptr
};

static const TargetRegisterClass *const ADDR128BitSuperclasses[] = {
  &SystemZ::GR128BitRegClass,
  nullptr
};

namespace SystemZ {   // Register class instances
  extern const TargetRegisterClass GRX32BitRegClass = {
    &SystemZMCRegisterClasses[GRX32BitRegClassID],
    VTLists + 0,
    GRX32BitSubClassMask,
    SuperRegIdxSeqs + 3,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass FP32BitRegClass = {
    &SystemZMCRegisterClasses[FP32BitRegClassID],
    VTLists + 4,
    FP32BitSubClassMask,
    SuperRegIdxSeqs + 0,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass GR32BitRegClass = {
    &SystemZMCRegisterClasses[GR32BitRegClassID],
    VTLists + 0,
    GR32BitSubClassMask,
    SuperRegIdxSeqs + 5,
    GR32BitSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass GRH32BitRegClass = {
    &SystemZMCRegisterClasses[GRH32BitRegClassID],
    VTLists + 0,
    GRH32BitSubClassMask,
    SuperRegIdxSeqs + 0,
    GRH32BitSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass ADDR32BitRegClass = {
    &SystemZMCRegisterClasses[ADDR32BitRegClassID],
    VTLists + 0,
    ADDR32BitSubClassMask,
    SuperRegIdxSeqs + 5,
    ADDR32BitSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass CCRegsRegClass = {
    &SystemZMCRegisterClasses[CCRegsRegClassID],
    VTLists + 0,
    CCRegsSubClassMask,
    SuperRegIdxSeqs + 2,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass FP64BitRegClass = {
    &SystemZMCRegisterClasses[FP64BitRegClassID],
    VTLists + 6,
    FP64BitSubClassMask,
    SuperRegIdxSeqs + 8,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass GR64BitRegClass = {
    &SystemZMCRegisterClasses[GR64BitRegClassID],
    VTLists + 2,
    GR64BitSubClassMask,
    SuperRegIdxSeqs + 8,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass ADDR64BitRegClass = {
    &SystemZMCRegisterClasses[ADDR64BitRegClassID],
    VTLists + 2,
    ADDR64BitSubClassMask,
    SuperRegIdxSeqs + 8,
    ADDR64BitSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass FP128BitRegClass = {
    &SystemZMCRegisterClasses[FP128BitRegClassID],
    VTLists + 8,
    FP128BitSubClassMask,
    SuperRegIdxSeqs + 2,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass GR128BitRegClass = {
    &SystemZMCRegisterClasses[GR128BitRegClassID],
    VTLists + 10,
    GR128BitSubClassMask,
    SuperRegIdxSeqs + 2,
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass ADDR128BitRegClass = {
    &SystemZMCRegisterClasses[ADDR128BitRegClassID],
    VTLists + 10,
    ADDR128BitSubClassMask,
    SuperRegIdxSeqs + 2,
    ADDR128BitSuperclasses,
    nullptr
  };

}

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &SystemZ::GRX32BitRegClass,
    &SystemZ::FP32BitRegClass,
    &SystemZ::GR32BitRegClass,
    &SystemZ::GRH32BitRegClass,
    &SystemZ::ADDR32BitRegClass,
    &SystemZ::CCRegsRegClass,
    &SystemZ::FP64BitRegClass,
    &SystemZ::GR64BitRegClass,
    &SystemZ::ADDR64BitRegClass,
    &SystemZ::FP128BitRegClass,
    &SystemZ::GR128BitRegClass,
    &SystemZ::ADDR128BitRegClass,
  };
}

static const TargetRegisterInfoDesc SystemZRegInfoDesc[] = { // Extra Descriptors
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
};
unsigned SystemZGenRegisterInfo::composeSubRegIndicesImpl(unsigned IdxA, unsigned IdxB) const {
  static const uint8_t RowMap[6] = {
    0, 0, 0, 0, 0, 1, 
  };
  static const uint8_t Rows[2][6] = {
    { 3, 0, 0, 0, 4, 0, },
    { 1, 0, 0, 0, 5, 0, },
  };

  --IdxA; assert(IdxA < 6);
  --IdxB; assert(IdxB < 6);
  return Rows[RowMap[IdxA]][IdxB];
}

const TargetRegisterClass *SystemZGenRegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {
  static const uint8_t Table[12][6] = {
    {	// GRX32Bit
      0,	// subreg_h32
      0,	// subreg_h64
      0,	// subreg_hh32
      0,	// subreg_hl32
      0,	// subreg_l32
      0,	// subreg_l64
    },
    {	// FP32Bit
      0,	// subreg_h32
      0,	// subreg_h64
      0,	// subreg_hh32
      0,	// subreg_hl32
      0,	// subreg_l32
      0,	// subreg_l64
    },
    {	// GR32Bit
      0,	// subreg_h32
      0,	// subreg_h64
      0,	// subreg_hh32
      0,	// subreg_hl32
      0,	// subreg_l32
      0,	// subreg_l64
    },
    {	// GRH32Bit
      0,	// subreg_h32
      0,	// subreg_h64
      0,	// subreg_hh32
      0,	// subreg_hl32
      0,	// subreg_l32
      0,	// subreg_l64
    },
    {	// ADDR32Bit
      0,	// subreg_h32
      0,	// subreg_h64
      0,	// subreg_hh32
      0,	// subreg_hl32
      0,	// subreg_l32
      0,	// subreg_l64
    },
    {	// CCRegs
      0,	// subreg_h32
      0,	// subreg_h64
      0,	// subreg_hh32
      0,	// subreg_hl32
      0,	// subreg_l32
      0,	// subreg_l64
    },
    {	// FP64Bit
      7,	// subreg_h32 -> FP64Bit
      0,	// subreg_h64
      0,	// subreg_hh32
      0,	// subreg_hl32
      0,	// subreg_l32
      0,	// subreg_l64
    },
    {	// GR64Bit
      8,	// subreg_h32 -> GR64Bit
      0,	// subreg_h64
      0,	// subreg_hh32
      0,	// subreg_hl32
      8,	// subreg_l32 -> GR64Bit
      0,	// subreg_l64
    },
    {	// ADDR64Bit
      9,	// subreg_h32 -> ADDR64Bit
      0,	// subreg_h64
      0,	// subreg_hh32
      0,	// subreg_hl32
      9,	// subreg_l32 -> ADDR64Bit
      0,	// subreg_l64
    },
    {	// FP128Bit
      10,	// subreg_h32 -> FP128Bit
      10,	// subreg_h64 -> FP128Bit
      10,	// subreg_hh32 -> FP128Bit
      0,	// subreg_hl32
      0,	// subreg_l32
      10,	// subreg_l64 -> FP128Bit
    },
    {	// GR128Bit
      11,	// subreg_h32 -> GR128Bit
      11,	// subreg_h64 -> GR128Bit
      11,	// subreg_hh32 -> GR128Bit
      11,	// subreg_hl32 -> GR128Bit
      11,	// subreg_l32 -> GR128Bit
      11,	// subreg_l64 -> GR128Bit
    },
    {	// ADDR128Bit
      12,	// subreg_h32 -> ADDR128Bit
      12,	// subreg_h64 -> ADDR128Bit
      12,	// subreg_hh32 -> ADDR128Bit
      12,	// subreg_hl32 -> ADDR128Bit
      12,	// subreg_l32 -> ADDR128Bit
      12,	// subreg_l64 -> ADDR128Bit
    },
  };
  assert(RC && "Missing regclass");
  if (!Idx) return RC;
  --Idx;
  assert(Idx < 6 && "Bad subreg");
  unsigned TV = Table[RC->getID()][Idx];
  return TV ? getRegClass(TV - 1) : nullptr;
}

/// Get the weight in units of pressure for this register class.
const RegClassWeight &SystemZGenRegisterInfo::
getRegClassWeight(const TargetRegisterClass *RC) const {
  static const RegClassWeight RCWeightTable[] = {
    {1, 32},  	// GRX32Bit
    {1, 16},  	// FP32Bit
    {1, 16},  	// GR32Bit
    {1, 16},  	// GRH32Bit
    {1, 15},  	// ADDR32Bit
    {1, 1},  	// CCRegs
    {1, 16},  	// FP64Bit
    {2, 32},  	// GR64Bit
    {2, 30},  	// ADDR64Bit
    {2, 16},  	// FP128Bit
    {4, 32},  	// GR128Bit
    {4, 28},  	// ADDR128Bit
    {0, 0} };
  return RCWeightTable[RC->getID()];
}

/// Get the weight in units of pressure for this register unit.
unsigned SystemZGenRegisterInfo::
getRegUnitWeight(unsigned RegUnit) const {
  assert(RegUnit < 49 && "invalid register unit");
  // All register units have unit weight.
  return 1;
}


// Get the number of dimensions of register pressure.
unsigned SystemZGenRegisterInfo::getNumRegPressureSets() const {
  return 5;
}

// Get the name of this register unit pressure set.
const char *SystemZGenRegisterInfo::
getRegPressureSetName(unsigned Idx) const {
  static const char *PressureNameTable[] = {
    "CCRegs",
    "FP32Bit",
    "GR32Bit",
    "GRH32Bit",
    "GRX32Bit",
    nullptr };
  return PressureNameTable[Idx];
}

// Get the register unit pressure limit for this dimension.
// This limit must be adjusted dynamically for reserved registers.
unsigned SystemZGenRegisterInfo::
getRegPressureSetLimit(unsigned Idx) const {
  static const unsigned PressureLimitTable[] = {
    1,  	// 0: CCRegs
    16,  	// 1: FP32Bit
    16,  	// 2: GR32Bit
    16,  	// 3: GRH32Bit
    32,  	// 4: GRX32Bit
    0 };
  return PressureLimitTable[Idx];
}

/// Table of pressure sets per register class or unit.
static const int RCSetsTable[] = {
    4,  -1,  	// #0 GRX32Bit
    1,  -1,  	// #2 FP32Bit
    2,  4,  -1,  	// #4 GR32Bit
    3,  4,  -1,  	// #7 GRH32Bit
    2,  4,  -1,  	// #10 ADDR32Bit
    0,  -1,  	// #13 CCRegs
    1,  -1,  	// #15 FP64Bit
    4,  -1,  	// #17 GR64Bit
    4,  -1,  	// #19 ADDR64Bit
    1,  -1,  	// #21 FP128Bit
    4,  -1,  	// #23 GR128Bit
    4,  -1,  	// #25 ADDR128Bit
    -1 };

/// Get the dimensions of register pressure impacted by this register class.
/// Returns a -1 terminated array of pressure set IDs
const int* SystemZGenRegisterInfo::
getRegClassPressureSets(const TargetRegisterClass *RC) const {
  static const unsigned RCSetStartTable[] = {
    0,2,4,7,10,13,15,17,19,21,23,25,0 };
  unsigned SetListStart = RCSetStartTable[RC->getID()];
  return &RCSetsTable[SetListStart];
}

/// Get the dimensions of register pressure impacted by this register unit.
/// Returns a -1 terminated array of pressure set IDs
const int* SystemZGenRegisterInfo::
getRegUnitPressureSets(unsigned RegUnit) const {
  assert(RegUnit < 49 && "invalid register unit");
  static const unsigned RUSetStartTable[] = {
    13,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,7,4,7,4,7,4,7,4,7,4,7,4,7,4,7,4,7,4,7,4,7,4,7,4,7,4,7,4,7,4,7,0 };
  unsigned SetListStart = RUSetStartTable[RegUnit];
  return &RCSetsTable[SetListStart];
}

extern const MCRegisterDesc SystemZRegDesc[];
extern const MCPhysReg SystemZRegDiffLists[];
extern const char SystemZRegStrings[];
extern const MCPhysReg SystemZRegUnitRoots[][2];
extern const uint16_t SystemZSubRegIdxLists[];
extern const MCRegisterInfo::SubRegCoveredBits SystemZSubRegIdxRanges[];
extern const uint16_t SystemZRegEncodingTable[];
// SystemZ Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair SystemZDwarfFlavour0Dwarf2L[];
extern const unsigned SystemZDwarfFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair SystemZEHFlavour0Dwarf2L[];
extern const unsigned SystemZEHFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair SystemZDwarfFlavour0L2Dwarf[];
extern const unsigned SystemZDwarfFlavour0L2DwarfSize;

extern const MCRegisterInfo::DwarfLLVMRegPair SystemZEHFlavour0L2Dwarf[];
extern const unsigned SystemZEHFlavour0L2DwarfSize;

SystemZGenRegisterInfo::
SystemZGenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour, unsigned PC)
  : TargetRegisterInfo(SystemZRegInfoDesc, RegisterClasses, RegisterClasses+12,
             SubRegIndexNameTable, SubRegIndexLaneMaskTable, 0xfffffff0) {
  InitMCRegisterInfo(SystemZRegDesc, 98, RA, PC,
                     SystemZMCRegisterClasses, 12,
                     SystemZRegUnitRoots,
                     49,
                     SystemZRegDiffLists,
                     SystemZRegStrings,
                     SystemZSubRegIdxLists,
                     7,
                     SystemZSubRegIdxRanges,
                     SystemZRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(SystemZDwarfFlavour0Dwarf2L, SystemZDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(SystemZEHFlavour0Dwarf2L, SystemZEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(SystemZDwarfFlavour0L2Dwarf, SystemZDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(SystemZEHFlavour0L2Dwarf, SystemZEHFlavour0L2DwarfSize, true);
    break;
  }
}

static const MCPhysReg CSR_SystemZ_SaveList[] = { SystemZ::R6D, SystemZ::R7D, SystemZ::R8D, SystemZ::R9D, SystemZ::R10D, SystemZ::R11D, SystemZ::R12D, SystemZ::R13D, SystemZ::R14D, SystemZ::R15D, SystemZ::F8D, SystemZ::F9D, SystemZ::F10D, SystemZ::F11D, SystemZ::F12D, SystemZ::F13D, SystemZ::F14D, SystemZ::F15D, 0 };
static const uint32_t CSR_SystemZ_RegMask[] = { 0x0003fc00, 0x03ff03fc, 0x03ff03ff, 0x00000000, };


} // End llvm namespace 
#endif // GET_REGINFO_TARGET_DESC

